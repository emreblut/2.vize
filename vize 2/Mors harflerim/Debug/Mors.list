
Mors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008998  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08008b20  08008b20  00018b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c40  08008c40  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  08008c40  08008c40  00018c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c48  08008c48  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c48  08008c48  00018c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c4c  08008c4c  00018c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08008c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020188  2**0
                  CONTENTS
 10 .bss          00001ddc  20000188  20000188  00020188  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001f64  20001f64  00020188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aa3e  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b8e  00000000  00000000  0003abf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001768  00000000  00000000  0003e788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015d8  00000000  00000000  0003fef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025499  00000000  00000000  000414c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da14  00000000  00000000  00066961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2db0  00000000  00000000  00084375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00157125  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000639c  00000000  00000000  00157178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008b08 	.word	0x08008b08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	08008b08 	.word	0x08008b08

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(int unit)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	for(int x=0x3*unit*0xFDEAF;x!=0;x--){}
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4a09      	ldr	r2, [pc, #36]	; (8000520 <delay+0x30>)
 80004fc:	fb02 f303 	mul.w	r3, r2, r3
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	e002      	b.n	800050a <delay+0x1a>
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	3b01      	subs	r3, #1
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d1f9      	bne.n	8000504 <delay+0x14>
}
 8000510:	bf00      	nop
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	002f9c0d 	.word	0x002f9c0d

08000524 <decoder>:
void decoder()
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
	if(number[0]!='\0')
 800052a:	4b13      	ldr	r3, [pc, #76]	; (8000578 <decoder+0x54>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d003      	beq.n	800053a <decoder+0x16>
		strcpy(number_save,number);
 8000532:	4911      	ldr	r1, [pc, #68]	; (8000578 <decoder+0x54>)
 8000534:	4811      	ldr	r0, [pc, #68]	; (800057c <decoder+0x58>)
 8000536:	f008 fadf 	bl	8008af8 <strcpy>
	for(int i=0;i<36;i++)
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	e013      	b.n	8000568 <decoder+0x44>
	{
		if(!strcmp(number,morscode[i]))
 8000540:	4a0f      	ldr	r2, [pc, #60]	; (8000580 <decoder+0x5c>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000548:	4619      	mov	r1, r3
 800054a:	480b      	ldr	r0, [pc, #44]	; (8000578 <decoder+0x54>)
 800054c:	f7ff fe3c 	bl	80001c8 <strcmp>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d105      	bne.n	8000562 <decoder+0x3e>
		{
			finished[0]=symbols[i];
 8000556:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <decoder+0x60>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800055e:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <decoder+0x64>)
 8000560:	6013      	str	r3, [r2, #0]
	for(int i=0;i<36;i++)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3301      	adds	r3, #1
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b23      	cmp	r3, #35	; 0x23
 800056c:	dde8      	ble.n	8000540 <decoder+0x1c>
		}
	}
}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000328 	.word	0x20000328
 800057c:	20000330 	.word	0x20000330
 8000580:	20000000 	.word	0x20000000
 8000584:	20000048 	.word	0x20000048
 8000588:	20000338 	.word	0x20000338

0800058c <mors>:
void mors(uint32_t timer)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	if(200 < timer && timer < 500)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2bc8      	cmp	r3, #200	; 0xc8
 8000598:	d91a      	bls.n	80005d0 <mors+0x44>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005a0:	d216      	bcs.n	80005d0 <mors+0x44>
	{
		HAL_GPIO_WritePin(GPIOD, LD6_Pin,0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a8:	4818      	ldr	r0, [pc, #96]	; (800060c <mors+0x80>)
 80005aa:	f001 f943 	bl	8001834 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LD5_Pin,1);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b4:	4815      	ldr	r0, [pc, #84]	; (800060c <mors+0x80>)
 80005b6:	f001 f93d 	bl	8001834 <HAL_GPIO_WritePin>
		number[press]=dot;
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <mors+0x84>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a15      	ldr	r2, [pc, #84]	; (8000614 <mors+0x88>)
 80005c0:	212e      	movs	r1, #46	; 0x2e
 80005c2:	54d1      	strb	r1, [r2, r3]
		press++;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <mors+0x84>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	4a11      	ldr	r2, [pc, #68]	; (8000610 <mors+0x84>)
 80005cc:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOD, LD6_Pin,1);
		HAL_GPIO_WritePin(GPIOD, LD5_Pin,0);
		number[press]=dash;
		press++;
	}
}
 80005ce:	e019      	b.n	8000604 <mors+0x78>
	else if(499 < timer)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005d6:	d315      	bcc.n	8000604 <mors+0x78>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin,1);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005de:	480b      	ldr	r0, [pc, #44]	; (800060c <mors+0x80>)
 80005e0:	f001 f928 	bl	8001834 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LD5_Pin,0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ea:	4808      	ldr	r0, [pc, #32]	; (800060c <mors+0x80>)
 80005ec:	f001 f922 	bl	8001834 <HAL_GPIO_WritePin>
		number[press]=dash;
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <mors+0x84>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <mors+0x88>)
 80005f6:	215f      	movs	r1, #95	; 0x5f
 80005f8:	54d1      	strb	r1, [r2, r3]
		press++;
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <mors+0x84>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	3301      	adds	r3, #1
 8000600:	4a03      	ldr	r2, [pc, #12]	; (8000610 <mors+0x84>)
 8000602:	6013      	str	r3, [r2, #0]
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40020c00 	.word	0x40020c00
 8000610:	20000340 	.word	0x20000340
 8000614:	20000328 	.word	0x20000328

08000618 <mors_blink>:
void mors_blink()
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
	if((done||press==5)&&start)
 800061e:	4b3d      	ldr	r3, [pc, #244]	; (8000714 <mors_blink+0xfc>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d103      	bne.n	800062e <mors_blink+0x16>
 8000626:	4b3c      	ldr	r3, [pc, #240]	; (8000718 <mors_blink+0x100>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b05      	cmp	r3, #5
 800062c:	d16b      	bne.n	8000706 <mors_blink+0xee>
 800062e:	4b3b      	ldr	r3, [pc, #236]	; (800071c <mors_blink+0x104>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d067      	beq.n	8000706 <mors_blink+0xee>
	{
		CDC_Transmit_FS((uint8_t*)*finished, strlen(*finished));
 8000636:	4b3a      	ldr	r3, [pc, #232]	; (8000720 <mors_blink+0x108>)
 8000638:	681c      	ldr	r4, [r3, #0]
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <mors_blink+0x108>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fdcc 	bl	80001dc <strlen>
 8000644:	4603      	mov	r3, r0
 8000646:	b29b      	uxth	r3, r3
 8000648:	4619      	mov	r1, r3
 800064a:	4620      	mov	r0, r4
 800064c:	f007 fdbe 	bl	80081cc <CDC_Transmit_FS>
		for(int i=0;i<5;i++)
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	e007      	b.n	8000666 <mors_blink+0x4e>
			number[i]='\0';
 8000656:	4a33      	ldr	r2, [pc, #204]	; (8000724 <mors_blink+0x10c>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<5;i++)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b04      	cmp	r3, #4
 800066a:	ddf4      	ble.n	8000656 <mors_blink+0x3e>
		HAL_GPIO_WritePin(GPIOD, LD5_Pin,0);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000672:	482d      	ldr	r0, [pc, #180]	; (8000728 <mors_blink+0x110>)
 8000674:	f001 f8de 	bl	8001834 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin,0);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067e:	482a      	ldr	r0, [pc, #168]	; (8000728 <mors_blink+0x110>)
 8000680:	f001 f8d8 	bl	8001834 <HAL_GPIO_WritePin>
		for(int i=0;number_save[i]!='\0';i++)
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	e031      	b.n	80006ee <mors_blink+0xd6>
		{
			switch(number_save[i])
 800068a:	4a28      	ldr	r2, [pc, #160]	; (800072c <mors_blink+0x114>)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	4413      	add	r3, r2
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b2e      	cmp	r3, #46	; 0x2e
 8000694:	d002      	beq.n	800069c <mors_blink+0x84>
 8000696:	2b5f      	cmp	r3, #95	; 0x5f
 8000698:	d013      	beq.n	80006c2 <mors_blink+0xaa>
						  delay(0x3);
					      HAL_GPIO_WritePin(GPIOD, LD3_Pin, 0);
						  delay(0x3);
						  break;
			  	 default:
			  	  		 break;
 800069a:	e025      	b.n	80006e8 <mors_blink+0xd0>
		  	  			HAL_GPIO_WritePin(GPIOD, LD3_Pin, 1);
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a2:	4821      	ldr	r0, [pc, #132]	; (8000728 <mors_blink+0x110>)
 80006a4:	f001 f8c6 	bl	8001834 <HAL_GPIO_WritePin>
		  	  			delay(0x1);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff21 	bl	80004f0 <delay>
			  	  		HAL_GPIO_WritePin(GPIOD, LD3_Pin, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b4:	481c      	ldr	r0, [pc, #112]	; (8000728 <mors_blink+0x110>)
 80006b6:	f001 f8bd 	bl	8001834 <HAL_GPIO_WritePin>
			  	  		delay(0x1);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f7ff ff18 	bl	80004f0 <delay>
			  	  		break;
 80006c0:	e012      	b.n	80006e8 <mors_blink+0xd0>
						  HAL_GPIO_WritePin(GPIOD, LD3_Pin, 1);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c8:	4817      	ldr	r0, [pc, #92]	; (8000728 <mors_blink+0x110>)
 80006ca:	f001 f8b3 	bl	8001834 <HAL_GPIO_WritePin>
						  delay(0x3);
 80006ce:	2003      	movs	r0, #3
 80006d0:	f7ff ff0e 	bl	80004f0 <delay>
					      HAL_GPIO_WritePin(GPIOD, LD3_Pin, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006da:	4813      	ldr	r0, [pc, #76]	; (8000728 <mors_blink+0x110>)
 80006dc:	f001 f8aa 	bl	8001834 <HAL_GPIO_WritePin>
						  delay(0x3);
 80006e0:	2003      	movs	r0, #3
 80006e2:	f7ff ff05 	bl	80004f0 <delay>
						  break;
 80006e6:	bf00      	nop
		for(int i=0;number_save[i]!='\0';i++)
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4a0f      	ldr	r2, [pc, #60]	; (800072c <mors_blink+0x114>)
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d1c7      	bne.n	800068a <mors_blink+0x72>
			}
		}
		delay(0x1);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff fef8 	bl	80004f0 <delay>
		press=0;
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <mors_blink+0x100>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	}
	done=0;
 8000706:	4b03      	ldr	r3, [pc, #12]	; (8000714 <mors_blink+0xfc>)
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bd90      	pop	{r4, r7, pc}
 8000714:	20000348 	.word	0x20000348
 8000718:	20000340 	.word	0x20000340
 800071c:	2000034c 	.word	0x2000034c
 8000720:	20000338 	.word	0x20000338
 8000724:	20000328 	.word	0x20000328
 8000728:	40020c00 	.word	0x40020c00
 800072c:	20000330 	.word	0x20000330

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	press=0;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <main+0x38>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f000 fced 	bl	8001118 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f817 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f000 f941 	bl	80009c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000746:	f000 f83f 	bl	80007c8 <MX_I2C1_Init>
  MX_I2S3_Init();
 800074a:	f000 f86b 	bl	8000824 <MX_I2S3_Init>
  MX_SPI1_Init();
 800074e:	f000 f899 	bl	8000884 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000752:	f007 fc75 	bl	8008040 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8000756:	f000 f8cb 	bl	80008f0 <MX_TIM6_Init>
  MX_TIM7_Init();
 800075a:	f000 f8ff 	bl	800095c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim7);
 800075e:	4803      	ldr	r0, [pc, #12]	; (800076c <main+0x3c>)
 8000760:	f003 fd20 	bl	80041a4 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000764:	e7fe      	b.n	8000764 <main+0x34>
 8000766:	bf00      	nop
 8000768:	20000340 	.word	0x20000340
 800076c:	200002e0 	.word	0x200002e0

08000770 <SystemClock_Config>:
  /* USER CODE END 3 */
}


void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b092      	sub	sp, #72	; 0x48
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0318 	add.w	r3, r7, #24
 800077a:	2230      	movs	r2, #48	; 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f008 f9b2 	bl	8008ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	230f      	movs	r3, #15
 8000794:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2302      	movs	r3, #2
 8000798:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800079e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2105      	movs	r1, #5
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 f8d4 	bl	800395c <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80007ba:	f000 faa9 	bl	8000d10 <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3748      	adds	r7, #72	; 0x48
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2C1_Init+0x50>)
 80007ce:	4a13      	ldr	r2, [pc, #76]	; (800081c <MX_I2C1_Init+0x54>)
 80007d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_I2C1_Init+0x50>)
 80007d4:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_I2C1_Init+0x58>)
 80007d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_I2C1_Init+0x50>)
 80007e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_I2C1_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_I2C1_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_I2C1_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_I2C1_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_I2C1_Init+0x50>)
 8000806:	f001 f847 	bl	8001898 <HAL_I2C_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000810:	f000 fa7e 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200001a4 	.word	0x200001a4
 800081c:	40005400 	.word	0x40005400
 8000820:	000186a0 	.word	0x000186a0

08000824 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_I2S3_Init+0x54>)
 800082a:	4a14      	ldr	r2, [pc, #80]	; (800087c <MX_I2S3_Init+0x58>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_I2S3_Init+0x54>)
 8000830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000834:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_I2S3_Init+0x54>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_I2S3_Init+0x54>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <MX_I2S3_Init+0x54>)
 8000844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000848:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_I2S3_Init+0x54>)
 800084c:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <MX_I2S3_Init+0x5c>)
 800084e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_I2S3_Init+0x54>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_I2S3_Init+0x54>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_I2S3_Init+0x54>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_I2S3_Init+0x54>)
 8000864:	f001 f95c 	bl	8001b20 <HAL_I2S_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800086e:	f000 fa4f 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200001f8 	.word	0x200001f8
 800087c:	40003c00 	.word	0x40003c00
 8000880:	00017700 	.word	0x00017700

08000884 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0


  hspi1.Instance = SPI1;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_SPI1_Init+0x64>)
 800088a:	4a18      	ldr	r2, [pc, #96]	; (80008ec <MX_SPI1_Init+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_SPI1_Init+0x64>)
 8000890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000894:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SPI1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008d0:	220a      	movs	r2, #10
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008d6:	f003 fb8d 	bl	8003ff4 <HAL_SPI_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008e0:	f000 fa16 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000240 	.word	0x20000240
 80008ec:	40013000 	.word	0x40013000

080008f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_TIM6_Init+0x64>)
 8000900:	4a15      	ldr	r2, [pc, #84]	; (8000958 <MX_TIM6_Init+0x68>)
 8000902:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48000;
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_TIM6_Init+0x64>)
 8000906:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800090a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_TIM6_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 650;
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MX_TIM6_Init+0x64>)
 8000914:	f240 228a 	movw	r2, #650	; 0x28a
 8000918:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_TIM6_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000920:	480c      	ldr	r0, [pc, #48]	; (8000954 <MX_TIM6_Init+0x64>)
 8000922:	f003 fbf0 	bl	8004106 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800092c:	f000 f9f0 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000930:	2300      	movs	r3, #0
 8000932:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_TIM6_Init+0x64>)
 800093e:	f003 fed9 	bl	80046f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000948:	f000 f9e2 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000298 	.word	0x20000298
 8000958:	40001000 	.word	0x40001000

0800095c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000962:	463b      	mov	r3, r7
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_TIM7_Init+0x64>)
 800096c:	4a15      	ldr	r2, [pc, #84]	; (80009c4 <MX_TIM7_Init+0x68>)
 800096e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 47999;
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_TIM7_Init+0x64>)
 8000972:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000976:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_TIM7_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 17500;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_TIM7_Init+0x64>)
 8000980:	f244 425c 	movw	r2, #17500	; 0x445c
 8000984:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_TIM7_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_TIM7_Init+0x64>)
 800098e:	f003 fbba 	bl	8004106 <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000998:	f000 f9ba 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80009a4:	463b      	mov	r3, r7
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_TIM7_Init+0x64>)
 80009aa:	f003 fea3 	bl	80046f4 <HAL_TIMEx_MasterConfigSynchronization>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80009b4:	f000 f9ac 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200002e0 	.word	0x200002e0
 80009c4:	40001400 	.word	0x40001400

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08c      	sub	sp, #48	; 0x30
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
 80009e2:	4b7a      	ldr	r3, [pc, #488]	; (8000bcc <MX_GPIO_Init+0x204>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a79      	ldr	r2, [pc, #484]	; (8000bcc <MX_GPIO_Init+0x204>)
 80009e8:	f043 0310 	orr.w	r3, r3, #16
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b77      	ldr	r3, [pc, #476]	; (8000bcc <MX_GPIO_Init+0x204>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0310 	and.w	r3, r3, #16
 80009f6:	61bb      	str	r3, [r7, #24]
 80009f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	4b73      	ldr	r3, [pc, #460]	; (8000bcc <MX_GPIO_Init+0x204>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a72      	ldr	r2, [pc, #456]	; (8000bcc <MX_GPIO_Init+0x204>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b70      	ldr	r3, [pc, #448]	; (8000bcc <MX_GPIO_Init+0x204>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	4b6c      	ldr	r3, [pc, #432]	; (8000bcc <MX_GPIO_Init+0x204>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a6b      	ldr	r2, [pc, #428]	; (8000bcc <MX_GPIO_Init+0x204>)
 8000a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b69      	ldr	r3, [pc, #420]	; (8000bcc <MX_GPIO_Init+0x204>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b65      	ldr	r3, [pc, #404]	; (8000bcc <MX_GPIO_Init+0x204>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a64      	ldr	r2, [pc, #400]	; (8000bcc <MX_GPIO_Init+0x204>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b62      	ldr	r3, [pc, #392]	; (8000bcc <MX_GPIO_Init+0x204>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	4b5e      	ldr	r3, [pc, #376]	; (8000bcc <MX_GPIO_Init+0x204>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a5d      	ldr	r2, [pc, #372]	; (8000bcc <MX_GPIO_Init+0x204>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b5b      	ldr	r3, [pc, #364]	; (8000bcc <MX_GPIO_Init+0x204>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b57      	ldr	r3, [pc, #348]	; (8000bcc <MX_GPIO_Init+0x204>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a56      	ldr	r2, [pc, #344]	; (8000bcc <MX_GPIO_Init+0x204>)
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b54      	ldr	r3, [pc, #336]	; (8000bcc <MX_GPIO_Init+0x204>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0308 	and.w	r3, r3, #8
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2108      	movs	r1, #8
 8000a8a:	4851      	ldr	r0, [pc, #324]	; (8000bd0 <MX_GPIO_Init+0x208>)
 8000a8c:	f000 fed2 	bl	8001834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2101      	movs	r1, #1
 8000a94:	484f      	ldr	r0, [pc, #316]	; (8000bd4 <MX_GPIO_Init+0x20c>)
 8000a96:	f000 fecd 	bl	8001834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000aa0:	484d      	ldr	r0, [pc, #308]	; (8000bd8 <MX_GPIO_Init+0x210>)
 8000aa2:	f000 fec7 	bl	8001834 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4844      	ldr	r0, [pc, #272]	; (8000bd0 <MX_GPIO_Init+0x208>)
 8000abe:	f000 fd05 	bl	80014cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	483e      	ldr	r0, [pc, #248]	; (8000bd4 <MX_GPIO_Init+0x20c>)
 8000ada:	f000 fcf7 	bl	80014cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ade:	2308      	movs	r3, #8
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aee:	2305      	movs	r3, #5
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4836      	ldr	r0, [pc, #216]	; (8000bd4 <MX_GPIO_Init+0x20c>)
 8000afa:	f000 fce7 	bl	80014cc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000afe:	2301      	movs	r3, #1
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b02:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4832      	ldr	r0, [pc, #200]	; (8000bdc <MX_GPIO_Init+0x214>)
 8000b14:	f000 fcda 	bl	80014cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	482d      	ldr	r0, [pc, #180]	; (8000be0 <MX_GPIO_Init+0x218>)
 8000b2c:	f000 fcce 	bl	80014cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b42:	2305      	movs	r3, #5
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4824      	ldr	r0, [pc, #144]	; (8000be0 <MX_GPIO_Init+0x218>)
 8000b4e:	f000 fcbd 	bl	80014cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b52:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b56:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481b      	ldr	r0, [pc, #108]	; (8000bd8 <MX_GPIO_Init+0x210>)
 8000b6c:	f000 fcae 	bl	80014cc <HAL_GPIO_Init>

  /*Configure GPIO pin : letterdone_Pin */
  GPIO_InitStruct.Pin = letterdone_Pin;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b74:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(letterdone_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	4814      	ldr	r0, [pc, #80]	; (8000bd8 <MX_GPIO_Init+0x210>)
 8000b86:	f000 fca1 	bl	80014cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b8a:	2320      	movs	r3, #32
 8000b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480e      	ldr	r0, [pc, #56]	; (8000bd8 <MX_GPIO_Init+0x210>)
 8000b9e:	f000 fc95 	bl	80014cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2006      	movs	r0, #6
 8000ba8:	f000 fc4b 	bl	8001442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bac:	2006      	movs	r0, #6
 8000bae:	f000 fc64 	bl	800147a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2007      	movs	r0, #7
 8000bb8:	f000 fc43 	bl	8001442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000bbc:	2007      	movs	r0, #7
 8000bbe:	f000 fc5c 	bl	800147a <HAL_NVIC_EnableIRQ>

}
 8000bc2:	bf00      	nop
 8000bc4:	3730      	adds	r7, #48	; 0x30
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020400 	.word	0x40020400

08000be4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start_IT(&htim6);
 8000bee:	4834      	ldr	r0, [pc, #208]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000bf0:	f003 fb40 	bl	8004274 <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin==B1_Pin)
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d14c      	bne.n	8000c94 <HAL_GPIO_EXTI_Callback+0xb0>
	{
		start=1;
 8000bfa:	4b32      	ldr	r3, [pc, #200]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, LD5_Pin,0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c06:	4830      	ldr	r0, [pc, #192]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000c08:	f000 fe14 	bl	8001834 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin,0);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c12:	482d      	ldr	r0, [pc, #180]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000c14:	f000 fe0e 	bl	8001834 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOA, B1_Pin))
 8000c18:	2101      	movs	r1, #1
 8000c1a:	482c      	ldr	r0, [pc, #176]	; (8000ccc <HAL_GPIO_EXTI_Callback+0xe8>)
 8000c1c:	f000 fdf2 	bl	8001804 <HAL_GPIO_ReadPin>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d015      	beq.n	8000c52 <HAL_GPIO_EXTI_Callback+0x6e>
		{//rising edge
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000c26:	2006      	movs	r0, #6
 8000c28:	f000 fc35 	bl	8001496 <HAL_NVIC_DisableIRQ>
			done=0;
 8000c2c:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0xec>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
			bounce=1;
 8000c32:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	601a      	str	r2, [r3, #0]
			TIM7->CNT=0;
 8000c38:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
			TIM6->CNT=0;
 8000c3e:	4b27      	ldr	r3, [pc, #156]	; (8000cdc <HAL_GPIO_EXTI_Callback+0xf8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_GPIO_WritePin(GPIOD, LD4_Pin,1);
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4a:	481f      	ldr	r0, [pc, #124]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000c4c:	f000 fdf2 	bl	8001834 <HAL_GPIO_WritePin>
 8000c50:	e020      	b.n	8000c94 <HAL_GPIO_EXTI_Callback+0xb0>
		}
		else
		{//falling edge
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000c52:	2006      	movs	r0, #6
 8000c54:	f000 fc1f 	bl	8001496 <HAL_NVIC_DisableIRQ>
			bounce=1;
 8000c58:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
			press_time=TIM7->CNT;
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c62:	4a1f      	ldr	r2, [pc, #124]	; (8000ce0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000c64:	6013      	str	r3, [r2, #0]
	        HAL_GPIO_WritePin(GPIOD, LD4_Pin,0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c6c:	4816      	ldr	r0, [pc, #88]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000c6e:	f000 fde1 	bl	8001834 <HAL_GPIO_WritePin>
	        if(press<5)
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_GPIO_EXTI_Callback+0x100>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	dc05      	bgt.n	8000c86 <HAL_GPIO_EXTI_Callback+0xa2>
	        	mors(press_time);
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fc84 	bl	800058c <mors>
 8000c84:	e001      	b.n	8000c8a <HAL_GPIO_EXTI_Callback+0xa6>
	        else
	        	mors_blink();
 8000c86:	f7ff fcc7 	bl	8000618 <mors_blink>
	        decoder();
 8000c8a:	f7ff fc4b 	bl	8000524 <decoder>
			TIM7->CNT=0;
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
	if(GPIO_Pin==letterdone_Pin)
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d10d      	bne.n	8000cb6 <HAL_GPIO_EXTI_Callback+0xd2>
	{
		if(!(HAL_GPIO_ReadPin(GPIOD, letterdone_Pin)));
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	480a      	ldr	r0, [pc, #40]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000c9e:	f000 fdb1 	bl	8001804 <HAL_GPIO_ReadPin>
		{
			done=0;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0xec>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
			decoder();
 8000ca8:	f7ff fc3c 	bl	8000524 <decoder>
			mors_blink();
 8000cac:	f7ff fcb4 	bl	8000618 <mors_blink>
			start=0;
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000298 	.word	0x20000298
 8000cc4:	2000034c 	.word	0x2000034c
 8000cc8:	40020c00 	.word	0x40020c00
 8000ccc:	40020000 	.word	0x40020000
 8000cd0:	20000348 	.word	0x20000348
 8000cd4:	20000344 	.word	0x20000344
 8000cd8:	40001400 	.word	0x40001400
 8000cdc:	40001000 	.word	0x40001000
 8000ce0:	2000033c 	.word	0x2000033c
 8000ce4:	20000340 	.word	0x20000340

08000ce8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	if (bounce)
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d005      	beq.n	8000d04 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cf8:	2006      	movs	r0, #6
 8000cfa:	f000 fbbe 	bl	800147a <HAL_NVIC_EnableIRQ>
		bounce=0;
 8000cfe:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
	}
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000344 	.word	0x20000344

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5a:	2007      	movs	r0, #7
 8000d5c:	f000 fb66 	bl	800142c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <HAL_I2C_MspInit+0x84>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d12c      	bne.n	8000de8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000daa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db0:	2312      	movs	r3, #18
 8000db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480c      	ldr	r0, [pc, #48]	; (8000df8 <HAL_I2C_MspInit+0x8c>)
 8000dc8:	f000 fb80 	bl	80014cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000dd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dda:	6413      	str	r3, [r2, #64]	; 0x40
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	; 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40005400 	.word	0x40005400
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020400 	.word	0x40020400

08000dfc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08e      	sub	sp, #56	; 0x38
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a31      	ldr	r2, [pc, #196]	; (8000eec <HAL_I2S_MspInit+0xf0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d15a      	bne.n	8000ee2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e30:	23c0      	movs	r3, #192	; 0xc0
 8000e32:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f002 ff99 	bl	8003d74 <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e48:	f7ff ff62 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <HAL_I2S_MspInit+0xf4>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	4a26      	ldr	r2, [pc, #152]	; (8000ef0 <HAL_I2S_MspInit+0xf4>)
 8000e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5c:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <HAL_I2S_MspInit+0xf4>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <HAL_I2S_MspInit+0xf4>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	4a1f      	ldr	r2, [pc, #124]	; (8000ef0 <HAL_I2S_MspInit+0xf4>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
 8000e78:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <HAL_I2S_MspInit+0xf4>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <HAL_I2S_MspInit+0xf4>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <HAL_I2S_MspInit+0xf4>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	6313      	str	r3, [r2, #48]	; 0x30
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <HAL_I2S_MspInit+0xf4>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ea0:	2310      	movs	r3, #16
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eb0:	2306      	movs	r3, #6
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <HAL_I2S_MspInit+0xf8>)
 8000ebc:	f000 fb06 	bl	80014cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ec0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <HAL_I2S_MspInit+0xfc>)
 8000ede:	f000 faf5 	bl	80014cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	3738      	adds	r7, #56	; 0x38
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40003c00 	.word	0x40003c00
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020800 	.word	0x40020800

08000efc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <HAL_SPI_MspInit+0x84>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d12b      	bne.n	8000f76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f56:	23e0      	movs	r3, #224	; 0xe0
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f66:	2305      	movs	r3, #5
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <HAL_SPI_MspInit+0x8c>)
 8000f72:	f000 faab 	bl	80014cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	; 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40013000 	.word	0x40013000
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000

08000f8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <HAL_TIM_Base_MspInit+0x70>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d116      	bne.n	8000fcc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b17      	ldr	r3, [pc, #92]	; (8001000 <HAL_TIM_Base_MspInit+0x74>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a16      	ldr	r2, [pc, #88]	; (8001000 <HAL_TIM_Base_MspInit+0x74>)
 8000fa8:	f043 0310 	orr.w	r3, r3, #16
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b14      	ldr	r3, [pc, #80]	; (8001000 <HAL_TIM_Base_MspInit+0x74>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2036      	movs	r0, #54	; 0x36
 8000fc0:	f000 fa3f 	bl	8001442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fc4:	2036      	movs	r0, #54	; 0x36
 8000fc6:	f000 fa58 	bl	800147a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000fca:	e012      	b.n	8000ff2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0c      	ldr	r2, [pc, #48]	; (8001004 <HAL_TIM_Base_MspInit+0x78>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d10d      	bne.n	8000ff2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <HAL_TIM_Base_MspInit+0x74>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	4a08      	ldr	r2, [pc, #32]	; (8001000 <HAL_TIM_Base_MspInit+0x74>)
 8000fe0:	f043 0320 	orr.w	r3, r3, #32
 8000fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_TIM_Base_MspInit+0x74>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f003 0320 	and.w	r3, r3, #32
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40001000 	.word	0x40001000
 8001000:	40023800 	.word	0x40023800
 8001004:	40001400 	.word	0x40001400

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800100c:	e7fe      	b.n	800100c <NMI_Handler+0x4>

0800100e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <MemManage_Handler+0x4>

0800101a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <UsageFault_Handler+0x4>

08001026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001054:	f000 f8b2 	bl	80011bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001060:	2001      	movs	r0, #1
 8001062:	f000 fc01 	bl	8001868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}

0800106a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(letterdone_Pin);
 800106e:	2002      	movs	r0, #2
 8001070:	f000 fbfa 	bl	8001868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <TIM6_DAC_IRQHandler+0x10>)
 800107e:	f003 f969 	bl	8004354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000298 	.word	0x20000298

0800108c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <OTG_FS_IRQHandler+0x10>)
 8001092:	f001 fb35 	bl	8002700 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20001838 	.word	0x20001838

080010a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <SystemInit+0x20>)
 80010a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <SystemInit+0x20>)
 80010ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ca:	490e      	ldr	r1, [pc, #56]	; (8001104 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0b      	ldr	r2, [pc, #44]	; (800110c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e0:	4c0b      	ldr	r4, [pc, #44]	; (8001110 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ee:	f7ff ffd7 	bl	80010a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f2:	f007 fcd5 	bl	8008aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f6:	f7ff fb1b 	bl	8000730 <main>
  bx  lr    
 80010fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8001108:	08008c50 	.word	0x08008c50
  ldr r2, =_sbss
 800110c:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8001110:	20001f64 	.word	0x20001f64

08001114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC_IRQHandler>
	...

08001118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <HAL_Init+0x40>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <HAL_Init+0x40>)
 8001122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001126:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <HAL_Init+0x40>)
 800112e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001132:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a07      	ldr	r2, [pc, #28]	; (8001158 <HAL_Init+0x40>)
 800113a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001140:	2003      	movs	r0, #3
 8001142:	f000 f973 	bl	800142c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001146:	2000      	movs	r0, #0
 8001148:	f000 f808 	bl	800115c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800114c:	f7ff fde6 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023c00 	.word	0x40023c00

0800115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_InitTick+0x54>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_InitTick+0x58>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001172:	fbb3 f3f1 	udiv	r3, r3, r1
 8001176:	fbb2 f3f3 	udiv	r3, r2, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f999 	bl	80014b2 <HAL_SYSTICK_Config>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e00e      	b.n	80011a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b0f      	cmp	r3, #15
 800118e:	d80a      	bhi.n	80011a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001190:	2200      	movs	r2, #0
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f000 f953 	bl	8001442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800119c:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <HAL_InitTick+0x5c>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e000      	b.n	80011a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000008c 	.word	0x2000008c
 80011b4:	20000094 	.word	0x20000094
 80011b8:	20000090 	.word	0x20000090

080011bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x20>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x24>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <HAL_IncTick+0x24>)
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000094 	.word	0x20000094
 80011e0:	20000350 	.word	0x20000350

080011e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return uwTick;
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <HAL_GetTick+0x14>)
 80011ea:	681b      	ldr	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000350 	.word	0x20000350

080011fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff ffee 	bl	80011e4 <HAL_GetTick>
 8001208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001214:	d005      	beq.n	8001222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <HAL_Delay+0x44>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4413      	add	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001222:	bf00      	nop
 8001224:	f7ff ffde 	bl	80011e4 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	429a      	cmp	r2, r3
 8001232:	d8f7      	bhi.n	8001224 <HAL_Delay+0x28>
  {
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000094 	.word	0x20000094

08001244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001260:	4013      	ands	r3, r2
 8001262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800126c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	60d3      	str	r3, [r2, #12]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	0a1b      	lsrs	r3, r3, #8
 8001296:	f003 0307 	and.w	r3, r3, #7
}
 800129a:	4618      	mov	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	db0b      	blt.n	80012d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f003 021f 	and.w	r2, r3, #31
 80012c0:	4907      	ldr	r1, [pc, #28]	; (80012e0 <__NVIC_EnableIRQ+0x38>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	2001      	movs	r0, #1
 80012ca:	fa00 f202 	lsl.w	r2, r0, r2
 80012ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000e100 	.word	0xe000e100

080012e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db12      	blt.n	800131c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	490a      	ldr	r1, [pc, #40]	; (8001328 <__NVIC_DisableIRQ+0x44>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2001      	movs	r0, #1
 8001306:	fa00 f202 	lsl.w	r2, r0, r2
 800130a:	3320      	adds	r3, #32
 800130c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001310:	f3bf 8f4f 	dsb	sy
}
 8001314:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001316:	f3bf 8f6f 	isb	sy
}
 800131a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100

0800132c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	2b00      	cmp	r3, #0
 800133e:	db0a      	blt.n	8001356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	490c      	ldr	r1, [pc, #48]	; (8001378 <__NVIC_SetPriority+0x4c>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	0112      	lsls	r2, r2, #4
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	440b      	add	r3, r1
 8001350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001354:	e00a      	b.n	800136c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4908      	ldr	r1, [pc, #32]	; (800137c <__NVIC_SetPriority+0x50>)
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	3b04      	subs	r3, #4
 8001364:	0112      	lsls	r2, r2, #4
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	440b      	add	r3, r1
 800136a:	761a      	strb	r2, [r3, #24]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	; 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f1c3 0307 	rsb	r3, r3, #7
 800139a:	2b04      	cmp	r3, #4
 800139c:	bf28      	it	cs
 800139e:	2304      	movcs	r3, #4
 80013a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3304      	adds	r3, #4
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d902      	bls.n	80013b0 <NVIC_EncodePriority+0x30>
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3b03      	subs	r3, #3
 80013ae:	e000      	b.n	80013b2 <NVIC_EncodePriority+0x32>
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43da      	mvns	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	401a      	ands	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c8:	f04f 31ff 	mov.w	r1, #4294967295
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	4313      	orrs	r3, r2
         );
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	; 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f8:	d301      	bcc.n	80013fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00f      	b.n	800141e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <SysTick_Config+0x40>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001406:	210f      	movs	r1, #15
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f7ff ff8e 	bl	800132c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <SysTick_Config+0x40>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <SysTick_Config+0x40>)
 8001418:	2207      	movs	r2, #7
 800141a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff05 	bl	8001244 <__NVIC_SetPriorityGrouping>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001454:	f7ff ff1a 	bl	800128c <__NVIC_GetPriorityGrouping>
 8001458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	6978      	ldr	r0, [r7, #20]
 8001460:	f7ff ff8e 	bl	8001380 <NVIC_EncodePriority>
 8001464:	4602      	mov	r2, r0
 8001466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff5d 	bl	800132c <__NVIC_SetPriority>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff0d 	bl	80012a8 <__NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff1d 	bl	80012e4 <__NVIC_DisableIRQ>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff94 	bl	80013e8 <SysTick_Config>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b089      	sub	sp, #36	; 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	e16b      	b.n	80017c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014e8:	2201      	movs	r2, #1
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	429a      	cmp	r2, r3
 8001502:	f040 815a 	bne.w	80017ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b01      	cmp	r3, #1
 8001510:	d005      	beq.n	800151e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800151a:	2b02      	cmp	r3, #2
 800151c:	d130      	bne.n	8001580 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2203      	movs	r2, #3
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001554:	2201      	movs	r2, #1
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	f003 0201 	and.w	r2, r3, #1
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	2b03      	cmp	r3, #3
 800158a:	d017      	beq.n	80015bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2203      	movs	r2, #3
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d123      	bne.n	8001610 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	08da      	lsrs	r2, r3, #3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3208      	adds	r2, #8
 80015d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	220f      	movs	r2, #15
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	691a      	ldr	r2, [r3, #16]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	08da      	lsrs	r2, r3, #3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3208      	adds	r2, #8
 800160a:	69b9      	ldr	r1, [r7, #24]
 800160c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0203 	and.w	r2, r3, #3
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80b4 	beq.w	80017ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b60      	ldr	r3, [pc, #384]	; (80017d8 <HAL_GPIO_Init+0x30c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a5f      	ldr	r2, [pc, #380]	; (80017d8 <HAL_GPIO_Init+0x30c>)
 800165c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b5d      	ldr	r3, [pc, #372]	; (80017d8 <HAL_GPIO_Init+0x30c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800166e:	4a5b      	ldr	r2, [pc, #364]	; (80017dc <HAL_GPIO_Init+0x310>)
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	3302      	adds	r3, #2
 8001676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	220f      	movs	r2, #15
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a52      	ldr	r2, [pc, #328]	; (80017e0 <HAL_GPIO_Init+0x314>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d02b      	beq.n	80016f2 <HAL_GPIO_Init+0x226>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a51      	ldr	r2, [pc, #324]	; (80017e4 <HAL_GPIO_Init+0x318>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d025      	beq.n	80016ee <HAL_GPIO_Init+0x222>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a50      	ldr	r2, [pc, #320]	; (80017e8 <HAL_GPIO_Init+0x31c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d01f      	beq.n	80016ea <HAL_GPIO_Init+0x21e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4f      	ldr	r2, [pc, #316]	; (80017ec <HAL_GPIO_Init+0x320>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d019      	beq.n	80016e6 <HAL_GPIO_Init+0x21a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4e      	ldr	r2, [pc, #312]	; (80017f0 <HAL_GPIO_Init+0x324>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d013      	beq.n	80016e2 <HAL_GPIO_Init+0x216>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4d      	ldr	r2, [pc, #308]	; (80017f4 <HAL_GPIO_Init+0x328>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00d      	beq.n	80016de <HAL_GPIO_Init+0x212>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4c      	ldr	r2, [pc, #304]	; (80017f8 <HAL_GPIO_Init+0x32c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d007      	beq.n	80016da <HAL_GPIO_Init+0x20e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4b      	ldr	r2, [pc, #300]	; (80017fc <HAL_GPIO_Init+0x330>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d101      	bne.n	80016d6 <HAL_GPIO_Init+0x20a>
 80016d2:	2307      	movs	r3, #7
 80016d4:	e00e      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016d6:	2308      	movs	r3, #8
 80016d8:	e00c      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016da:	2306      	movs	r3, #6
 80016dc:	e00a      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016de:	2305      	movs	r3, #5
 80016e0:	e008      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016e2:	2304      	movs	r3, #4
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016e6:	2303      	movs	r3, #3
 80016e8:	e004      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e002      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_GPIO_Init+0x228>
 80016f2:	2300      	movs	r3, #0
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	f002 0203 	and.w	r2, r2, #3
 80016fa:	0092      	lsls	r2, r2, #2
 80016fc:	4093      	lsls	r3, r2
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001704:	4935      	ldr	r1, [pc, #212]	; (80017dc <HAL_GPIO_Init+0x310>)
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001712:	4b3b      	ldr	r3, [pc, #236]	; (8001800 <HAL_GPIO_Init+0x334>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001736:	4a32      	ldr	r2, [pc, #200]	; (8001800 <HAL_GPIO_Init+0x334>)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800173c:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HAL_GPIO_Init+0x334>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001760:	4a27      	ldr	r2, [pc, #156]	; (8001800 <HAL_GPIO_Init+0x334>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001766:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_GPIO_Init+0x334>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800178a:	4a1d      	ldr	r2, [pc, #116]	; (8001800 <HAL_GPIO_Init+0x334>)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_GPIO_Init+0x334>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017b4:	4a12      	ldr	r2, [pc, #72]	; (8001800 <HAL_GPIO_Init+0x334>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3301      	adds	r3, #1
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	2b0f      	cmp	r3, #15
 80017c4:	f67f ae90 	bls.w	80014e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40013800 	.word	0x40013800
 80017e0:	40020000 	.word	0x40020000
 80017e4:	40020400 	.word	0x40020400
 80017e8:	40020800 	.word	0x40020800
 80017ec:	40020c00 	.word	0x40020c00
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40021400 	.word	0x40021400
 80017f8:	40021800 	.word	0x40021800
 80017fc:	40021c00 	.word	0x40021c00
 8001800:	40013c00 	.word	0x40013c00

08001804 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691a      	ldr	r2, [r3, #16]
 8001814:	887b      	ldrh	r3, [r7, #2]
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d002      	beq.n	8001822 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800181c:	2301      	movs	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
 8001820:	e001      	b.n	8001826 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001826:	7bfb      	ldrb	r3, [r7, #15]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	807b      	strh	r3, [r7, #2]
 8001840:	4613      	mov	r3, r2
 8001842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001844:	787b      	ldrb	r3, [r7, #1]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001850:	e003      	b.n	800185a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001852:	887b      	ldrh	r3, [r7, #2]
 8001854:	041a      	lsls	r2, r3, #16
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	619a      	str	r2, [r3, #24]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	4013      	ands	r3, r2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d006      	beq.n	800188c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800187e:	4a05      	ldr	r2, [pc, #20]	; (8001894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f9ac 	bl	8000be4 <HAL_GPIO_EXTI_Callback>
  }
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40013c00 	.word	0x40013c00

08001898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e12b      	b.n	8001b02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fa54 	bl	8000d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2224      	movs	r2, #36	; 0x24
 80018c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018fc:	f002 fa26 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 8001900:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4a81      	ldr	r2, [pc, #516]	; (8001b0c <HAL_I2C_Init+0x274>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d807      	bhi.n	800191c <HAL_I2C_Init+0x84>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4a80      	ldr	r2, [pc, #512]	; (8001b10 <HAL_I2C_Init+0x278>)
 8001910:	4293      	cmp	r3, r2
 8001912:	bf94      	ite	ls
 8001914:	2301      	movls	r3, #1
 8001916:	2300      	movhi	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	e006      	b.n	800192a <HAL_I2C_Init+0x92>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4a7d      	ldr	r2, [pc, #500]	; (8001b14 <HAL_I2C_Init+0x27c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	bf94      	ite	ls
 8001924:	2301      	movls	r3, #1
 8001926:	2300      	movhi	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0e7      	b.n	8001b02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4a78      	ldr	r2, [pc, #480]	; (8001b18 <HAL_I2C_Init+0x280>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	0c9b      	lsrs	r3, r3, #18
 800193c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a6a      	ldr	r2, [pc, #424]	; (8001b0c <HAL_I2C_Init+0x274>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d802      	bhi.n	800196c <HAL_I2C_Init+0xd4>
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	3301      	adds	r3, #1
 800196a:	e009      	b.n	8001980 <HAL_I2C_Init+0xe8>
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	4a69      	ldr	r2, [pc, #420]	; (8001b1c <HAL_I2C_Init+0x284>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	099b      	lsrs	r3, r3, #6
 800197e:	3301      	adds	r3, #1
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	430b      	orrs	r3, r1
 8001986:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001992:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	495c      	ldr	r1, [pc, #368]	; (8001b0c <HAL_I2C_Init+0x274>)
 800199c:	428b      	cmp	r3, r1
 800199e:	d819      	bhi.n	80019d4 <HAL_I2C_Init+0x13c>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1e59      	subs	r1, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ae:	1c59      	adds	r1, r3, #1
 80019b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019b4:	400b      	ands	r3, r1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00a      	beq.n	80019d0 <HAL_I2C_Init+0x138>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1e59      	subs	r1, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80019c8:	3301      	adds	r3, #1
 80019ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ce:	e051      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 80019d0:	2304      	movs	r3, #4
 80019d2:	e04f      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d111      	bne.n	8001a00 <HAL_I2C_Init+0x168>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1e58      	subs	r0, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6859      	ldr	r1, [r3, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	440b      	add	r3, r1
 80019ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	e012      	b.n	8001a26 <HAL_I2C_Init+0x18e>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1e58      	subs	r0, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6859      	ldr	r1, [r3, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	0099      	lsls	r1, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a16:	3301      	adds	r3, #1
 8001a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bf0c      	ite	eq
 8001a20:	2301      	moveq	r3, #1
 8001a22:	2300      	movne	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_Init+0x196>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e022      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10e      	bne.n	8001a54 <HAL_I2C_Init+0x1bc>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1e58      	subs	r0, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6859      	ldr	r1, [r3, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	440b      	add	r3, r1
 8001a44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a52:	e00f      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1e58      	subs	r0, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	0099      	lsls	r1, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	6809      	ldr	r1, [r1, #0]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69da      	ldr	r2, [r3, #28]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001aa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6911      	ldr	r1, [r2, #16]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68d2      	ldr	r2, [r2, #12]
 8001aae:	4311      	orrs	r1, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2220      	movs	r2, #32
 8001aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	000186a0 	.word	0x000186a0
 8001b10:	001e847f 	.word	0x001e847f
 8001b14:	003d08ff 	.word	0x003d08ff
 8001b18:	431bde83 	.word	0x431bde83
 8001b1c:	10624dd3 	.word	0x10624dd3

08001b20 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e128      	b.n	8001d84 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d109      	bne.n	8001b52 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a90      	ldr	r2, [pc, #576]	; (8001d8c <HAL_I2S_Init+0x26c>)
 8001b4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff f955 	bl	8000dfc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2202      	movs	r2, #2
 8001b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b68:	f023 030f 	bic.w	r3, r3, #15
 8001b6c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2202      	movs	r2, #2
 8001b74:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d060      	beq.n	8001c40 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d102      	bne.n	8001b8c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001b86:	2310      	movs	r3, #16
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e001      	b.n	8001b90 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001b8c:	2320      	movs	r3, #32
 8001b8e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b20      	cmp	r3, #32
 8001b96:	d802      	bhi.n	8001b9e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f002 f9ca 	bl	8003f38 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ba4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bae:	d125      	bne.n	8001bfc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d010      	beq.n	8001bda <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	461a      	mov	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd4:	3305      	adds	r3, #5
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	e01f      	b.n	8001c1a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	461a      	mov	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	3305      	adds	r3, #5
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	e00e      	b.n	8001c1a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	3305      	adds	r3, #5
 8001c18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4a5c      	ldr	r2, [pc, #368]	; (8001d90 <HAL_I2S_Init+0x270>)
 8001c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c22:	08db      	lsrs	r3, r3, #3
 8001c24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	021b      	lsls	r3, r3, #8
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	e003      	b.n	8001c48 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001c40:	2302      	movs	r3, #2
 8001c42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d902      	bls.n	8001c54 <HAL_I2S_Init+0x134>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	2bff      	cmp	r3, #255	; 0xff
 8001c52:	d907      	bls.n	8001c64 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	f043 0210 	orr.w	r2, r3, #16
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e08f      	b.n	8001d84 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	ea42 0103 	orr.w	r1, r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001c82:	f023 030f 	bic.w	r3, r3, #15
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6851      	ldr	r1, [r2, #4]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6892      	ldr	r2, [r2, #8]
 8001c8e:	4311      	orrs	r1, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	68d2      	ldr	r2, [r2, #12]
 8001c94:	4311      	orrs	r1, r2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6992      	ldr	r2, [r2, #24]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ca6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d161      	bne.n	8001d74 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a38      	ldr	r2, [pc, #224]	; (8001d94 <HAL_I2S_Init+0x274>)
 8001cb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a37      	ldr	r2, [pc, #220]	; (8001d98 <HAL_I2S_Init+0x278>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d101      	bne.n	8001cc4 <HAL_I2S_Init+0x1a4>
 8001cc0:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_I2S_Init+0x27c>)
 8001cc2:	e001      	b.n	8001cc8 <HAL_I2S_Init+0x1a8>
 8001cc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	4932      	ldr	r1, [pc, #200]	; (8001d98 <HAL_I2S_Init+0x278>)
 8001cd0:	428a      	cmp	r2, r1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_I2S_Init+0x1b8>
 8001cd4:	4a31      	ldr	r2, [pc, #196]	; (8001d9c <HAL_I2S_Init+0x27c>)
 8001cd6:	e001      	b.n	8001cdc <HAL_I2S_Init+0x1bc>
 8001cd8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001cdc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ce0:	f023 030f 	bic.w	r3, r3, #15
 8001ce4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a2b      	ldr	r2, [pc, #172]	; (8001d98 <HAL_I2S_Init+0x278>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d101      	bne.n	8001cf4 <HAL_I2S_Init+0x1d4>
 8001cf0:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <HAL_I2S_Init+0x27c>)
 8001cf2:	e001      	b.n	8001cf8 <HAL_I2S_Init+0x1d8>
 8001cf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a25      	ldr	r2, [pc, #148]	; (8001d98 <HAL_I2S_Init+0x278>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d101      	bne.n	8001d0a <HAL_I2S_Init+0x1ea>
 8001d06:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <HAL_I2S_Init+0x27c>)
 8001d08:	e001      	b.n	8001d0e <HAL_I2S_Init+0x1ee>
 8001d0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d1a:	d003      	beq.n	8001d24 <HAL_I2S_Init+0x204>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d103      	bne.n	8001d2c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	e001      	b.n	8001d30 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	897b      	ldrh	r3, [r7, #10]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d5c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <HAL_I2S_Init+0x278>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d101      	bne.n	8001d6c <HAL_I2S_Init+0x24c>
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_I2S_Init+0x27c>)
 8001d6a:	e001      	b.n	8001d70 <HAL_I2S_Init+0x250>
 8001d6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d70:	897a      	ldrh	r2, [r7, #10]
 8001d72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3720      	adds	r7, #32
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	08001e97 	.word	0x08001e97
 8001d90:	cccccccd 	.word	0xcccccccd
 8001d94:	08001fad 	.word	0x08001fad
 8001d98:	40003800 	.word	0x40003800
 8001d9c:	40003400 	.word	0x40003400

08001da0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	881a      	ldrh	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	1c9a      	adds	r2, r3, #2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10e      	bne.n	8001e30 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e20:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffb8 	bl	8001da0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4a:	b292      	uxth	r2, r2
 8001e4c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	1c9a      	adds	r2, r3, #2
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10e      	bne.n	8001e8e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e7e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff93 	bl	8001db4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d13a      	bne.n	8001f28 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d109      	bne.n	8001ed0 <I2S_IRQHandler+0x3a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec6:	2b40      	cmp	r3, #64	; 0x40
 8001ec8:	d102      	bne.n	8001ed0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ffb4 	bl	8001e38 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed6:	2b40      	cmp	r3, #64	; 0x40
 8001ed8:	d126      	bne.n	8001f28 <I2S_IRQHandler+0x92>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b20      	cmp	r3, #32
 8001ee6:	d11f      	bne.n	8001f28 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ef6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f043 0202 	orr.w	r2, r3, #2
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ff50 	bl	8001dc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d136      	bne.n	8001fa2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d109      	bne.n	8001f52 <I2S_IRQHandler+0xbc>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f48:	2b80      	cmp	r3, #128	; 0x80
 8001f4a:	d102      	bne.n	8001f52 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ff45 	bl	8001ddc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d122      	bne.n	8001fa2 <I2S_IRQHandler+0x10c>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b20      	cmp	r3, #32
 8001f68:	d11b      	bne.n	8001fa2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f78:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f94:	f043 0204 	orr.w	r2, r3, #4
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff13 	bl	8001dc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a92      	ldr	r2, [pc, #584]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001fc6:	4b92      	ldr	r3, [pc, #584]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fc8:	e001      	b.n	8001fce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001fca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a8b      	ldr	r2, [pc, #556]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d101      	bne.n	8001fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001fe4:	4b8a      	ldr	r3, [pc, #552]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fe6:	e001      	b.n	8001fec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001fe8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff8:	d004      	beq.n	8002004 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 8099 	bne.w	8002136 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b02      	cmp	r3, #2
 800200c:	d107      	bne.n	800201e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f925 	bl	8002268 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b01      	cmp	r3, #1
 8002026:	d107      	bne.n	8002038 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f9c8 	bl	80023c8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	2b40      	cmp	r3, #64	; 0x40
 8002040:	d13a      	bne.n	80020b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f003 0320 	and.w	r3, r3, #32
 8002048:	2b00      	cmp	r3, #0
 800204a:	d035      	beq.n	80020b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a6e      	ldr	r2, [pc, #440]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d101      	bne.n	800205a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002056:	4b6e      	ldr	r3, [pc, #440]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002058:	e001      	b.n	800205e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800205a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4969      	ldr	r1, [pc, #420]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002066:	428b      	cmp	r3, r1
 8002068:	d101      	bne.n	800206e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800206a:	4b69      	ldr	r3, [pc, #420]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800206c:	e001      	b.n	8002072 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800206e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002072:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002076:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002086:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f043 0202 	orr.w	r2, r3, #2
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fe88 	bl	8001dc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b08      	cmp	r3, #8
 80020c0:	f040 80c3 	bne.w	800224a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 80bd 	beq.w	800224a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a49      	ldr	r2, [pc, #292]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80020ea:	4b49      	ldr	r3, [pc, #292]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020ec:	e001      	b.n	80020f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80020ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4944      	ldr	r1, [pc, #272]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020fa:	428b      	cmp	r3, r1
 80020fc:	d101      	bne.n	8002102 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80020fe:	4b44      	ldr	r3, [pc, #272]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002100:	e001      	b.n	8002106 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002102:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002106:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800210a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f043 0204 	orr.w	r2, r3, #4
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff fe4a 	bl	8001dc8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002134:	e089      	b.n	800224a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b02      	cmp	r3, #2
 800213e:	d107      	bne.n	8002150 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f8be 	bl	80022cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d107      	bne.n	800216a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f8fd 	bl	8002364 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002170:	2b40      	cmp	r3, #64	; 0x40
 8002172:	d12f      	bne.n	80021d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	2b00      	cmp	r3, #0
 800217c:	d02a      	beq.n	80021d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800218c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1e      	ldr	r2, [pc, #120]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d101      	bne.n	800219c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002198:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800219a:	e001      	b.n	80021a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800219c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4919      	ldr	r1, [pc, #100]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021a8:	428b      	cmp	r3, r1
 80021aa:	d101      	bne.n	80021b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021ae:	e001      	b.n	80021b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80021b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f043 0202 	orr.w	r2, r3, #2
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff fdfa 	bl	8001dc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d136      	bne.n	800224c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	f003 0320 	and.w	r3, r3, #32
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d031      	beq.n	800224c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a07      	ldr	r2, [pc, #28]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d101      	bne.n	80021f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021f4:	e001      	b.n	80021fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80021f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4902      	ldr	r1, [pc, #8]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002202:	428b      	cmp	r3, r1
 8002204:	d106      	bne.n	8002214 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002206:	4b02      	ldr	r3, [pc, #8]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002208:	e006      	b.n	8002218 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800220a:	bf00      	nop
 800220c:	40003800 	.word	0x40003800
 8002210:	40003400 	.word	0x40003400
 8002214:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002218:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800221c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800222c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f043 0204 	orr.w	r2, r3, #4
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff fdc0 	bl	8001dc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002248:	e000      	b.n	800224c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800224a:	bf00      	nop
}
 800224c:	bf00      	nop
 800224e:	3720      	adds	r7, #32
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	1c99      	adds	r1, r3, #2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6251      	str	r1, [r2, #36]	; 0x24
 800227a:	881a      	ldrh	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d113      	bne.n	80022c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d106      	bne.n	80022c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ffc9 	bl	8002254 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	1c99      	adds	r1, r3, #2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6251      	str	r1, [r2, #36]	; 0x24
 80022de:	8819      	ldrh	r1, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a1d      	ldr	r2, [pc, #116]	; (800235c <I2SEx_TxISR_I2SExt+0x90>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <I2SEx_TxISR_I2SExt+0x22>
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <I2SEx_TxISR_I2SExt+0x94>)
 80022ec:	e001      	b.n	80022f2 <I2SEx_TxISR_I2SExt+0x26>
 80022ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022f2:	460a      	mov	r2, r1
 80022f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d121      	bne.n	8002352 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a12      	ldr	r2, [pc, #72]	; (800235c <I2SEx_TxISR_I2SExt+0x90>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d101      	bne.n	800231c <I2SEx_TxISR_I2SExt+0x50>
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <I2SEx_TxISR_I2SExt+0x94>)
 800231a:	e001      	b.n	8002320 <I2SEx_TxISR_I2SExt+0x54>
 800231c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	490d      	ldr	r1, [pc, #52]	; (800235c <I2SEx_TxISR_I2SExt+0x90>)
 8002328:	428b      	cmp	r3, r1
 800232a:	d101      	bne.n	8002330 <I2SEx_TxISR_I2SExt+0x64>
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <I2SEx_TxISR_I2SExt+0x94>)
 800232e:	e001      	b.n	8002334 <I2SEx_TxISR_I2SExt+0x68>
 8002330:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002334:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002338:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800233e:	b29b      	uxth	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d106      	bne.n	8002352 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ff81 	bl	8002254 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40003800 	.word	0x40003800
 8002360:	40003400 	.word	0x40003400

08002364 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68d8      	ldr	r0, [r3, #12]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	1c99      	adds	r1, r3, #2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800237c:	b282      	uxth	r2, r0
 800237e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002384:	b29b      	uxth	r3, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d113      	bne.n	80023c0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023a6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ff4a 	bl	8002254 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a20      	ldr	r2, [pc, #128]	; (8002458 <I2SEx_RxISR_I2SExt+0x90>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d101      	bne.n	80023de <I2SEx_RxISR_I2SExt+0x16>
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <I2SEx_RxISR_I2SExt+0x94>)
 80023dc:	e001      	b.n	80023e2 <I2SEx_RxISR_I2SExt+0x1a>
 80023de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023e2:	68d8      	ldr	r0, [r3, #12]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	1c99      	adds	r1, r3, #2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	62d1      	str	r1, [r2, #44]	; 0x2c
 80023ee:	b282      	uxth	r2, r0
 80023f0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d121      	bne.n	800244e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a12      	ldr	r2, [pc, #72]	; (8002458 <I2SEx_RxISR_I2SExt+0x90>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d101      	bne.n	8002418 <I2SEx_RxISR_I2SExt+0x50>
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <I2SEx_RxISR_I2SExt+0x94>)
 8002416:	e001      	b.n	800241c <I2SEx_RxISR_I2SExt+0x54>
 8002418:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	490d      	ldr	r1, [pc, #52]	; (8002458 <I2SEx_RxISR_I2SExt+0x90>)
 8002424:	428b      	cmp	r3, r1
 8002426:	d101      	bne.n	800242c <I2SEx_RxISR_I2SExt+0x64>
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <I2SEx_RxISR_I2SExt+0x94>)
 800242a:	e001      	b.n	8002430 <I2SEx_RxISR_I2SExt+0x68>
 800242c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002430:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002434:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d106      	bne.n	800244e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff ff03 	bl	8002254 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40003800 	.word	0x40003800
 800245c:	40003400 	.word	0x40003400

08002460 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002462:	b08f      	sub	sp, #60	; 0x3c
 8002464:	af0a      	add	r7, sp, #40	; 0x28
 8002466:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e10f      	b.n	8002692 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d106      	bne.n	8002492 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f005 ffe5 	bl	800845c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2203      	movs	r2, #3
 8002496:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d102      	bne.n	80024ac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f002 fac4 	bl	8004a3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	687e      	ldr	r6, [r7, #4]
 80024be:	466d      	mov	r5, sp
 80024c0:	f106 0410 	add.w	r4, r6, #16
 80024c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80024d4:	1d33      	adds	r3, r6, #4
 80024d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024d8:	6838      	ldr	r0, [r7, #0]
 80024da:	f002 f99b 	bl	8004814 <USB_CoreInit>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0d0      	b.n	8002692 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2100      	movs	r1, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f002 fab2 	bl	8004a60 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	e04a      	b.n	8002598 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002502:	7bfa      	ldrb	r2, [r7, #15]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	333d      	adds	r3, #61	; 0x3d
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	333c      	adds	r3, #60	; 0x3c
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	b298      	uxth	r0, r3
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	3344      	adds	r3, #68	; 0x44
 800253e:	4602      	mov	r2, r0
 8002540:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002542:	7bfa      	ldrb	r2, [r7, #15]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	3340      	adds	r3, #64	; 0x40
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002556:	7bfa      	ldrb	r2, [r7, #15]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	3348      	adds	r3, #72	; 0x48
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	334c      	adds	r3, #76	; 0x4c
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	3354      	adds	r3, #84	; 0x54
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	3301      	adds	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d3af      	bcc.n	8002502 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	e044      	b.n	8002632 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80025d0:	7bfa      	ldrb	r2, [r7, #15]
 80025d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002600:	7bfa      	ldrb	r2, [r7, #15]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	3301      	adds	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	d3b5      	bcc.n	80025a8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	603b      	str	r3, [r7, #0]
 8002642:	687e      	ldr	r6, [r7, #4]
 8002644:	466d      	mov	r5, sp
 8002646:	f106 0410 	add.w	r4, r6, #16
 800264a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800264c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800264e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002652:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002656:	e885 0003 	stmia.w	r5, {r0, r1}
 800265a:	1d33      	adds	r3, r6, #4
 800265c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800265e:	6838      	ldr	r0, [r7, #0]
 8002660:	f002 fa4a 	bl	8004af8 <USB_DevInit>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2202      	movs	r2, #2
 800266e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e00d      	b.n	8002692 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f003 fb99 	bl	8005dc2 <USB_DevDisconnect>

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800269a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_PCD_Start+0x1c>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e020      	b.n	80026f8 <HAL_PCD_Start+0x5e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d109      	bne.n	80026da <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d005      	beq.n	80026da <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f002 f99c 	bl	8004a1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f003 fb49 	bl	8005d80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b08d      	sub	sp, #52	; 0x34
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f003 fc07 	bl	8005f2a <USB_GetMode>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	f040 848a 	bne.w	8003038 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f003 fb6b 	bl	8005e04 <USB_ReadInterrupts>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8480 	beq.w	8003036 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f003 fb58 	bl	8005e04 <USB_ReadInterrupts>
 8002754:	4603      	mov	r3, r0
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b02      	cmp	r3, #2
 800275c:	d107      	bne.n	800276e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f002 0202 	and.w	r2, r2, #2
 800276c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f003 fb46 	bl	8005e04 <USB_ReadInterrupts>
 8002778:	4603      	mov	r3, r0
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b10      	cmp	r3, #16
 8002780:	d161      	bne.n	8002846 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699a      	ldr	r2, [r3, #24]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0210 	bic.w	r2, r2, #16
 8002790:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f003 020f 	and.w	r2, r3, #15
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	3304      	adds	r3, #4
 80027b0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	0c5b      	lsrs	r3, r3, #17
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d124      	bne.n	8002808 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d035      	beq.n	8002836 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027d8:	b29b      	uxth	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	6a38      	ldr	r0, [r7, #32]
 80027de:	f003 f97d 	bl	8005adc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ee:	441a      	add	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	6a1a      	ldr	r2, [r3, #32]
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002800:	441a      	add	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	621a      	str	r2, [r3, #32]
 8002806:	e016      	b.n	8002836 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	0c5b      	lsrs	r3, r3, #17
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	2b06      	cmp	r3, #6
 8002812:	d110      	bne.n	8002836 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800281a:	2208      	movs	r2, #8
 800281c:	4619      	mov	r1, r3
 800281e:	6a38      	ldr	r0, [r7, #32]
 8002820:	f003 f95c 	bl	8005adc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	6a1a      	ldr	r2, [r3, #32]
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002830:	441a      	add	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699a      	ldr	r2, [r3, #24]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0210 	orr.w	r2, r2, #16
 8002844:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f003 fada 	bl	8005e04 <USB_ReadInterrupts>
 8002850:	4603      	mov	r3, r0
 8002852:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002856:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800285a:	f040 80a7 	bne.w	80029ac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f003 fadf 	bl	8005e2a <USB_ReadDevAllOutEpInterrupt>
 800286c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800286e:	e099      	b.n	80029a4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 808e 	beq.w	8002998 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f003 fb03 	bl	8005e92 <USB_ReadDevOutEPInterrupt>
 800288c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00c      	beq.n	80028b2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a4:	461a      	mov	r2, r3
 80028a6:	2301      	movs	r3, #1
 80028a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 fec3 	bl	8003638 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00c      	beq.n	80028d6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c8:	461a      	mov	r2, r3
 80028ca:	2308      	movs	r3, #8
 80028cc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 ff99 	bl	8003808 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ec:	461a      	mov	r2, r3
 80028ee:	2310      	movs	r3, #16
 80028f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d030      	beq.n	800295e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002904:	2b80      	cmp	r3, #128	; 0x80
 8002906:	d109      	bne.n	800291c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800291a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800291c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	3304      	adds	r3, #4
 8002930:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	78db      	ldrb	r3, [r3, #3]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d108      	bne.n	800294c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2200      	movs	r2, #0
 800293e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	b2db      	uxtb	r3, r3
 8002944:	4619      	mov	r1, r3
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f005 fe9c 	bl	8008684 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	4413      	add	r3, r2
 8002954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002958:	461a      	mov	r2, r3
 800295a:	2302      	movs	r3, #2
 800295c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	4413      	add	r3, r2
 8002970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002974:	461a      	mov	r2, r3
 8002976:	2320      	movs	r3, #32
 8002978:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d009      	beq.n	8002998 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	4413      	add	r3, r2
 800298c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002990:	461a      	mov	r2, r3
 8002992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002996:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	3301      	adds	r3, #1
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f47f af62 	bne.w	8002870 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f003 fa27 	bl	8005e04 <USB_ReadInterrupts>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029c0:	f040 80db 	bne.w	8002b7a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f003 fa48 	bl	8005e5e <USB_ReadDevAllInEpInterrupt>
 80029ce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80029d4:	e0cd      	b.n	8002b72 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80c2 	beq.w	8002b66 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f003 fa6e 	bl	8005ece <USB_ReadDevInEPInterrupt>
 80029f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d057      	beq.n	8002aae <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	2201      	movs	r2, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69f9      	ldr	r1, [r7, #28]
 8002a1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a1e:	4013      	ands	r3, r2
 8002a20:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a2e:	461a      	mov	r2, r3
 8002a30:	2301      	movs	r3, #1
 8002a32:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d132      	bne.n	8002aa2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	334c      	adds	r3, #76	; 0x4c
 8002a4c:	6819      	ldr	r1, [r3, #0]
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4403      	add	r3, r0
 8002a5c:	3348      	adds	r3, #72	; 0x48
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4419      	add	r1, r3
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4403      	add	r3, r0
 8002a70:	334c      	adds	r3, #76	; 0x4c
 8002a72:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d113      	bne.n	8002aa2 <HAL_PCD_IRQHandler+0x3a2>
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	3354      	adds	r3, #84	; 0x54
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d108      	bne.n	8002aa2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	f003 fa75 	bl	8005f8c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f005 fd66 	bl	800857a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	2308      	movs	r3, #8
 8002ac8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2310      	movs	r3, #16
 8002ae4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002afc:	461a      	mov	r2, r3
 8002afe:	2340      	movs	r3, #64	; 0x40
 8002b00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d023      	beq.n	8002b54 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b0e:	6a38      	ldr	r0, [r7, #32]
 8002b10:	f002 f956 	bl	8004dc0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	3338      	adds	r3, #56	; 0x38
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	4413      	add	r3, r2
 8002b24:	3304      	adds	r3, #4
 8002b26:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	78db      	ldrb	r3, [r3, #3]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d108      	bne.n	8002b42 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2200      	movs	r2, #0
 8002b34:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f005 fdb3 	bl	80086a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2302      	movs	r3, #2
 8002b52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fcdb 	bl	800351c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	3301      	adds	r3, #1
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f47f af2e 	bne.w	80029d6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f003 f940 	bl	8005e04 <USB_ReadInterrupts>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b8e:	d122      	bne.n	8002bd6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d108      	bne.n	8002bc0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fec3 	bl	8003944 <HAL_PCDEx_LPM_Callback>
 8002bbe:	e002      	b.n	8002bc6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f005 fd51 	bl	8008668 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002bd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f003 f912 	bl	8005e04 <USB_ReadInterrupts>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bea:	d112      	bne.n	8002c12 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d102      	bne.n	8002c02 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f005 fd0d 	bl	800861c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c10:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f003 f8f4 	bl	8005e04 <USB_ReadInterrupts>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c26:	f040 80b7 	bne.w	8002d98 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2110      	movs	r1, #16
 8002c44:	4618      	mov	r0, r3
 8002c46:	f002 f8bb 	bl	8004dc0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c4e:	e046      	b.n	8002cde <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c62:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c74:	0151      	lsls	r1, r2, #5
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	440a      	add	r2, r1
 8002c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c90:	461a      	mov	r2, r3
 8002c92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c96:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca8:	0151      	lsls	r1, r2, #5
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	440a      	add	r2, r1
 8002cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cb6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc8:	0151      	lsls	r1, r2, #5
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	440a      	add	r2, r1
 8002cce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002cd6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	3301      	adds	r3, #1
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d3b3      	bcc.n	8002c50 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002cfa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d016      	beq.n	8002d32 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d14:	f043 030b 	orr.w	r3, r3, #11
 8002d18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d2a:	f043 030b 	orr.w	r3, r3, #11
 8002d2e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d30:	e015      	b.n	8002d5e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d44:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d48:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d58:	f043 030b 	orr.w	r3, r3, #11
 8002d5c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d6c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d70:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d82:	461a      	mov	r2, r3
 8002d84:	f003 f902 	bl	8005f8c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f003 f831 	bl	8005e04 <USB_ReadInterrupts>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dac:	d124      	bne.n	8002df8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f003 f8c7 	bl	8005f46 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f002 f87c 	bl	8004eba <USB_GetDevSpeed>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681c      	ldr	r4, [r3, #0]
 8002dce:	f000 ffb1 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8002dd2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f001 fd7b 	bl	80048d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f005 fbf1 	bl	80085ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f003 f801 	bl	8005e04 <USB_ReadInterrupts>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d10a      	bne.n	8002e22 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f005 fbce 	bl	80085ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f002 0208 	and.w	r2, r2, #8
 8002e20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f002 ffec 	bl	8005e04 <USB_ReadInterrupts>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e32:	2b80      	cmp	r3, #128	; 0x80
 8002e34:	d122      	bne.n	8002e7c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e42:	2301      	movs	r3, #1
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
 8002e46:	e014      	b.n	8002e72 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	4619      	mov	r1, r3
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fb27 	bl	80034ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	3301      	adds	r3, #1
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d3e5      	bcc.n	8002e48 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f002 ffbf 	bl	8005e04 <USB_ReadInterrupts>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e90:	d13b      	bne.n	8002f0a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e92:	2301      	movs	r3, #1
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
 8002e96:	e02b      	b.n	8002ef0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3340      	adds	r3, #64	; 0x40
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d115      	bne.n	8002eea <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ebe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	da12      	bge.n	8002eea <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec8:	4613      	mov	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	333f      	adds	r3, #63	; 0x3f
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fae8 	bl	80034ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	3301      	adds	r3, #1
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d3ce      	bcc.n	8002e98 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695a      	ldr	r2, [r3, #20]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f002 ff78 	bl	8005e04 <USB_ReadInterrupts>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f1e:	d155      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f20:	2301      	movs	r3, #1
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
 8002f24:	e045      	b.n	8002fb2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d12e      	bne.n	8002fac <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f4e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	da2b      	bge.n	8002fac <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002f60:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d121      	bne.n	8002fac <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10a      	bne.n	8002fac <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa8:	6053      	str	r3, [r2, #4]
            break;
 8002faa:	e007      	b.n	8002fbc <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	3301      	adds	r3, #1
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d3b4      	bcc.n	8002f26 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f002 ff17 	bl	8005e04 <USB_ReadInterrupts>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe0:	d10a      	bne.n	8002ff8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f005 fb72 	bl	80086cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ff6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f002 ff01 	bl	8005e04 <USB_ReadInterrupts>
 8003002:	4603      	mov	r3, r0
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b04      	cmp	r3, #4
 800300a:	d115      	bne.n	8003038 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f005 fb62 	bl	80086e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	430a      	orrs	r2, r1
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	e000      	b.n	8003038 <HAL_PCD_IRQHandler+0x938>
      return;
 8003036:	bf00      	nop
    }
  }
}
 8003038:	3734      	adds	r7, #52	; 0x34
 800303a:	46bd      	mov	sp, r7
 800303c:	bd90      	pop	{r4, r7, pc}

0800303e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_PCD_SetAddress+0x1a>
 8003054:	2302      	movs	r3, #2
 8003056:	e013      	b.n	8003080 <HAL_PCD_SetAddress+0x42>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f002 fe5f 	bl	8005d34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	4608      	mov	r0, r1
 8003092:	4611      	mov	r1, r2
 8003094:	461a      	mov	r2, r3
 8003096:	4603      	mov	r3, r0
 8003098:	70fb      	strb	r3, [r7, #3]
 800309a:	460b      	mov	r3, r1
 800309c:	803b      	strh	r3, [r7, #0]
 800309e:	4613      	mov	r3, r2
 80030a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	da0f      	bge.n	80030ce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	f003 020f 	and.w	r2, r3, #15
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	3338      	adds	r3, #56	; 0x38
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	3304      	adds	r3, #4
 80030c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	705a      	strb	r2, [r3, #1]
 80030cc:	e00f      	b.n	80030ee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	f003 020f 	and.w	r2, r3, #15
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	4413      	add	r3, r2
 80030e4:	3304      	adds	r3, #4
 80030e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030fa:	883a      	ldrh	r2, [r7, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	78ba      	ldrb	r2, [r7, #2]
 8003104:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	785b      	ldrb	r3, [r3, #1]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d004      	beq.n	8003118 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003118:	78bb      	ldrb	r3, [r7, #2]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d102      	bne.n	8003124 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_PCD_EP_Open+0xaa>
 800312e:	2302      	movs	r3, #2
 8003130:	e00e      	b.n	8003150 <HAL_PCD_EP_Open+0xc8>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68f9      	ldr	r1, [r7, #12]
 8003140:	4618      	mov	r0, r3
 8003142:	f001 fedf 	bl	8004f04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800314e:	7afb      	ldrb	r3, [r7, #11]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003168:	2b00      	cmp	r3, #0
 800316a:	da0f      	bge.n	800318c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	f003 020f 	and.w	r2, r3, #15
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	3338      	adds	r3, #56	; 0x38
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	3304      	adds	r3, #4
 8003182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	705a      	strb	r2, [r3, #1]
 800318a:	e00f      	b.n	80031ac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	f003 020f 	and.w	r2, r3, #15
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	3304      	adds	r3, #4
 80031a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_PCD_EP_Close+0x6e>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e00e      	b.n	80031e4 <HAL_PCD_EP_Close+0x8c>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68f9      	ldr	r1, [r7, #12]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f001 ff1d 	bl	8005014 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	460b      	mov	r3, r1
 80031fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031fc:	7afb      	ldrb	r3, [r7, #11]
 80031fe:	f003 020f 	and.w	r2, r3, #15
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4413      	add	r3, r2
 8003212:	3304      	adds	r3, #4
 8003214:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2200      	movs	r2, #0
 8003226:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2200      	movs	r2, #0
 800322c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800322e:	7afb      	ldrb	r3, [r7, #11]
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	b2da      	uxtb	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d102      	bne.n	8003248 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003248:	7afb      	ldrb	r3, [r7, #11]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	461a      	mov	r2, r3
 800325e:	6979      	ldr	r1, [r7, #20]
 8003260:	f002 f9fc 	bl	800565c <USB_EP0StartXfer>
 8003264:	e008      	b.n	8003278 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	b2db      	uxtb	r3, r3
 8003270:	461a      	mov	r2, r3
 8003272:	6979      	ldr	r1, [r7, #20]
 8003274:	f001 ffaa 	bl	80051cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	f003 020f 	and.w	r2, r3, #15
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80032a4:	681b      	ldr	r3, [r3, #0]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	460b      	mov	r3, r1
 80032c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c2:	7afb      	ldrb	r3, [r7, #11]
 80032c4:	f003 020f 	and.w	r2, r3, #15
 80032c8:	4613      	mov	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	3338      	adds	r3, #56	; 0x38
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4413      	add	r3, r2
 80032d6:	3304      	adds	r3, #4
 80032d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2200      	movs	r2, #0
 80032ea:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2201      	movs	r2, #1
 80032f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032f2:	7afb      	ldrb	r3, [r7, #11]
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d102      	bne.n	800330c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800330c:	7afb      	ldrb	r3, [r7, #11]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	b2db      	uxtb	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	6979      	ldr	r1, [r7, #20]
 8003324:	f002 f99a 	bl	800565c <USB_EP0StartXfer>
 8003328:	e008      	b.n	800333c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	461a      	mov	r2, r3
 8003336:	6979      	ldr	r1, [r7, #20]
 8003338:	f001 ff48 	bl	80051cc <USB_EPStartXfer>
  }

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	460b      	mov	r3, r1
 8003350:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	f003 020f 	and.w	r2, r3, #15
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	429a      	cmp	r2, r3
 800335e:	d901      	bls.n	8003364 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e050      	b.n	8003406 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003364:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003368:	2b00      	cmp	r3, #0
 800336a:	da0f      	bge.n	800338c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	f003 020f 	and.w	r2, r3, #15
 8003372:	4613      	mov	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	3338      	adds	r3, #56	; 0x38
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	4413      	add	r3, r2
 8003380:	3304      	adds	r3, #4
 8003382:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	705a      	strb	r2, [r3, #1]
 800338a:	e00d      	b.n	80033a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800338c:	78fa      	ldrb	r2, [r7, #3]
 800338e:	4613      	mov	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	3304      	adds	r3, #4
 80033a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ae:	78fb      	ldrb	r3, [r7, #3]
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_PCD_EP_SetStall+0x82>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e01e      	b.n	8003406 <HAL_PCD_EP_SetStall+0xc0>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68f9      	ldr	r1, [r7, #12]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f002 fbd8 	bl	8005b8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10a      	bne.n	80033fc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	b2d9      	uxtb	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033f6:	461a      	mov	r2, r3
 80033f8:	f002 fdc8 	bl	8005f8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	460b      	mov	r3, r1
 8003418:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800341a:	78fb      	ldrb	r3, [r7, #3]
 800341c:	f003 020f 	and.w	r2, r3, #15
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	429a      	cmp	r2, r3
 8003426:	d901      	bls.n	800342c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e042      	b.n	80034b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800342c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003430:	2b00      	cmp	r3, #0
 8003432:	da0f      	bge.n	8003454 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	f003 020f 	and.w	r2, r3, #15
 800343a:	4613      	mov	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	3338      	adds	r3, #56	; 0x38
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	4413      	add	r3, r2
 8003448:	3304      	adds	r3, #4
 800344a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	705a      	strb	r2, [r3, #1]
 8003452:	e00f      	b.n	8003474 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	f003 020f 	and.w	r2, r3, #15
 800345a:	4613      	mov	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	3304      	adds	r3, #4
 800346c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	b2da      	uxtb	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_PCD_EP_ClrStall+0x86>
 8003490:	2302      	movs	r3, #2
 8003492:	e00e      	b.n	80034b2 <HAL_PCD_EP_ClrStall+0xa4>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68f9      	ldr	r1, [r7, #12]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f002 fbe0 	bl	8005c68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	460b      	mov	r3, r1
 80034c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	da0c      	bge.n	80034e8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	f003 020f 	and.w	r2, r3, #15
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	3338      	adds	r3, #56	; 0x38
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	3304      	adds	r3, #4
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e00c      	b.n	8003502 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	f003 020f 	and.w	r2, r3, #15
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	3304      	adds	r3, #4
 8003500:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68f9      	ldr	r1, [r7, #12]
 8003508:	4618      	mov	r0, r3
 800350a:	f002 f9ff 	bl	800590c <USB_EPStopXfer>
 800350e:	4603      	mov	r3, r0
 8003510:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003512:	7afb      	ldrb	r3, [r7, #11]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	; 0x28
 8003520:	af02      	add	r7, sp, #8
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	3338      	adds	r3, #56	; 0x38
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	4413      	add	r3, r2
 8003540:	3304      	adds	r3, #4
 8003542:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a1a      	ldr	r2, [r3, #32]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	429a      	cmp	r2, r3
 800354e:	d901      	bls.n	8003554 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e06c      	b.n	800362e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	699a      	ldr	r2, [r3, #24]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	429a      	cmp	r2, r3
 8003568:	d902      	bls.n	8003570 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	3303      	adds	r3, #3
 8003574:	089b      	lsrs	r3, r3, #2
 8003576:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003578:	e02b      	b.n	80035d2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	429a      	cmp	r2, r3
 800358e:	d902      	bls.n	8003596 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	3303      	adds	r3, #3
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6919      	ldr	r1, [r3, #16]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	4603      	mov	r3, r0
 80035b4:	6978      	ldr	r0, [r7, #20]
 80035b6:	f002 fa53 	bl	8005a60 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	441a      	add	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a1a      	ldr	r2, [r3, #32]
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	441a      	add	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d809      	bhi.n	80035fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a1a      	ldr	r2, [r3, #32]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d203      	bcs.n	80035fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1be      	bne.n	800357a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	699a      	ldr	r2, [r3, #24]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	429a      	cmp	r2, r3
 8003606:	d811      	bhi.n	800362c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	2201      	movs	r2, #1
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	43db      	mvns	r3, r3
 8003622:	6939      	ldr	r1, [r7, #16]
 8003624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003628:	4013      	ands	r3, r2
 800362a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	333c      	adds	r3, #60	; 0x3c
 8003650:	3304      	adds	r3, #4
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	4413      	add	r3, r2
 800365e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d17b      	bne.n	8003766 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d015      	beq.n	80036a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	4a61      	ldr	r2, [pc, #388]	; (8003800 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	f240 80b9 	bls.w	80037f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 80b3 	beq.w	80037f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	4413      	add	r3, r2
 8003696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800369a:	461a      	mov	r2, r3
 800369c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036a0:	6093      	str	r3, [r2, #8]
 80036a2:	e0a7      	b.n	80037f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d009      	beq.n	80036c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ba:	461a      	mov	r2, r3
 80036bc:	2320      	movs	r3, #32
 80036be:	6093      	str	r3, [r2, #8]
 80036c0:	e098      	b.n	80037f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f040 8093 	bne.w	80037f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	4a4b      	ldr	r2, [pc, #300]	; (8003800 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d90f      	bls.n	80036f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ec:	461a      	mov	r2, r3
 80036ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f2:	6093      	str	r3, [r2, #8]
 80036f4:	e07e      	b.n	80037f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	4413      	add	r3, r2
 8003708:	3304      	adds	r3, #4
 800370a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	0159      	lsls	r1, r3, #5
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	440b      	add	r3, r1
 8003718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003722:	1ad2      	subs	r2, r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d114      	bne.n	8003758 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003740:	461a      	mov	r2, r3
 8003742:	2101      	movs	r1, #1
 8003744:	f002 fc22 	bl	8005f8c <USB_EP0_OutStart>
 8003748:	e006      	b.n	8003758 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	441a      	add	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	4619      	mov	r1, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f004 fef0 	bl	8008544 <HAL_PCD_DataOutStageCallback>
 8003764:	e046      	b.n	80037f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	4a26      	ldr	r2, [pc, #152]	; (8003804 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d124      	bne.n	80037b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003784:	461a      	mov	r2, r3
 8003786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800378a:	6093      	str	r3, [r2, #8]
 800378c:	e032      	b.n	80037f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a4:	461a      	mov	r2, r3
 80037a6:	2320      	movs	r3, #32
 80037a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	4619      	mov	r1, r3
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f004 fec7 	bl	8008544 <HAL_PCD_DataOutStageCallback>
 80037b6:	e01d      	b.n	80037f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d114      	bne.n	80037e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	4613      	mov	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d108      	bne.n	80037e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037e0:	461a      	mov	r2, r3
 80037e2:	2100      	movs	r1, #0
 80037e4:	f002 fbd2 	bl	8005f8c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	4619      	mov	r1, r3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f004 fea8 	bl	8008544 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	4f54300a 	.word	0x4f54300a
 8003804:	4f54310a 	.word	0x4f54310a

08003808 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	333c      	adds	r3, #60	; 0x3c
 8003820:	3304      	adds	r3, #4
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4a15      	ldr	r2, [pc, #84]	; (8003890 <PCD_EP_OutSetupPacket_int+0x88>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d90e      	bls.n	800385c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003844:	2b00      	cmp	r3, #0
 8003846:	d009      	beq.n	800385c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003854:	461a      	mov	r2, r3
 8003856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800385a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f004 fe5f 	bl	8008520 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <PCD_EP_OutSetupPacket_int+0x88>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d90c      	bls.n	8003884 <PCD_EP_OutSetupPacket_int+0x7c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d108      	bne.n	8003884 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800387c:	461a      	mov	r2, r3
 800387e:	2101      	movs	r1, #1
 8003880:	f002 fb84 	bl	8005f8c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	4f54300a 	.word	0x4f54300a

08003894 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	70fb      	strb	r3, [r7, #3]
 80038a0:	4613      	mov	r3, r2
 80038a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d107      	bne.n	80038c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038b2:	883b      	ldrh	r3, [r7, #0]
 80038b4:	0419      	lsls	r1, r3, #16
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	430a      	orrs	r2, r1
 80038be:	629a      	str	r2, [r3, #40]	; 0x28
 80038c0:	e028      	b.n	8003914 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	0c1b      	lsrs	r3, r3, #16
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	4413      	add	r3, r2
 80038ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038d0:	2300      	movs	r3, #0
 80038d2:	73fb      	strb	r3, [r7, #15]
 80038d4:	e00d      	b.n	80038f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	3340      	adds	r3, #64	; 0x40
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	0c1b      	lsrs	r3, r3, #16
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	4413      	add	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	3301      	adds	r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
 80038f2:	7bfa      	ldrb	r2, [r7, #15]
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d3ec      	bcc.n	80038d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038fc:	883b      	ldrh	r3, [r7, #0]
 80038fe:	0418      	lsls	r0, r3, #16
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6819      	ldr	r1, [r3, #0]
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	3b01      	subs	r3, #1
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	4302      	orrs	r2, r0
 800390c:	3340      	adds	r3, #64	; 0x40
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	460b      	mov	r3, r1
 800392c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	887a      	ldrh	r2, [r7, #2]
 8003934:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0cc      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003970:	4b68      	ldr	r3, [pc, #416]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d90c      	bls.n	8003998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b65      	ldr	r3, [pc, #404]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003986:	4b63      	ldr	r3, [pc, #396]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0b8      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d020      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b0:	4b59      	ldr	r3, [pc, #356]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4a58      	ldr	r2, [pc, #352]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039c8:	4b53      	ldr	r3, [pc, #332]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	4a52      	ldr	r2, [pc, #328]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d4:	4b50      	ldr	r3, [pc, #320]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	494d      	ldr	r1, [pc, #308]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d044      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d107      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fa:	4b47      	ldr	r3, [pc, #284]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d119      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e07f      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d003      	beq.n	8003a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d107      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1a:	4b3f      	ldr	r3, [pc, #252]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e06f      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2a:	4b3b      	ldr	r3, [pc, #236]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e067      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a3a:	4b37      	ldr	r3, [pc, #220]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f023 0203 	bic.w	r2, r3, #3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4934      	ldr	r1, [pc, #208]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a4c:	f7fd fbca 	bl	80011e4 <HAL_GetTick>
 8003a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a54:	f7fd fbc6 	bl	80011e4 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e04f      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6a:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 020c 	and.w	r2, r3, #12
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d1eb      	bne.n	8003a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7c:	4b25      	ldr	r3, [pc, #148]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d20c      	bcs.n	8003aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8a:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a92:	4b20      	ldr	r3, [pc, #128]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e032      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab0:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4916      	ldr	r1, [pc, #88]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d009      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ace:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	490e      	ldr	r1, [pc, #56]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ae2:	f000 f821 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	490a      	ldr	r1, [pc, #40]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003af4:	5ccb      	ldrb	r3, [r1, r3]
 8003af6:	fa22 f303 	lsr.w	r3, r2, r3
 8003afa:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003afe:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <HAL_RCC_ClockConfig+0x1c8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd fb2a 	bl	800115c <HAL_InitTick>

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40023c00 	.word	0x40023c00
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	08008c28 	.word	0x08008c28
 8003b20:	2000008c 	.word	0x2000008c
 8003b24:	20000090 	.word	0x20000090

08003b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b2c:	b094      	sub	sp, #80	; 0x50
 8003b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	647b      	str	r3, [r7, #68]	; 0x44
 8003b34:	2300      	movs	r3, #0
 8003b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b38:	2300      	movs	r3, #0
 8003b3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b40:	4b79      	ldr	r3, [pc, #484]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 030c 	and.w	r3, r3, #12
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d00d      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0x40>
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	f200 80e1 	bhi.w	8003d14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <HAL_RCC_GetSysClockFreq+0x34>
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d003      	beq.n	8003b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b5a:	e0db      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b5c:	4b73      	ldr	r3, [pc, #460]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b60:	e0db      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b62:	4b73      	ldr	r3, [pc, #460]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b66:	e0d8      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b68:	4b6f      	ldr	r3, [pc, #444]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b72:	4b6d      	ldr	r3, [pc, #436]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d063      	beq.n	8003c46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7e:	4b6a      	ldr	r3, [pc, #424]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	099b      	lsrs	r3, r3, #6
 8003b84:	2200      	movs	r2, #0
 8003b86:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b90:	633b      	str	r3, [r7, #48]	; 0x30
 8003b92:	2300      	movs	r3, #0
 8003b94:	637b      	str	r3, [r7, #52]	; 0x34
 8003b96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b9a:	4622      	mov	r2, r4
 8003b9c:	462b      	mov	r3, r5
 8003b9e:	f04f 0000 	mov.w	r0, #0
 8003ba2:	f04f 0100 	mov.w	r1, #0
 8003ba6:	0159      	lsls	r1, r3, #5
 8003ba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bac:	0150      	lsls	r0, r2, #5
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	1a51      	subs	r1, r2, r1
 8003bb6:	6139      	str	r1, [r7, #16]
 8003bb8:	4629      	mov	r1, r5
 8003bba:	eb63 0301 	sbc.w	r3, r3, r1
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bcc:	4659      	mov	r1, fp
 8003bce:	018b      	lsls	r3, r1, #6
 8003bd0:	4651      	mov	r1, sl
 8003bd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bd6:	4651      	mov	r1, sl
 8003bd8:	018a      	lsls	r2, r1, #6
 8003bda:	4651      	mov	r1, sl
 8003bdc:	ebb2 0801 	subs.w	r8, r2, r1
 8003be0:	4659      	mov	r1, fp
 8003be2:	eb63 0901 	sbc.w	r9, r3, r1
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bfa:	4690      	mov	r8, r2
 8003bfc:	4699      	mov	r9, r3
 8003bfe:	4623      	mov	r3, r4
 8003c00:	eb18 0303 	adds.w	r3, r8, r3
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	462b      	mov	r3, r5
 8003c08:	eb49 0303 	adc.w	r3, r9, r3
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	024b      	lsls	r3, r1, #9
 8003c1e:	4621      	mov	r1, r4
 8003c20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c24:	4621      	mov	r1, r4
 8003c26:	024a      	lsls	r2, r1, #9
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c2e:	2200      	movs	r2, #0
 8003c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c38:	f7fc fad8 	bl	80001ec <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4613      	mov	r3, r2
 8003c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c44:	e058      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c46:	4b38      	ldr	r3, [pc, #224]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	099b      	lsrs	r3, r3, #6
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	4611      	mov	r1, r2
 8003c52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c56:	623b      	str	r3, [r7, #32]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c60:	4642      	mov	r2, r8
 8003c62:	464b      	mov	r3, r9
 8003c64:	f04f 0000 	mov.w	r0, #0
 8003c68:	f04f 0100 	mov.w	r1, #0
 8003c6c:	0159      	lsls	r1, r3, #5
 8003c6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c72:	0150      	lsls	r0, r2, #5
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4641      	mov	r1, r8
 8003c7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c7e:	4649      	mov	r1, r9
 8003c80:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c98:	ebb2 040a 	subs.w	r4, r2, sl
 8003c9c:	eb63 050b 	sbc.w	r5, r3, fp
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	00eb      	lsls	r3, r5, #3
 8003caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cae:	00e2      	lsls	r2, r4, #3
 8003cb0:	4614      	mov	r4, r2
 8003cb2:	461d      	mov	r5, r3
 8003cb4:	4643      	mov	r3, r8
 8003cb6:	18e3      	adds	r3, r4, r3
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	464b      	mov	r3, r9
 8003cbc:	eb45 0303 	adc.w	r3, r5, r3
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cce:	4629      	mov	r1, r5
 8003cd0:	028b      	lsls	r3, r1, #10
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cd8:	4621      	mov	r1, r4
 8003cda:	028a      	lsls	r2, r1, #10
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	61fa      	str	r2, [r7, #28]
 8003ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cec:	f7fc fa7e 	bl	80001ec <__aeabi_uldivmod>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	0c1b      	lsrs	r3, r3, #16
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	3301      	adds	r3, #1
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d12:	e002      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3750      	adds	r7, #80	; 0x50
 8003d20:	46bd      	mov	sp, r7
 8003d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	00f42400 	.word	0x00f42400
 8003d30:	007a1200 	.word	0x007a1200

08003d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d38:	4b03      	ldr	r3, [pc, #12]	; (8003d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	2000008c 	.word	0x2000008c

08003d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d50:	f7ff fff0 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	0a9b      	lsrs	r3, r3, #10
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	4903      	ldr	r1, [pc, #12]	; (8003d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d62:	5ccb      	ldrb	r3, [r1, r3]
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	08008c38 	.word	0x08008c38

08003d74 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d105      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d035      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d9c:	4b62      	ldr	r3, [pc, #392]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003da2:	f7fd fa1f 	bl	80011e4 <HAL_GetTick>
 8003da6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003daa:	f7fd fa1b 	bl	80011e4 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e0b0      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dbc:	4b5b      	ldr	r3, [pc, #364]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1f0      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	019a      	lsls	r2, r3, #6
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	071b      	lsls	r3, r3, #28
 8003dd4:	4955      	ldr	r1, [pc, #340]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ddc:	4b52      	ldr	r3, [pc, #328]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003de2:	f7fd f9ff 	bl	80011e4 <HAL_GetTick>
 8003de6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003de8:	e008      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003dea:	f7fd f9fb 	bl	80011e4 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e090      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dfc:	4b4b      	ldr	r3, [pc, #300]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 8083 	beq.w	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	4b44      	ldr	r3, [pc, #272]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	4a43      	ldr	r2, [pc, #268]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e24:	6413      	str	r3, [r2, #64]	; 0x40
 8003e26:	4b41      	ldr	r3, [pc, #260]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e32:	4b3f      	ldr	r3, [pc, #252]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a3e      	ldr	r2, [pc, #248]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e3e:	f7fd f9d1 	bl	80011e4 <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e44:	e008      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e46:	f7fd f9cd 	bl	80011e4 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e062      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e58:	4b35      	ldr	r3, [pc, #212]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0f0      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e64:	4b31      	ldr	r3, [pc, #196]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d02f      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d028      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e82:	4b2a      	ldr	r3, [pc, #168]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e8c:	4b29      	ldr	r3, [pc, #164]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e92:	4b28      	ldr	r3, [pc, #160]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e98:	4a24      	ldr	r2, [pc, #144]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e9e:	4b23      	ldr	r3, [pc, #140]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d114      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003eaa:	f7fd f99b 	bl	80011e4 <HAL_GetTick>
 8003eae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb0:	e00a      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb2:	f7fd f997 	bl	80011e4 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e02a      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec8:	4b18      	ldr	r3, [pc, #96]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0ee      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003edc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ee0:	d10d      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003ee2:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef6:	490d      	ldr	r1, [pc, #52]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	608b      	str	r3, [r1, #8]
 8003efc:	e005      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003efe:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f08:	6093      	str	r3, [r2, #8]
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f16:	4905      	ldr	r1, [pc, #20]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	42470068 	.word	0x42470068
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40007000 	.word	0x40007000
 8003f34:	42470e40 	.word	0x42470e40

08003f38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d13e      	bne.n	8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003f56:	4b23      	ldr	r3, [pc, #140]	; (8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d12f      	bne.n	8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003f6c:	4b1e      	ldr	r3, [pc, #120]	; (8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f6e:	617b      	str	r3, [r7, #20]
          break;
 8003f70:	e02f      	b.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f72:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f7e:	d108      	bne.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f80:	4b18      	ldr	r3, [pc, #96]	; (8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f88:	4a18      	ldr	r2, [pc, #96]	; (8003fec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	e007      	b.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f92:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f9a:	4a15      	ldr	r2, [pc, #84]	; (8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003fa2:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa8:	099b      	lsrs	r3, r3, #6
 8003faa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	fb02 f303 	mul.w	r3, r2, r3
 8003fb4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fbc:	0f1b      	lsrs	r3, r3, #28
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc8:	617b      	str	r3, [r7, #20]
          break;
 8003fca:	e002      	b.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
          break;
 8003fd0:	bf00      	nop
        }
      }
      break;
 8003fd2:	bf00      	nop
    }
  }
  return frequency;
 8003fd4:	697b      	ldr	r3, [r7, #20]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	00bb8000 	.word	0x00bb8000
 8003fec:	007a1200 	.word	0x007a1200
 8003ff0:	00f42400 	.word	0x00f42400

08003ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e07b      	b.n	80040fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2b00      	cmp	r3, #0
 800400c:	d108      	bne.n	8004020 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004016:	d009      	beq.n	800402c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	61da      	str	r2, [r3, #28]
 800401e:	e005      	b.n	800402c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fc ff58 	bl	8000efc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004062:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b0:	ea42 0103 	orr.w	r1, r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	0c1b      	lsrs	r3, r3, #16
 80040ca:	f003 0104 	and.w	r1, r3, #4
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	f003 0210 	and.w	r2, r3, #16
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e041      	b.n	800419c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d106      	bne.n	8004132 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7fc ff2d 	bl	8000f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2202      	movs	r2, #2
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3304      	adds	r3, #4
 8004142:	4619      	mov	r1, r3
 8004144:	4610      	mov	r0, r2
 8004146:	f000 fa35 	bl	80045b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d001      	beq.n	80041bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e046      	b.n	800424a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a23      	ldr	r2, [pc, #140]	; (8004258 <HAL_TIM_Base_Start+0xb4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d022      	beq.n	8004214 <HAL_TIM_Base_Start+0x70>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d6:	d01d      	beq.n	8004214 <HAL_TIM_Base_Start+0x70>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1f      	ldr	r2, [pc, #124]	; (800425c <HAL_TIM_Base_Start+0xb8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d018      	beq.n	8004214 <HAL_TIM_Base_Start+0x70>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a1e      	ldr	r2, [pc, #120]	; (8004260 <HAL_TIM_Base_Start+0xbc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d013      	beq.n	8004214 <HAL_TIM_Base_Start+0x70>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1c      	ldr	r2, [pc, #112]	; (8004264 <HAL_TIM_Base_Start+0xc0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00e      	beq.n	8004214 <HAL_TIM_Base_Start+0x70>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1b      	ldr	r2, [pc, #108]	; (8004268 <HAL_TIM_Base_Start+0xc4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d009      	beq.n	8004214 <HAL_TIM_Base_Start+0x70>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a19      	ldr	r2, [pc, #100]	; (800426c <HAL_TIM_Base_Start+0xc8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d004      	beq.n	8004214 <HAL_TIM_Base_Start+0x70>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a18      	ldr	r2, [pc, #96]	; (8004270 <HAL_TIM_Base_Start+0xcc>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d111      	bne.n	8004238 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b06      	cmp	r3, #6
 8004224:	d010      	beq.n	8004248 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0201 	orr.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004236:	e007      	b.n	8004248 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40010000 	.word	0x40010000
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800
 8004264:	40000c00 	.word	0x40000c00
 8004268:	40010400 	.word	0x40010400
 800426c:	40014000 	.word	0x40014000
 8004270:	40001800 	.word	0x40001800

08004274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	d001      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e04e      	b.n	800432a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a23      	ldr	r2, [pc, #140]	; (8004338 <HAL_TIM_Base_Start_IT+0xc4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d022      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b6:	d01d      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1f      	ldr	r2, [pc, #124]	; (800433c <HAL_TIM_Base_Start_IT+0xc8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d018      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1e      	ldr	r2, [pc, #120]	; (8004340 <HAL_TIM_Base_Start_IT+0xcc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d013      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a1c      	ldr	r2, [pc, #112]	; (8004344 <HAL_TIM_Base_Start_IT+0xd0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00e      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1b      	ldr	r2, [pc, #108]	; (8004348 <HAL_TIM_Base_Start_IT+0xd4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d009      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a19      	ldr	r2, [pc, #100]	; (800434c <HAL_TIM_Base_Start_IT+0xd8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d004      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x80>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a18      	ldr	r2, [pc, #96]	; (8004350 <HAL_TIM_Base_Start_IT+0xdc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d111      	bne.n	8004318 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b06      	cmp	r3, #6
 8004304:	d010      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0201 	orr.w	r2, r2, #1
 8004314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004316:	e007      	b.n	8004328 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40010000 	.word	0x40010000
 800433c:	40000400 	.word	0x40000400
 8004340:	40000800 	.word	0x40000800
 8004344:	40000c00 	.word	0x40000c00
 8004348:	40010400 	.word	0x40010400
 800434c:	40014000 	.word	0x40014000
 8004350:	40001800 	.word	0x40001800

08004354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b02      	cmp	r3, #2
 8004368:	d122      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b02      	cmp	r3, #2
 8004376:	d11b      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0202 	mvn.w	r2, #2
 8004380:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f8ee 	bl	8004578 <HAL_TIM_IC_CaptureCallback>
 800439c:	e005      	b.n	80043aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f8e0 	bl	8004564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f8f1 	bl	800458c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d122      	bne.n	8004404 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d11b      	bne.n	8004404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0204 	mvn.w	r2, #4
 80043d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f8c4 	bl	8004578 <HAL_TIM_IC_CaptureCallback>
 80043f0:	e005      	b.n	80043fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f8b6 	bl	8004564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f8c7 	bl	800458c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b08      	cmp	r3, #8
 8004410:	d122      	bne.n	8004458 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b08      	cmp	r3, #8
 800441e:	d11b      	bne.n	8004458 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0208 	mvn.w	r2, #8
 8004428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2204      	movs	r2, #4
 800442e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f89a 	bl	8004578 <HAL_TIM_IC_CaptureCallback>
 8004444:	e005      	b.n	8004452 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f88c 	bl	8004564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f89d 	bl	800458c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b10      	cmp	r3, #16
 8004464:	d122      	bne.n	80044ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b10      	cmp	r3, #16
 8004472:	d11b      	bne.n	80044ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0210 	mvn.w	r2, #16
 800447c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2208      	movs	r2, #8
 8004482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f870 	bl	8004578 <HAL_TIM_IC_CaptureCallback>
 8004498:	e005      	b.n	80044a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f862 	bl	8004564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f873 	bl	800458c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d10e      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d107      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0201 	mvn.w	r2, #1
 80044d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fc fc08 	bl	8000ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e2:	2b80      	cmp	r3, #128	; 0x80
 80044e4:	d10e      	bne.n	8004504 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f0:	2b80      	cmp	r3, #128	; 0x80
 80044f2:	d107      	bne.n	8004504 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f97e 	bl	8004800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b40      	cmp	r3, #64	; 0x40
 8004510:	d10e      	bne.n	8004530 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451c:	2b40      	cmp	r3, #64	; 0x40
 800451e:	d107      	bne.n	8004530 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f838 	bl	80045a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b20      	cmp	r3, #32
 800453c:	d10e      	bne.n	800455c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b20      	cmp	r3, #32
 800454a:	d107      	bne.n	800455c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0220 	mvn.w	r2, #32
 8004554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f948 	bl	80047ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800455c:	bf00      	nop
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a40      	ldr	r2, [pc, #256]	; (80046c8 <TIM_Base_SetConfig+0x114>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d013      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d2:	d00f      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a3d      	ldr	r2, [pc, #244]	; (80046cc <TIM_Base_SetConfig+0x118>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00b      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a3c      	ldr	r2, [pc, #240]	; (80046d0 <TIM_Base_SetConfig+0x11c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d007      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a3b      	ldr	r2, [pc, #236]	; (80046d4 <TIM_Base_SetConfig+0x120>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d003      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a3a      	ldr	r2, [pc, #232]	; (80046d8 <TIM_Base_SetConfig+0x124>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d108      	bne.n	8004606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a2f      	ldr	r2, [pc, #188]	; (80046c8 <TIM_Base_SetConfig+0x114>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d02b      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004614:	d027      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a2c      	ldr	r2, [pc, #176]	; (80046cc <TIM_Base_SetConfig+0x118>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d023      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a2b      	ldr	r2, [pc, #172]	; (80046d0 <TIM_Base_SetConfig+0x11c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d01f      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a2a      	ldr	r2, [pc, #168]	; (80046d4 <TIM_Base_SetConfig+0x120>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d01b      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a29      	ldr	r2, [pc, #164]	; (80046d8 <TIM_Base_SetConfig+0x124>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d017      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a28      	ldr	r2, [pc, #160]	; (80046dc <TIM_Base_SetConfig+0x128>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a27      	ldr	r2, [pc, #156]	; (80046e0 <TIM_Base_SetConfig+0x12c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00f      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a26      	ldr	r2, [pc, #152]	; (80046e4 <TIM_Base_SetConfig+0x130>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00b      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a25      	ldr	r2, [pc, #148]	; (80046e8 <TIM_Base_SetConfig+0x134>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d007      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a24      	ldr	r2, [pc, #144]	; (80046ec <TIM_Base_SetConfig+0x138>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d003      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a23      	ldr	r2, [pc, #140]	; (80046f0 <TIM_Base_SetConfig+0x13c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d108      	bne.n	8004678 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a0a      	ldr	r2, [pc, #40]	; (80046c8 <TIM_Base_SetConfig+0x114>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d003      	beq.n	80046ac <TIM_Base_SetConfig+0xf8>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a0c      	ldr	r2, [pc, #48]	; (80046d8 <TIM_Base_SetConfig+0x124>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d103      	bne.n	80046b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	615a      	str	r2, [r3, #20]
}
 80046ba:	bf00      	nop
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40010000 	.word	0x40010000
 80046cc:	40000400 	.word	0x40000400
 80046d0:	40000800 	.word	0x40000800
 80046d4:	40000c00 	.word	0x40000c00
 80046d8:	40010400 	.word	0x40010400
 80046dc:	40014000 	.word	0x40014000
 80046e0:	40014400 	.word	0x40014400
 80046e4:	40014800 	.word	0x40014800
 80046e8:	40001800 	.word	0x40001800
 80046ec:	40001c00 	.word	0x40001c00
 80046f0:	40002000 	.word	0x40002000

080046f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004708:	2302      	movs	r3, #2
 800470a:	e05a      	b.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a21      	ldr	r2, [pc, #132]	; (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d022      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004758:	d01d      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1d      	ldr	r2, [pc, #116]	; (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d018      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1b      	ldr	r2, [pc, #108]	; (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d013      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1a      	ldr	r2, [pc, #104]	; (80047dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d00e      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a18      	ldr	r2, [pc, #96]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d009      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a17      	ldr	r2, [pc, #92]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d004      	beq.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a15      	ldr	r2, [pc, #84]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d10c      	bne.n	80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800479c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40010000 	.word	0x40010000
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40000800 	.word	0x40000800
 80047dc:	40000c00 	.word	0x40000c00
 80047e0:	40010400 	.word	0x40010400
 80047e4:	40014000 	.word	0x40014000
 80047e8:	40001800 	.word	0x40001800

080047ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004814:	b084      	sub	sp, #16
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	f107 001c 	add.w	r0, r7, #28
 8004822:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	2b01      	cmp	r3, #1
 800482a:	d122      	bne.n	8004872 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004856:	2b01      	cmp	r3, #1
 8004858:	d105      	bne.n	8004866 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f001 fbee 	bl	8006048 <USB_CoreReset>
 800486c:	4603      	mov	r3, r0
 800486e:	73fb      	strb	r3, [r7, #15]
 8004870:	e01a      	b.n	80048a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f001 fbe2 	bl	8006048 <USB_CoreReset>
 8004884:	4603      	mov	r3, r0
 8004886:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	639a      	str	r2, [r3, #56]	; 0x38
 800489a:	e005      	b.n	80048a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d10b      	bne.n	80048c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f043 0206 	orr.w	r2, r3, #6
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f043 0220 	orr.w	r2, r3, #32
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048d2:	b004      	add	sp, #16
 80048d4:	4770      	bx	lr
	...

080048d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	4613      	mov	r3, r2
 80048e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d165      	bne.n	80049b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4a41      	ldr	r2, [pc, #260]	; (80049f4 <USB_SetTurnaroundTime+0x11c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d906      	bls.n	8004902 <USB_SetTurnaroundTime+0x2a>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4a40      	ldr	r2, [pc, #256]	; (80049f8 <USB_SetTurnaroundTime+0x120>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d202      	bcs.n	8004902 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80048fc:	230f      	movs	r3, #15
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	e062      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	4a3c      	ldr	r2, [pc, #240]	; (80049f8 <USB_SetTurnaroundTime+0x120>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d306      	bcc.n	8004918 <USB_SetTurnaroundTime+0x40>
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4a3b      	ldr	r2, [pc, #236]	; (80049fc <USB_SetTurnaroundTime+0x124>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d202      	bcs.n	8004918 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004912:	230e      	movs	r3, #14
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	e057      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4a38      	ldr	r2, [pc, #224]	; (80049fc <USB_SetTurnaroundTime+0x124>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d306      	bcc.n	800492e <USB_SetTurnaroundTime+0x56>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4a37      	ldr	r2, [pc, #220]	; (8004a00 <USB_SetTurnaroundTime+0x128>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d202      	bcs.n	800492e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004928:	230d      	movs	r3, #13
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	e04c      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4a33      	ldr	r2, [pc, #204]	; (8004a00 <USB_SetTurnaroundTime+0x128>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d306      	bcc.n	8004944 <USB_SetTurnaroundTime+0x6c>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	4a32      	ldr	r2, [pc, #200]	; (8004a04 <USB_SetTurnaroundTime+0x12c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d802      	bhi.n	8004944 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800493e:	230c      	movs	r3, #12
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	e041      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4a2f      	ldr	r2, [pc, #188]	; (8004a04 <USB_SetTurnaroundTime+0x12c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d906      	bls.n	800495a <USB_SetTurnaroundTime+0x82>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4a2e      	ldr	r2, [pc, #184]	; (8004a08 <USB_SetTurnaroundTime+0x130>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d802      	bhi.n	800495a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004954:	230b      	movs	r3, #11
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	e036      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4a2a      	ldr	r2, [pc, #168]	; (8004a08 <USB_SetTurnaroundTime+0x130>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d906      	bls.n	8004970 <USB_SetTurnaroundTime+0x98>
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4a29      	ldr	r2, [pc, #164]	; (8004a0c <USB_SetTurnaroundTime+0x134>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d802      	bhi.n	8004970 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800496a:	230a      	movs	r3, #10
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	e02b      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4a26      	ldr	r2, [pc, #152]	; (8004a0c <USB_SetTurnaroundTime+0x134>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d906      	bls.n	8004986 <USB_SetTurnaroundTime+0xae>
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4a25      	ldr	r2, [pc, #148]	; (8004a10 <USB_SetTurnaroundTime+0x138>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d202      	bcs.n	8004986 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004980:	2309      	movs	r3, #9
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	e020      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	4a21      	ldr	r2, [pc, #132]	; (8004a10 <USB_SetTurnaroundTime+0x138>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d306      	bcc.n	800499c <USB_SetTurnaroundTime+0xc4>
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	4a20      	ldr	r2, [pc, #128]	; (8004a14 <USB_SetTurnaroundTime+0x13c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d802      	bhi.n	800499c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004996:	2308      	movs	r3, #8
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	e015      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <USB_SetTurnaroundTime+0x13c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d906      	bls.n	80049b2 <USB_SetTurnaroundTime+0xda>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4a1c      	ldr	r2, [pc, #112]	; (8004a18 <USB_SetTurnaroundTime+0x140>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d202      	bcs.n	80049b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80049ac:	2307      	movs	r3, #7
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	e00a      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80049b2:	2306      	movs	r3, #6
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	e007      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80049b8:	79fb      	ldrb	r3, [r7, #7]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80049be:	2309      	movs	r3, #9
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	e001      	b.n	80049c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80049c4:	2309      	movs	r3, #9
 80049c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	029b      	lsls	r3, r3, #10
 80049dc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80049e0:	431a      	orrs	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	00d8acbf 	.word	0x00d8acbf
 80049f8:	00e4e1c0 	.word	0x00e4e1c0
 80049fc:	00f42400 	.word	0x00f42400
 8004a00:	01067380 	.word	0x01067380
 8004a04:	011a499f 	.word	0x011a499f
 8004a08:	01312cff 	.word	0x01312cff
 8004a0c:	014ca43f 	.word	0x014ca43f
 8004a10:	016e3600 	.word	0x016e3600
 8004a14:	01a6ab1f 	.word	0x01a6ab1f
 8004a18:	01e84800 	.word	0x01e84800

08004a1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f043 0201 	orr.w	r2, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f023 0201 	bic.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d115      	bne.n	8004aae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a8e:	2001      	movs	r0, #1
 8004a90:	f7fc fbb4 	bl	80011fc <HAL_Delay>
      ms++;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3301      	adds	r3, #1
 8004a98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f001 fa45 	bl	8005f2a <USB_GetMode>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d01e      	beq.n	8004ae4 <USB_SetCurrentMode+0x84>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b31      	cmp	r3, #49	; 0x31
 8004aaa:	d9f0      	bls.n	8004a8e <USB_SetCurrentMode+0x2e>
 8004aac:	e01a      	b.n	8004ae4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d115      	bne.n	8004ae0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	f7fc fb9b 	bl	80011fc <HAL_Delay>
      ms++;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f001 fa2c 	bl	8005f2a <USB_GetMode>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <USB_SetCurrentMode+0x84>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b31      	cmp	r3, #49	; 0x31
 8004adc:	d9f0      	bls.n	8004ac0 <USB_SetCurrentMode+0x60>
 8004ade:	e001      	b.n	8004ae4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e005      	b.n	8004af0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b32      	cmp	r3, #50	; 0x32
 8004ae8:	d101      	bne.n	8004aee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004af8:	b084      	sub	sp, #16
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b086      	sub	sp, #24
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b12:	2300      	movs	r3, #0
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	e009      	b.n	8004b2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	3340      	adds	r3, #64	; 0x40
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	2200      	movs	r2, #0
 8004b24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b0e      	cmp	r3, #14
 8004b30:	d9f2      	bls.n	8004b18 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d11c      	bne.n	8004b72 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b46:	f043 0302 	orr.w	r3, r3, #2
 8004b4a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38
 8004b70:	e00b      	b.n	8004b8a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b90:	461a      	mov	r2, r3
 8004b92:	2300      	movs	r3, #0
 8004b94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	680b      	ldr	r3, [r1, #0]
 8004ba8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d10c      	bne.n	8004bca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d104      	bne.n	8004bc0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f965 	bl	8004e88 <USB_SetDevSpeed>
 8004bbe:	e008      	b.n	8004bd2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f960 	bl	8004e88 <USB_SetDevSpeed>
 8004bc8:	e003      	b.n	8004bd2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bca:	2103      	movs	r1, #3
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f95b 	bl	8004e88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bd2:	2110      	movs	r1, #16
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f8f3 	bl	8004dc0 <USB_FlushTxFifo>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f91f 	bl	8004e28 <USB_FlushRxFifo>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c06:	461a      	mov	r2, r3
 8004c08:	2300      	movs	r3, #0
 8004c0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c12:	461a      	mov	r2, r3
 8004c14:	2300      	movs	r3, #0
 8004c16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c18:	2300      	movs	r3, #0
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	e043      	b.n	8004ca6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c34:	d118      	bne.n	8004c68 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	e013      	b.n	8004c7a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	e008      	b.n	8004c7a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c74:	461a      	mov	r2, r3
 8004c76:	2300      	movs	r3, #0
 8004c78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c86:	461a      	mov	r2, r3
 8004c88:	2300      	movs	r3, #0
 8004c8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d3b7      	bcc.n	8004c1e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	e043      	b.n	8004d3c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cca:	d118      	bne.n	8004cfe <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10a      	bne.n	8004ce8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	e013      	b.n	8004d10 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	e008      	b.n	8004d10 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2300      	movs	r3, #0
 8004d20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	613b      	str	r3, [r7, #16]
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d3b7      	bcc.n	8004cb4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d105      	bne.n	8004d78 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	f043 0210 	orr.w	r2, r3, #16
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699a      	ldr	r2, [r3, #24]
 8004d7c:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <USB_DevInit+0x2c4>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d005      	beq.n	8004d96 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f043 0208 	orr.w	r2, r3, #8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d107      	bne.n	8004dac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004da4:	f043 0304 	orr.w	r3, r3, #4
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004db8:	b004      	add	sp, #16
 8004dba:	4770      	bx	lr
 8004dbc:	803c3800 	.word	0x803c3800

08004dc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <USB_FlushTxFifo+0x64>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d901      	bls.n	8004de0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e01b      	b.n	8004e18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	daf2      	bge.n	8004dce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	019b      	lsls	r3, r3, #6
 8004df0:	f043 0220 	orr.w	r2, r3, #32
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4a08      	ldr	r2, [pc, #32]	; (8004e24 <USB_FlushTxFifo+0x64>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d901      	bls.n	8004e0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e006      	b.n	8004e18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0320 	and.w	r3, r3, #32
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d0f0      	beq.n	8004df8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	00030d40 	.word	0x00030d40

08004e28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3301      	adds	r3, #1
 8004e38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4a11      	ldr	r2, [pc, #68]	; (8004e84 <USB_FlushRxFifo+0x5c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d901      	bls.n	8004e46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e018      	b.n	8004e78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	daf2      	bge.n	8004e34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2210      	movs	r2, #16
 8004e56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a08      	ldr	r2, [pc, #32]	; (8004e84 <USB_FlushRxFifo+0x5c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d901      	bls.n	8004e6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e006      	b.n	8004e78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0310 	and.w	r3, r3, #16
 8004e72:	2b10      	cmp	r3, #16
 8004e74:	d0f0      	beq.n	8004e58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	00030d40 	.word	0x00030d40

08004e88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	68f9      	ldr	r1, [r7, #12]
 8004ea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b087      	sub	sp, #28
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 0306 	and.w	r3, r3, #6
 8004ed2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004eda:	2300      	movs	r3, #0
 8004edc:	75fb      	strb	r3, [r7, #23]
 8004ede:	e00a      	b.n	8004ef6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d002      	beq.n	8004eec <USB_GetDevSpeed+0x32>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b06      	cmp	r3, #6
 8004eea:	d102      	bne.n	8004ef2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004eec:	2302      	movs	r3, #2
 8004eee:	75fb      	strb	r3, [r7, #23]
 8004ef0:	e001      	b.n	8004ef6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004ef2:	230f      	movs	r3, #15
 8004ef4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	371c      	adds	r7, #28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	785b      	ldrb	r3, [r3, #1]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d13a      	bne.n	8004f96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	2101      	movs	r1, #1
 8004f32:	fa01 f303 	lsl.w	r3, r1, r3
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	68f9      	ldr	r1, [r7, #12]
 8004f3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d155      	bne.n	8005004 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	791b      	ldrb	r3, [r3, #4]
 8004f72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	059b      	lsls	r3, r3, #22
 8004f7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	0151      	lsls	r1, r2, #5
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	440a      	add	r2, r1
 8004f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	e036      	b.n	8005004 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9c:	69da      	ldr	r2, [r3, #28]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fac:	041b      	lsls	r3, r3, #16
 8004fae:	68f9      	ldr	r1, [r7, #12]
 8004fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d11a      	bne.n	8005004 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	791b      	ldrb	r3, [r3, #4]
 8004fe8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fea:	430b      	orrs	r3, r1
 8004fec:	4313      	orrs	r3, r2
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005002:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
	...

08005014 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	785b      	ldrb	r3, [r3, #1]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d161      	bne.n	80050f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005042:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005046:	d11f      	bne.n	8005088 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	440a      	add	r2, r1
 800505e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005062:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005066:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	0151      	lsls	r1, r2, #5
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	440a      	add	r2, r1
 800507e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005082:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005086:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	f003 030f 	and.w	r3, r3, #15
 8005098:	2101      	movs	r1, #1
 800509a:	fa01 f303 	lsl.w	r3, r1, r3
 800509e:	b29b      	uxth	r3, r3
 80050a0:	43db      	mvns	r3, r3
 80050a2:	68f9      	ldr	r1, [r7, #12]
 80050a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050a8:	4013      	ands	r3, r2
 80050aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b2:	69da      	ldr	r2, [r3, #28]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	2101      	movs	r1, #1
 80050be:	fa01 f303 	lsl.w	r3, r1, r3
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	43db      	mvns	r3, r3
 80050c6:	68f9      	ldr	r1, [r7, #12]
 80050c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050cc:	4013      	ands	r3, r2
 80050ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	0159      	lsls	r1, r3, #5
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	440b      	add	r3, r1
 80050e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ea:	4619      	mov	r1, r3
 80050ec:	4b35      	ldr	r3, [pc, #212]	; (80051c4 <USB_DeactivateEndpoint+0x1b0>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]
 80050f2:	e060      	b.n	80051b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800510a:	d11f      	bne.n	800514c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	0151      	lsls	r1, r2, #5
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	440a      	add	r2, r1
 8005122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005126:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800512a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	0151      	lsls	r1, r2, #5
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	440a      	add	r2, r1
 8005142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005146:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800514a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	2101      	movs	r1, #1
 800515e:	fa01 f303 	lsl.w	r3, r1, r3
 8005162:	041b      	lsls	r3, r3, #16
 8005164:	43db      	mvns	r3, r3
 8005166:	68f9      	ldr	r1, [r7, #12]
 8005168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800516c:	4013      	ands	r3, r2
 800516e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	2101      	movs	r1, #1
 8005182:	fa01 f303 	lsl.w	r3, r1, r3
 8005186:	041b      	lsls	r3, r3, #16
 8005188:	43db      	mvns	r3, r3
 800518a:	68f9      	ldr	r1, [r7, #12]
 800518c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005190:	4013      	ands	r3, r2
 8005192:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	0159      	lsls	r1, r3, #5
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	440b      	add	r3, r1
 80051aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ae:	4619      	mov	r1, r3
 80051b0:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <USB_DeactivateEndpoint+0x1b4>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	ec337800 	.word	0xec337800
 80051c8:	eff37800 	.word	0xeff37800

080051cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08a      	sub	sp, #40	; 0x28
 80051d0:	af02      	add	r7, sp, #8
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	4613      	mov	r3, r2
 80051d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	785b      	ldrb	r3, [r3, #1]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	f040 815c 	bne.w	80054a6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d132      	bne.n	800525c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	0151      	lsls	r1, r2, #5
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	440a      	add	r2, r1
 800520c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005210:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005214:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005218:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	0151      	lsls	r1, r2, #5
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	440a      	add	r2, r1
 8005230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005234:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005238:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	0151      	lsls	r1, r2, #5
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	440a      	add	r2, r1
 8005250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005254:	0cdb      	lsrs	r3, r3, #19
 8005256:	04db      	lsls	r3, r3, #19
 8005258:	6113      	str	r3, [r2, #16]
 800525a:	e074      	b.n	8005346 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	440a      	add	r2, r1
 8005272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005276:	0cdb      	lsrs	r3, r3, #19
 8005278:	04db      	lsls	r3, r3, #19
 800527a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	440a      	add	r2, r1
 8005292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005296:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800529a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800529e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	6999      	ldr	r1, [r3, #24]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	440b      	add	r3, r1
 80052b8:	1e59      	subs	r1, r3, #1
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	fbb1 f3f3 	udiv	r3, r1, r3
 80052c2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80052c4:	4b9d      	ldr	r3, [pc, #628]	; (800553c <USB_EPStartXfer+0x370>)
 80052c6:	400b      	ands	r3, r1
 80052c8:	69b9      	ldr	r1, [r7, #24]
 80052ca:	0148      	lsls	r0, r1, #5
 80052cc:	69f9      	ldr	r1, [r7, #28]
 80052ce:	4401      	add	r1, r0
 80052d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052d4:	4313      	orrs	r3, r2
 80052d6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e4:	691a      	ldr	r2, [r3, #16]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ee:	69b9      	ldr	r1, [r7, #24]
 80052f0:	0148      	lsls	r0, r1, #5
 80052f2:	69f9      	ldr	r1, [r7, #28]
 80052f4:	4401      	add	r1, r0
 80052f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052fa:	4313      	orrs	r3, r2
 80052fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	791b      	ldrb	r3, [r3, #4]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d11f      	bne.n	8005346 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	0151      	lsls	r1, r2, #5
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	440a      	add	r2, r1
 800531c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005320:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005324:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	440a      	add	r2, r1
 800533c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005340:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005344:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d14b      	bne.n	80053e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d009      	beq.n	8005368 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005360:	461a      	mov	r2, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	791b      	ldrb	r3, [r3, #4]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d128      	bne.n	80053c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537c:	2b00      	cmp	r3, #0
 800537e:	d110      	bne.n	80053a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	0151      	lsls	r1, r2, #5
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	440a      	add	r2, r1
 8005396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e00f      	b.n	80053c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	0151      	lsls	r1, r2, #5
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	440a      	add	r2, r1
 80053b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	0151      	lsls	r1, r2, #5
 80053d4:	69fa      	ldr	r2, [r7, #28]
 80053d6:	440a      	add	r2, r1
 80053d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e133      	b.n	800564c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	0151      	lsls	r1, r2, #5
 80053f6:	69fa      	ldr	r2, [r7, #28]
 80053f8:	440a      	add	r2, r1
 80053fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005402:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	791b      	ldrb	r3, [r3, #4]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d015      	beq.n	8005438 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 811b 	beq.w	800564c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	2101      	movs	r1, #1
 8005428:	fa01 f303 	lsl.w	r3, r1, r3
 800542c:	69f9      	ldr	r1, [r7, #28]
 800542e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005432:	4313      	orrs	r3, r2
 8005434:	634b      	str	r3, [r1, #52]	; 0x34
 8005436:	e109      	b.n	800564c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005444:	2b00      	cmp	r3, #0
 8005446:	d110      	bne.n	800546a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	0151      	lsls	r1, r2, #5
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	440a      	add	r2, r1
 800545e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005462:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	e00f      	b.n	800548a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	0151      	lsls	r1, r2, #5
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	440a      	add	r2, r1
 8005480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005488:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6919      	ldr	r1, [r3, #16]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	781a      	ldrb	r2, [r3, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	b298      	uxth	r0, r3
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	4603      	mov	r3, r0
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 fade 	bl	8005a60 <USB_WritePacket>
 80054a4:	e0d2      	b.n	800564c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c0:	0cdb      	lsrs	r3, r3, #19
 80054c2:	04db      	lsls	r3, r3, #19
 80054c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	0151      	lsls	r1, r2, #5
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	440a      	add	r2, r1
 80054dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d126      	bne.n	8005540 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005508:	69b9      	ldr	r1, [r7, #24]
 800550a:	0148      	lsls	r0, r1, #5
 800550c:	69f9      	ldr	r1, [r7, #28]
 800550e:	4401      	add	r1, r0
 8005510:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005514:	4313      	orrs	r3, r2
 8005516:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	0151      	lsls	r1, r2, #5
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	440a      	add	r2, r1
 800552e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005532:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005536:	6113      	str	r3, [r2, #16]
 8005538:	e03a      	b.n	80055b0 <USB_EPStartXfer+0x3e4>
 800553a:	bf00      	nop
 800553c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	699a      	ldr	r2, [r3, #24]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	4413      	add	r3, r2
 800554a:	1e5a      	subs	r2, r3, #1
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	fbb2 f3f3 	udiv	r3, r2, r3
 8005554:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	8afa      	ldrh	r2, [r7, #22]
 800555c:	fb03 f202 	mul.w	r2, r3, r2
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005570:	691a      	ldr	r2, [r3, #16]
 8005572:	8afb      	ldrh	r3, [r7, #22]
 8005574:	04d9      	lsls	r1, r3, #19
 8005576:	4b38      	ldr	r3, [pc, #224]	; (8005658 <USB_EPStartXfer+0x48c>)
 8005578:	400b      	ands	r3, r1
 800557a:	69b9      	ldr	r1, [r7, #24]
 800557c:	0148      	lsls	r0, r1, #5
 800557e:	69f9      	ldr	r1, [r7, #28]
 8005580:	4401      	add	r1, r0
 8005582:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005586:	4313      	orrs	r3, r2
 8005588:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055a0:	69b9      	ldr	r1, [r7, #24]
 80055a2:	0148      	lsls	r0, r1, #5
 80055a4:	69f9      	ldr	r1, [r7, #28]
 80055a6:	4401      	add	r1, r0
 80055a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055ac:	4313      	orrs	r3, r2
 80055ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d10d      	bne.n	80055d2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d009      	beq.n	80055d2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	6919      	ldr	r1, [r3, #16]
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ce:	460a      	mov	r2, r1
 80055d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	791b      	ldrb	r3, [r3, #4]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d128      	bne.n	800562c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d110      	bne.n	800560c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	0151      	lsls	r1, r2, #5
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	440a      	add	r2, r1
 8005600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005604:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	e00f      	b.n	800562c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	0151      	lsls	r1, r2, #5
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	440a      	add	r2, r1
 8005622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800562a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	0151      	lsls	r1, r2, #5
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	440a      	add	r2, r1
 8005642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005646:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800564a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3720      	adds	r7, #32
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	1ff80000 	.word	0x1ff80000

0800565c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	4613      	mov	r3, r2
 8005668:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	785b      	ldrb	r3, [r3, #1]
 8005678:	2b01      	cmp	r3, #1
 800567a:	f040 80ce 	bne.w	800581a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d132      	bne.n	80056ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	440a      	add	r2, r1
 800569c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	0151      	lsls	r1, r2, #5
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	440a      	add	r2, r1
 80056e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e4:	0cdb      	lsrs	r3, r3, #19
 80056e6:	04db      	lsls	r3, r3, #19
 80056e8:	6113      	str	r3, [r2, #16]
 80056ea:	e04e      	b.n	800578a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	440a      	add	r2, r1
 8005702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005706:	0cdb      	lsrs	r3, r3, #19
 8005708:	04db      	lsls	r3, r3, #19
 800570a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	440a      	add	r2, r1
 8005722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005726:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800572a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800572e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	699a      	ldr	r2, [r3, #24]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	429a      	cmp	r2, r3
 800573a:	d903      	bls.n	8005744 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	0151      	lsls	r1, r2, #5
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	440a      	add	r2, r1
 800575a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800575e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005762:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800577a:	6939      	ldr	r1, [r7, #16]
 800577c:	0148      	lsls	r0, r1, #5
 800577e:	6979      	ldr	r1, [r7, #20]
 8005780:	4401      	add	r1, r0
 8005782:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005786:	4313      	orrs	r3, r2
 8005788:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d11e      	bne.n	80057ce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d009      	beq.n	80057ac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a4:	461a      	mov	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	e097      	b.n	80058fe <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	0151      	lsls	r1, r2, #5
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	440a      	add	r2, r1
 80057e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057ec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 8083 	beq.w	80058fe <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	f003 030f 	and.w	r3, r3, #15
 8005808:	2101      	movs	r1, #1
 800580a:	fa01 f303 	lsl.w	r3, r1, r3
 800580e:	6979      	ldr	r1, [r7, #20]
 8005810:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005814:	4313      	orrs	r3, r2
 8005816:	634b      	str	r3, [r1, #52]	; 0x34
 8005818:	e071      	b.n	80058fe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005834:	0cdb      	lsrs	r3, r3, #19
 8005836:	04db      	lsls	r3, r3, #19
 8005838:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	440a      	add	r2, r1
 8005850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005854:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005858:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800585c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	0151      	lsls	r1, r2, #5
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	440a      	add	r2, r1
 800588c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005890:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005894:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ac:	6939      	ldr	r1, [r7, #16]
 80058ae:	0148      	lsls	r0, r1, #5
 80058b0:	6979      	ldr	r1, [r7, #20]
 80058b2:	4401      	add	r1, r0
 80058b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058b8:	4313      	orrs	r3, r2
 80058ba:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d10d      	bne.n	80058de <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d009      	beq.n	80058de <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6919      	ldr	r1, [r3, #16]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058da:	460a      	mov	r2, r1
 80058dc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	0151      	lsls	r1, r2, #5
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	440a      	add	r2, r1
 80058f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	785b      	ldrb	r3, [r3, #1]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d14a      	bne.n	80059c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800593e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005942:	f040 8086 	bne.w	8005a52 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	7812      	ldrb	r2, [r2, #0]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	440a      	add	r2, r1
 8005960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005964:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005968:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	7812      	ldrb	r2, [r2, #0]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	440a      	add	r2, r1
 8005984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005988:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800598c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3301      	adds	r3, #1
 8005992:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f242 7210 	movw	r2, #10000	; 0x2710
 800599a:	4293      	cmp	r3, r2
 800599c:	d902      	bls.n	80059a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	75fb      	strb	r3, [r7, #23]
          break;
 80059a2:	e056      	b.n	8005a52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059bc:	d0e7      	beq.n	800598e <USB_EPStopXfer+0x82>
 80059be:	e048      	b.n	8005a52 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059d8:	d13b      	bne.n	8005a52 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	7812      	ldrb	r2, [r2, #0]
 80059ee:	0151      	lsls	r1, r2, #5
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	440a      	add	r2, r1
 80059f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	7812      	ldrb	r2, [r2, #0]
 8005a12:	0151      	lsls	r1, r2, #5
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	440a      	add	r2, r1
 8005a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3301      	adds	r3, #1
 8005a26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d902      	bls.n	8005a38 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	75fb      	strb	r3, [r7, #23]
          break;
 8005a36:	e00c      	b.n	8005a52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a50:	d0e7      	beq.n	8005a22 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	371c      	adds	r7, #28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b089      	sub	sp, #36	; 0x24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	460b      	mov	r3, r1
 8005a70:	71fb      	strb	r3, [r7, #7]
 8005a72:	4613      	mov	r3, r2
 8005a74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d123      	bne.n	8005ace <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a86:	88bb      	ldrh	r3, [r7, #4]
 8005a88:	3303      	adds	r3, #3
 8005a8a:	089b      	lsrs	r3, r3, #2
 8005a8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	e018      	b.n	8005ac6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	031a      	lsls	r2, r3, #12
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	3301      	adds	r3, #1
 8005abe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d3e2      	bcc.n	8005a94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3724      	adds	r7, #36	; 0x24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b08b      	sub	sp, #44	; 0x2c
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005af2:	88fb      	ldrh	r3, [r7, #6]
 8005af4:	089b      	lsrs	r3, r3, #2
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b02:	2300      	movs	r3, #0
 8005b04:	623b      	str	r3, [r7, #32]
 8005b06:	e014      	b.n	8005b32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	3301      	adds	r3, #1
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	3301      	adds	r3, #1
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	3301      	adds	r3, #1
 8005b2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	623b      	str	r3, [r7, #32]
 8005b32:	6a3a      	ldr	r2, [r7, #32]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d3e6      	bcc.n	8005b08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b3a:	8bfb      	ldrh	r3, [r7, #30]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01e      	beq.n	8005b7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f107 0310 	add.w	r3, r7, #16
 8005b50:	6812      	ldr	r2, [r2, #0]
 8005b52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	701a      	strb	r2, [r3, #0]
      i++;
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	3301      	adds	r3, #1
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b72:	8bfb      	ldrh	r3, [r7, #30]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b78:	8bfb      	ldrh	r3, [r7, #30]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1ea      	bne.n	8005b54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	372c      	adds	r7, #44	; 0x2c
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	785b      	ldrb	r3, [r3, #1]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d12c      	bne.n	8005c02 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	db12      	blt.n	8005be0 <USB_EPSetStall+0x54>
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00f      	beq.n	8005be0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bde:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bfe:	6013      	str	r3, [r2, #0]
 8005c00:	e02b      	b.n	8005c5a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	db12      	blt.n	8005c3a <USB_EPSetStall+0xae>
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00f      	beq.n	8005c3a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c38:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	0151      	lsls	r1, r2, #5
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	440a      	add	r2, r1
 8005c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	785b      	ldrb	r3, [r3, #1]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d128      	bne.n	8005cd6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ca2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	791b      	ldrb	r3, [r3, #4]
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d003      	beq.n	8005cb4 <USB_EPClearStall+0x4c>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	791b      	ldrb	r3, [r3, #4]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d138      	bne.n	8005d26 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	0151      	lsls	r1, r2, #5
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	440a      	add	r2, r1
 8005cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	e027      	b.n	8005d26 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cf4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	791b      	ldrb	r3, [r3, #4]
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d003      	beq.n	8005d06 <USB_EPClearStall+0x9e>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	791b      	ldrb	r3, [r3, #4]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d10f      	bne.n	8005d26 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	0151      	lsls	r1, r2, #5
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d24:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d56:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d68:	68f9      	ldr	r1, [r7, #12]
 8005d6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d9a:	f023 0303 	bic.w	r3, r3, #3
 8005d9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dae:	f023 0302 	bic.w	r3, r3, #2
 8005db2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ddc:	f023 0303 	bic.w	r3, r3, #3
 8005de0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005df0:	f043 0302 	orr.w	r3, r3, #2
 8005df4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	0c1b      	lsrs	r3, r3, #16
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	b29b      	uxth	r3, r3
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ea2:	78fb      	ldrb	r3, [r7, #3]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b087      	sub	sp, #28
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ef2:	78fb      	ldrb	r3, [r7, #3]
 8005ef4:	f003 030f 	and.w	r3, r3, #15
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	fa22 f303 	lsr.w	r3, r2, r3
 8005efe:	01db      	lsls	r3, r3, #7
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f003 0301 	and.w	r3, r3, #1
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b085      	sub	sp, #20
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f60:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f64:	f023 0307 	bic.w	r3, r3, #7
 8005f68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	460b      	mov	r3, r1
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	333c      	adds	r3, #60	; 0x3c
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	4a26      	ldr	r2, [pc, #152]	; (8006044 <USB_EP0_OutStart+0xb8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d90a      	bls.n	8005fc6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc0:	d101      	bne.n	8005fc6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e037      	b.n	8006036 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fcc:	461a      	mov	r2, r3
 8005fce:	2300      	movs	r3, #0
 8005fd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fe4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff4:	f043 0318 	orr.w	r3, r3, #24
 8005ff8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006008:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800600c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800600e:	7afb      	ldrb	r3, [r7, #11]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d10f      	bne.n	8006034 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601a:	461a      	mov	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800602e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006032:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	371c      	adds	r7, #28
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	4f54300a 	.word	0x4f54300a

08006048 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3301      	adds	r3, #1
 8006058:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a13      	ldr	r2, [pc, #76]	; (80060ac <USB_CoreReset+0x64>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d901      	bls.n	8006066 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e01b      	b.n	800609e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	daf2      	bge.n	8006054 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f043 0201 	orr.w	r2, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3301      	adds	r3, #1
 8006082:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4a09      	ldr	r2, [pc, #36]	; (80060ac <USB_CoreReset+0x64>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d901      	bls.n	8006090 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e006      	b.n	800609e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b01      	cmp	r3, #1
 800609a:	d0f0      	beq.n	800607e <USB_CoreReset+0x36>

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	00030d40 	.word	0x00030d40

080060b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80060bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80060c0:	f002 fcaa 	bl	8008a18 <USBD_static_malloc>
 80060c4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d109      	bne.n	80060e0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	32b0      	adds	r2, #176	; 0xb0
 80060d6:	2100      	movs	r1, #0
 80060d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80060dc:	2302      	movs	r3, #2
 80060de:	e0d4      	b.n	800628a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80060e0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80060e4:	2100      	movs	r1, #0
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f002 fcfe 	bl	8008ae8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	32b0      	adds	r2, #176	; 0xb0
 80060f6:	68f9      	ldr	r1, [r7, #12]
 80060f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	32b0      	adds	r2, #176	; 0xb0
 8006106:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	7c1b      	ldrb	r3, [r3, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d138      	bne.n	800618a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006118:	4b5e      	ldr	r3, [pc, #376]	; (8006294 <USBD_CDC_Init+0x1e4>)
 800611a:	7819      	ldrb	r1, [r3, #0]
 800611c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006120:	2202      	movs	r2, #2
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f002 fb55 	bl	80087d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006128:	4b5a      	ldr	r3, [pc, #360]	; (8006294 <USBD_CDC_Init+0x1e4>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	f003 020f 	and.w	r2, r3, #15
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	3324      	adds	r3, #36	; 0x24
 800613e:	2201      	movs	r2, #1
 8006140:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006142:	4b55      	ldr	r3, [pc, #340]	; (8006298 <USBD_CDC_Init+0x1e8>)
 8006144:	7819      	ldrb	r1, [r3, #0]
 8006146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800614a:	2202      	movs	r2, #2
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f002 fb40 	bl	80087d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006152:	4b51      	ldr	r3, [pc, #324]	; (8006298 <USBD_CDC_Init+0x1e8>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	f003 020f 	and.w	r2, r3, #15
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	440b      	add	r3, r1
 8006166:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800616a:	2201      	movs	r2, #1
 800616c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800616e:	4b4b      	ldr	r3, [pc, #300]	; (800629c <USBD_CDC_Init+0x1ec>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	f003 020f 	and.w	r2, r3, #15
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	440b      	add	r3, r1
 8006182:	3326      	adds	r3, #38	; 0x26
 8006184:	2210      	movs	r2, #16
 8006186:	801a      	strh	r2, [r3, #0]
 8006188:	e035      	b.n	80061f6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800618a:	4b42      	ldr	r3, [pc, #264]	; (8006294 <USBD_CDC_Init+0x1e4>)
 800618c:	7819      	ldrb	r1, [r3, #0]
 800618e:	2340      	movs	r3, #64	; 0x40
 8006190:	2202      	movs	r2, #2
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f002 fb1d 	bl	80087d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006198:	4b3e      	ldr	r3, [pc, #248]	; (8006294 <USBD_CDC_Init+0x1e4>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	f003 020f 	and.w	r2, r3, #15
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	4613      	mov	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	440b      	add	r3, r1
 80061ac:	3324      	adds	r3, #36	; 0x24
 80061ae:	2201      	movs	r2, #1
 80061b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80061b2:	4b39      	ldr	r3, [pc, #228]	; (8006298 <USBD_CDC_Init+0x1e8>)
 80061b4:	7819      	ldrb	r1, [r3, #0]
 80061b6:	2340      	movs	r3, #64	; 0x40
 80061b8:	2202      	movs	r2, #2
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f002 fb09 	bl	80087d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80061c0:	4b35      	ldr	r3, [pc, #212]	; (8006298 <USBD_CDC_Init+0x1e8>)
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	f003 020f 	and.w	r2, r3, #15
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	4613      	mov	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	440b      	add	r3, r1
 80061d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061d8:	2201      	movs	r2, #1
 80061da:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80061dc:	4b2f      	ldr	r3, [pc, #188]	; (800629c <USBD_CDC_Init+0x1ec>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	f003 020f 	and.w	r2, r3, #15
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	440b      	add	r3, r1
 80061f0:	3326      	adds	r3, #38	; 0x26
 80061f2:	2210      	movs	r2, #16
 80061f4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80061f6:	4b29      	ldr	r3, [pc, #164]	; (800629c <USBD_CDC_Init+0x1ec>)
 80061f8:	7819      	ldrb	r1, [r3, #0]
 80061fa:	2308      	movs	r3, #8
 80061fc:	2203      	movs	r2, #3
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f002 fae7 	bl	80087d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006204:	4b25      	ldr	r3, [pc, #148]	; (800629c <USBD_CDC_Init+0x1ec>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	f003 020f 	and.w	r2, r3, #15
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	440b      	add	r3, r1
 8006218:	3324      	adds	r3, #36	; 0x24
 800621a:	2201      	movs	r2, #1
 800621c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	33b0      	adds	r3, #176	; 0xb0
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006254:	2302      	movs	r3, #2
 8006256:	e018      	b.n	800628a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	7c1b      	ldrb	r3, [r3, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10a      	bne.n	8006276 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006260:	4b0d      	ldr	r3, [pc, #52]	; (8006298 <USBD_CDC_Init+0x1e8>)
 8006262:	7819      	ldrb	r1, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800626a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f002 fb9e 	bl	80089b0 <USBD_LL_PrepareReceive>
 8006274:	e008      	b.n	8006288 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006276:	4b08      	ldr	r3, [pc, #32]	; (8006298 <USBD_CDC_Init+0x1e8>)
 8006278:	7819      	ldrb	r1, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006280:	2340      	movs	r3, #64	; 0x40
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f002 fb94 	bl	80089b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	2000011f 	.word	0x2000011f
 8006298:	20000120 	.word	0x20000120
 800629c:	20000121 	.word	0x20000121

080062a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80062ac:	4b3a      	ldr	r3, [pc, #232]	; (8006398 <USBD_CDC_DeInit+0xf8>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	4619      	mov	r1, r3
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f002 fab3 	bl	800881e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80062b8:	4b37      	ldr	r3, [pc, #220]	; (8006398 <USBD_CDC_DeInit+0xf8>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	f003 020f 	and.w	r2, r3, #15
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	440b      	add	r3, r1
 80062cc:	3324      	adds	r3, #36	; 0x24
 80062ce:	2200      	movs	r2, #0
 80062d0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80062d2:	4b32      	ldr	r3, [pc, #200]	; (800639c <USBD_CDC_DeInit+0xfc>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f002 faa0 	bl	800881e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80062de:	4b2f      	ldr	r3, [pc, #188]	; (800639c <USBD_CDC_DeInit+0xfc>)
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	f003 020f 	and.w	r2, r3, #15
 80062e6:	6879      	ldr	r1, [r7, #4]
 80062e8:	4613      	mov	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	440b      	add	r3, r1
 80062f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062f6:	2200      	movs	r2, #0
 80062f8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80062fa:	4b29      	ldr	r3, [pc, #164]	; (80063a0 <USBD_CDC_DeInit+0x100>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f002 fa8c 	bl	800881e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006306:	4b26      	ldr	r3, [pc, #152]	; (80063a0 <USBD_CDC_DeInit+0x100>)
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	f003 020f 	and.w	r2, r3, #15
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	3324      	adds	r3, #36	; 0x24
 800631c:	2200      	movs	r2, #0
 800631e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006320:	4b1f      	ldr	r3, [pc, #124]	; (80063a0 <USBD_CDC_DeInit+0x100>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	f003 020f 	and.w	r2, r3, #15
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	4613      	mov	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	440b      	add	r3, r1
 8006334:	3326      	adds	r3, #38	; 0x26
 8006336:	2200      	movs	r2, #0
 8006338:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	32b0      	adds	r2, #176	; 0xb0
 8006344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d01f      	beq.n	800638c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	33b0      	adds	r3, #176	; 0xb0
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	32b0      	adds	r2, #176	; 0xb0
 800636a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636e:	4618      	mov	r0, r3
 8006370:	f002 fb60 	bl	8008a34 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	32b0      	adds	r2, #176	; 0xb0
 800637e:	2100      	movs	r1, #0
 8006380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	2000011f 	.word	0x2000011f
 800639c:	20000120 	.word	0x20000120
 80063a0:	20000121 	.word	0x20000121

080063a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	32b0      	adds	r2, #176	; 0xb0
 80063b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063bc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e0bf      	b.n	8006554 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d050      	beq.n	8006482 <USBD_CDC_Setup+0xde>
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	f040 80af 	bne.w	8006544 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	88db      	ldrh	r3, [r3, #6]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d03a      	beq.n	8006464 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	b25b      	sxtb	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	da1b      	bge.n	8006430 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	33b0      	adds	r3, #176	; 0xb0
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800640e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	88d2      	ldrh	r2, [r2, #6]
 8006414:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	88db      	ldrh	r3, [r3, #6]
 800641a:	2b07      	cmp	r3, #7
 800641c:	bf28      	it	cs
 800641e:	2307      	movcs	r3, #7
 8006420:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	89fa      	ldrh	r2, [r7, #14]
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f001 fd89 	bl	8007f40 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800642e:	e090      	b.n	8006552 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	785a      	ldrb	r2, [r3, #1]
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	88db      	ldrh	r3, [r3, #6]
 800643e:	2b3f      	cmp	r3, #63	; 0x3f
 8006440:	d803      	bhi.n	800644a <USBD_CDC_Setup+0xa6>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	88db      	ldrh	r3, [r3, #6]
 8006446:	b2da      	uxtb	r2, r3
 8006448:	e000      	b.n	800644c <USBD_CDC_Setup+0xa8>
 800644a:	2240      	movs	r2, #64	; 0x40
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006452:	6939      	ldr	r1, [r7, #16]
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800645a:	461a      	mov	r2, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 fd9b 	bl	8007f98 <USBD_CtlPrepareRx>
      break;
 8006462:	e076      	b.n	8006552 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	33b0      	adds	r3, #176	; 0xb0
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	7850      	ldrb	r0, [r2, #1]
 800647a:	2200      	movs	r2, #0
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	4798      	blx	r3
      break;
 8006480:	e067      	b.n	8006552 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	785b      	ldrb	r3, [r3, #1]
 8006486:	2b0b      	cmp	r3, #11
 8006488:	d851      	bhi.n	800652e <USBD_CDC_Setup+0x18a>
 800648a:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <USBD_CDC_Setup+0xec>)
 800648c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006490:	080064c1 	.word	0x080064c1
 8006494:	0800653d 	.word	0x0800653d
 8006498:	0800652f 	.word	0x0800652f
 800649c:	0800652f 	.word	0x0800652f
 80064a0:	0800652f 	.word	0x0800652f
 80064a4:	0800652f 	.word	0x0800652f
 80064a8:	0800652f 	.word	0x0800652f
 80064ac:	0800652f 	.word	0x0800652f
 80064b0:	0800652f 	.word	0x0800652f
 80064b4:	0800652f 	.word	0x0800652f
 80064b8:	080064eb 	.word	0x080064eb
 80064bc:	08006515 	.word	0x08006515
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b03      	cmp	r3, #3
 80064ca:	d107      	bne.n	80064dc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80064cc:	f107 030a 	add.w	r3, r7, #10
 80064d0:	2202      	movs	r2, #2
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 fd33 	bl	8007f40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064da:	e032      	b.n	8006542 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f001 fcbd 	bl	8007e5e <USBD_CtlError>
            ret = USBD_FAIL;
 80064e4:	2303      	movs	r3, #3
 80064e6:	75fb      	strb	r3, [r7, #23]
          break;
 80064e8:	e02b      	b.n	8006542 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d107      	bne.n	8006506 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80064f6:	f107 030d 	add.w	r3, r7, #13
 80064fa:	2201      	movs	r2, #1
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f001 fd1e 	bl	8007f40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006504:	e01d      	b.n	8006542 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006506:	6839      	ldr	r1, [r7, #0]
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f001 fca8 	bl	8007e5e <USBD_CtlError>
            ret = USBD_FAIL;
 800650e:	2303      	movs	r3, #3
 8006510:	75fb      	strb	r3, [r7, #23]
          break;
 8006512:	e016      	b.n	8006542 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b03      	cmp	r3, #3
 800651e:	d00f      	beq.n	8006540 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f001 fc9b 	bl	8007e5e <USBD_CtlError>
            ret = USBD_FAIL;
 8006528:	2303      	movs	r3, #3
 800652a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800652c:	e008      	b.n	8006540 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f001 fc94 	bl	8007e5e <USBD_CtlError>
          ret = USBD_FAIL;
 8006536:	2303      	movs	r3, #3
 8006538:	75fb      	strb	r3, [r7, #23]
          break;
 800653a:	e002      	b.n	8006542 <USBD_CDC_Setup+0x19e>
          break;
 800653c:	bf00      	nop
 800653e:	e008      	b.n	8006552 <USBD_CDC_Setup+0x1ae>
          break;
 8006540:	bf00      	nop
      }
      break;
 8006542:	e006      	b.n	8006552 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f001 fc89 	bl	8007e5e <USBD_CtlError>
      ret = USBD_FAIL;
 800654c:	2303      	movs	r3, #3
 800654e:	75fb      	strb	r3, [r7, #23]
      break;
 8006550:	bf00      	nop
  }

  return (uint8_t)ret;
 8006552:	7dfb      	ldrb	r3, [r7, #23]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800656e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	32b0      	adds	r2, #176	; 0xb0
 800657a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006582:	2303      	movs	r3, #3
 8006584:	e065      	b.n	8006652 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	32b0      	adds	r2, #176	; 0xb0
 8006590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006594:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006596:	78fb      	ldrb	r3, [r7, #3]
 8006598:	f003 020f 	and.w	r2, r3, #15
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	3318      	adds	r3, #24
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d02f      	beq.n	8006610 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	f003 020f 	and.w	r2, r3, #15
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	4613      	mov	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	440b      	add	r3, r1
 80065c2:	3318      	adds	r3, #24
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	78fb      	ldrb	r3, [r7, #3]
 80065c8:	f003 010f 	and.w	r1, r3, #15
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	460b      	mov	r3, r1
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	440b      	add	r3, r1
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4403      	add	r3, r0
 80065d8:	3348      	adds	r3, #72	; 0x48
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	fbb2 f1f3 	udiv	r1, r2, r3
 80065e0:	fb01 f303 	mul.w	r3, r1, r3
 80065e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d112      	bne.n	8006610 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80065ea:	78fb      	ldrb	r3, [r7, #3]
 80065ec:	f003 020f 	and.w	r2, r3, #15
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	4613      	mov	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	440b      	add	r3, r1
 80065fc:	3318      	adds	r3, #24
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006602:	78f9      	ldrb	r1, [r7, #3]
 8006604:	2300      	movs	r3, #0
 8006606:	2200      	movs	r2, #0
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f002 f9b0 	bl	800896e <USBD_LL_Transmit>
 800660e:	e01f      	b.n	8006650 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	33b0      	adds	r3, #176	; 0xb0
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d010      	beq.n	8006650 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	33b0      	adds	r3, #176	; 0xb0
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800664c:	78fa      	ldrb	r2, [r7, #3]
 800664e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	460b      	mov	r3, r1
 8006664:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	32b0      	adds	r2, #176	; 0xb0
 8006670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006674:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	32b0      	adds	r2, #176	; 0xb0
 8006680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006688:	2303      	movs	r3, #3
 800668a:	e01a      	b.n	80066c2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800668c:	78fb      	ldrb	r3, [r7, #3]
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f002 f9ae 	bl	80089f2 <USBD_LL_GetRxDataSize>
 8006696:	4602      	mov	r2, r0
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	33b0      	adds	r3, #176	; 0xb0
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80066bc:	4611      	mov	r1, r2
 80066be:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	32b0      	adds	r2, #176	; 0xb0
 80066dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e025      	b.n	8006738 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	33b0      	adds	r3, #176	; 0xb0
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01a      	beq.n	8006736 <USBD_CDC_EP0_RxReady+0x6c>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006706:	2bff      	cmp	r3, #255	; 0xff
 8006708:	d015      	beq.n	8006736 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	33b0      	adds	r3, #176	; 0xb0
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006722:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800672a:	b292      	uxth	r2, r2
 800672c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	22ff      	movs	r2, #255	; 0xff
 8006732:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006748:	2182      	movs	r1, #130	; 0x82
 800674a:	4818      	ldr	r0, [pc, #96]	; (80067ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800674c:	f000 fd4f 	bl	80071ee <USBD_GetEpDesc>
 8006750:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006752:	2101      	movs	r1, #1
 8006754:	4815      	ldr	r0, [pc, #84]	; (80067ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006756:	f000 fd4a 	bl	80071ee <USBD_GetEpDesc>
 800675a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800675c:	2181      	movs	r1, #129	; 0x81
 800675e:	4813      	ldr	r0, [pc, #76]	; (80067ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006760:	f000 fd45 	bl	80071ee <USBD_GetEpDesc>
 8006764:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2210      	movs	r2, #16
 8006770:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d006      	beq.n	8006786 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2200      	movs	r2, #0
 800677c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006780:	711a      	strb	r2, [r3, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d006      	beq.n	800679a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006794:	711a      	strb	r2, [r3, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2243      	movs	r2, #67	; 0x43
 800679e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80067a0:	4b02      	ldr	r3, [pc, #8]	; (80067ac <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	200000dc 	.word	0x200000dc

080067b0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067b8:	2182      	movs	r1, #130	; 0x82
 80067ba:	4818      	ldr	r0, [pc, #96]	; (800681c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80067bc:	f000 fd17 	bl	80071ee <USBD_GetEpDesc>
 80067c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067c2:	2101      	movs	r1, #1
 80067c4:	4815      	ldr	r0, [pc, #84]	; (800681c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80067c6:	f000 fd12 	bl	80071ee <USBD_GetEpDesc>
 80067ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067cc:	2181      	movs	r1, #129	; 0x81
 80067ce:	4813      	ldr	r0, [pc, #76]	; (800681c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80067d0:	f000 fd0d 	bl	80071ee <USBD_GetEpDesc>
 80067d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2210      	movs	r2, #16
 80067e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d006      	beq.n	80067f6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	2200      	movs	r2, #0
 80067ec:	711a      	strb	r2, [r3, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f042 0202 	orr.w	r2, r2, #2
 80067f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d006      	beq.n	800680a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	711a      	strb	r2, [r3, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f042 0202 	orr.w	r2, r2, #2
 8006808:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2243      	movs	r2, #67	; 0x43
 800680e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006810:	4b02      	ldr	r3, [pc, #8]	; (800681c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	200000dc 	.word	0x200000dc

08006820 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006828:	2182      	movs	r1, #130	; 0x82
 800682a:	4818      	ldr	r0, [pc, #96]	; (800688c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800682c:	f000 fcdf 	bl	80071ee <USBD_GetEpDesc>
 8006830:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006832:	2101      	movs	r1, #1
 8006834:	4815      	ldr	r0, [pc, #84]	; (800688c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006836:	f000 fcda 	bl	80071ee <USBD_GetEpDesc>
 800683a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800683c:	2181      	movs	r1, #129	; 0x81
 800683e:	4813      	ldr	r0, [pc, #76]	; (800688c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006840:	f000 fcd5 	bl	80071ee <USBD_GetEpDesc>
 8006844:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2210      	movs	r2, #16
 8006850:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d006      	beq.n	8006866 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2200      	movs	r2, #0
 800685c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006860:	711a      	strb	r2, [r3, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d006      	beq.n	800687a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006874:	711a      	strb	r2, [r3, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2243      	movs	r2, #67	; 0x43
 800687e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006880:	4b02      	ldr	r3, [pc, #8]	; (800688c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	200000dc 	.word	0x200000dc

08006890 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	220a      	movs	r2, #10
 800689c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800689e:	4b03      	ldr	r3, [pc, #12]	; (80068ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	20000098 	.word	0x20000098

080068b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e009      	b.n	80068d8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	33b0      	adds	r3, #176	; 0xb0
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	32b0      	adds	r2, #176	; 0xb0
 80068fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fe:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006906:	2303      	movs	r3, #3
 8006908:	e008      	b.n	800691c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	371c      	adds	r7, #28
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	32b0      	adds	r2, #176	; 0xb0
 800693c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006940:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006948:	2303      	movs	r3, #3
 800694a:	e004      	b.n	8006956 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
	...

08006964 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	32b0      	adds	r2, #176	; 0xb0
 8006976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800697c:	2301      	movs	r3, #1
 800697e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	32b0      	adds	r2, #176	; 0xb0
 800698a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006992:	2303      	movs	r3, #3
 8006994:	e025      	b.n	80069e2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800699c:	2b00      	cmp	r3, #0
 800699e:	d11f      	bne.n	80069e0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80069a8:	4b10      	ldr	r3, [pc, #64]	; (80069ec <USBD_CDC_TransmitPacket+0x88>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	f003 020f 	and.w	r2, r3, #15
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	4613      	mov	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4403      	add	r3, r0
 80069c2:	3318      	adds	r3, #24
 80069c4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80069c6:	4b09      	ldr	r3, [pc, #36]	; (80069ec <USBD_CDC_TransmitPacket+0x88>)
 80069c8:	7819      	ldrb	r1, [r3, #0]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f001 ffc9 	bl	800896e <USBD_LL_Transmit>

    ret = USBD_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	2000011f 	.word	0x2000011f

080069f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	32b0      	adds	r2, #176	; 0xb0
 8006a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a06:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	32b0      	adds	r2, #176	; 0xb0
 8006a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e018      	b.n	8006a50 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	7c1b      	ldrb	r3, [r3, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10a      	bne.n	8006a3c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a26:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <USBD_CDC_ReceivePacket+0x68>)
 8006a28:	7819      	ldrb	r1, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 ffbb 	bl	80089b0 <USBD_LL_PrepareReceive>
 8006a3a:	e008      	b.n	8006a4e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a3c:	4b06      	ldr	r3, [pc, #24]	; (8006a58 <USBD_CDC_ReceivePacket+0x68>)
 8006a3e:	7819      	ldrb	r1, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a46:	2340      	movs	r3, #64	; 0x40
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 ffb1 	bl	80089b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20000120 	.word	0x20000120

08006a5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e01f      	b.n	8006ab4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	79fa      	ldrb	r2, [r7, #7]
 8006aa6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f001 fe2b 	bl	8008704 <USBD_LL_Init>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3718      	adds	r7, #24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e025      	b.n	8006b20 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	32ae      	adds	r2, #174	; 0xae
 8006ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00f      	beq.n	8006b10 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	32ae      	adds	r2, #174	; 0xae
 8006afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b00:	f107 020e 	add.w	r2, r7, #14
 8006b04:	4610      	mov	r0, r2
 8006b06:	4798      	blx	r3
 8006b08:	4602      	mov	r2, r0
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 fe33 	bl	800879c <USBD_LL_Start>
 8006b36:	4603      	mov	r3, r0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b48:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	460b      	mov	r3, r1
 8006b60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d009      	beq.n	8006b84 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	78fa      	ldrb	r2, [r7, #3]
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	4798      	blx	r3
 8006b80:	4603      	mov	r3, r0
 8006b82:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	460b      	mov	r3, r1
 8006b98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	78fa      	ldrb	r2, [r7, #3]
 8006ba8:	4611      	mov	r1, r2
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	4798      	blx	r3
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 f908 	bl	8007dea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006be8:	461a      	mov	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006bf6:	f003 031f 	and.w	r3, r3, #31
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d01a      	beq.n	8006c34 <USBD_LL_SetupStage+0x72>
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d822      	bhi.n	8006c48 <USBD_LL_SetupStage+0x86>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <USBD_LL_SetupStage+0x4a>
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d00a      	beq.n	8006c20 <USBD_LL_SetupStage+0x5e>
 8006c0a:	e01d      	b.n	8006c48 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fb5f 	bl	80072d8 <USBD_StdDevReq>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c1e:	e020      	b.n	8006c62 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fbc7 	bl	80073bc <USBD_StdItfReq>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	73fb      	strb	r3, [r7, #15]
      break;
 8006c32:	e016      	b.n	8006c62 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fc29 	bl	8007494 <USBD_StdEPReq>
 8006c42:	4603      	mov	r3, r0
 8006c44:	73fb      	strb	r3, [r7, #15]
      break;
 8006c46:	e00c      	b.n	8006c62 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	4619      	mov	r1, r3
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fe00 	bl	800885c <USBD_LL_StallEP>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c60:	bf00      	nop
  }

  return ret;
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	460b      	mov	r3, r1
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006c7e:	7afb      	ldrb	r3, [r7, #11]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d16e      	bne.n	8006d62 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006c8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	f040 8098 	bne.w	8006dc8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d913      	bls.n	8006ccc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	689a      	ldr	r2, [r3, #8]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	1ad2      	subs	r2, r2, r3
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	68da      	ldr	r2, [r3, #12]
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	bf28      	it	cs
 8006cbe:	4613      	movcs	r3, r2
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	6879      	ldr	r1, [r7, #4]
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f001 f984 	bl	8007fd2 <USBD_CtlContinueRx>
 8006cca:	e07d      	b.n	8006dc8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006cd2:	f003 031f 	and.w	r3, r3, #31
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d014      	beq.n	8006d04 <USBD_LL_DataOutStage+0x98>
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d81d      	bhi.n	8006d1a <USBD_LL_DataOutStage+0xae>
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <USBD_LL_DataOutStage+0x7c>
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d003      	beq.n	8006cee <USBD_LL_DataOutStage+0x82>
 8006ce6:	e018      	b.n	8006d1a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	75bb      	strb	r3, [r7, #22]
            break;
 8006cec:	e018      	b.n	8006d20 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 fa5e 	bl	80071ba <USBD_CoreFindIF>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	75bb      	strb	r3, [r7, #22]
            break;
 8006d02:	e00d      	b.n	8006d20 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 fa60 	bl	80071d4 <USBD_CoreFindEP>
 8006d14:	4603      	mov	r3, r0
 8006d16:	75bb      	strb	r3, [r7, #22]
            break;
 8006d18:	e002      	b.n	8006d20 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	75bb      	strb	r3, [r7, #22]
            break;
 8006d1e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006d20:	7dbb      	ldrb	r3, [r7, #22]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d119      	bne.n	8006d5a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d113      	bne.n	8006d5a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006d32:	7dba      	ldrb	r2, [r7, #22]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	32ae      	adds	r2, #174	; 0xae
 8006d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00b      	beq.n	8006d5a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006d42:	7dba      	ldrb	r2, [r7, #22]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006d4a:	7dba      	ldrb	r2, [r7, #22]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	32ae      	adds	r2, #174	; 0xae
 8006d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f001 f94a 	bl	8007ff4 <USBD_CtlSendStatus>
 8006d60:	e032      	b.n	8006dc8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006d62:	7afb      	ldrb	r3, [r7, #11]
 8006d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 fa31 	bl	80071d4 <USBD_CoreFindEP>
 8006d72:	4603      	mov	r3, r0
 8006d74:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d76:	7dbb      	ldrb	r3, [r7, #22]
 8006d78:	2bff      	cmp	r3, #255	; 0xff
 8006d7a:	d025      	beq.n	8006dc8 <USBD_LL_DataOutStage+0x15c>
 8006d7c:	7dbb      	ldrb	r3, [r7, #22]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d122      	bne.n	8006dc8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	d117      	bne.n	8006dbe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006d8e:	7dba      	ldrb	r2, [r7, #22]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	32ae      	adds	r2, #174	; 0xae
 8006d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00f      	beq.n	8006dbe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006d9e:	7dba      	ldrb	r2, [r7, #22]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006da6:	7dba      	ldrb	r2, [r7, #22]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	32ae      	adds	r2, #174	; 0xae
 8006dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	7afa      	ldrb	r2, [r7, #11]
 8006db4:	4611      	mov	r1, r2
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	4798      	blx	r3
 8006dba:	4603      	mov	r3, r0
 8006dbc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
 8006dc6:	e000      	b.n	8006dca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b086      	sub	sp, #24
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	60f8      	str	r0, [r7, #12]
 8006dda:	460b      	mov	r3, r1
 8006ddc:	607a      	str	r2, [r7, #4]
 8006dde:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006de0:	7afb      	ldrb	r3, [r7, #11]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d16f      	bne.n	8006ec6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3314      	adds	r3, #20
 8006dea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d15a      	bne.n	8006eac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	689a      	ldr	r2, [r3, #8]
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d914      	bls.n	8006e2c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	689a      	ldr	r2, [r3, #8]
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	1ad2      	subs	r2, r2, r3
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	461a      	mov	r2, r3
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f001 f8ac 	bl	8007f76 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2200      	movs	r2, #0
 8006e22:	2100      	movs	r1, #0
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f001 fdc3 	bl	80089b0 <USBD_LL_PrepareReceive>
 8006e2a:	e03f      	b.n	8006eac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d11c      	bne.n	8006e72 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d316      	bcc.n	8006e72 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d20f      	bcs.n	8006e72 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e52:	2200      	movs	r2, #0
 8006e54:	2100      	movs	r1, #0
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f001 f88d 	bl	8007f76 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e64:	2300      	movs	r3, #0
 8006e66:	2200      	movs	r2, #0
 8006e68:	2100      	movs	r1, #0
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f001 fda0 	bl	80089b0 <USBD_LL_PrepareReceive>
 8006e70:	e01c      	b.n	8006eac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d10f      	bne.n	8006e9e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d009      	beq.n	8006e9e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e9e:	2180      	movs	r1, #128	; 0x80
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f001 fcdb 	bl	800885c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f001 f8b7 	bl	800801a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d03a      	beq.n	8006f2c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f7ff fe42 	bl	8006b40 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ec4:	e032      	b.n	8006f2c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006ec6:	7afb      	ldrb	r3, [r7, #11]
 8006ec8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	4619      	mov	r1, r3
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 f97f 	bl	80071d4 <USBD_CoreFindEP>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
 8006edc:	2bff      	cmp	r3, #255	; 0xff
 8006ede:	d025      	beq.n	8006f2c <USBD_LL_DataInStage+0x15a>
 8006ee0:	7dfb      	ldrb	r3, [r7, #23]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d122      	bne.n	8006f2c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	d11c      	bne.n	8006f2c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006ef2:	7dfa      	ldrb	r2, [r7, #23]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	32ae      	adds	r2, #174	; 0xae
 8006ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d014      	beq.n	8006f2c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006f02:	7dfa      	ldrb	r2, [r7, #23]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006f0a:	7dfa      	ldrb	r2, [r7, #23]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	32ae      	adds	r2, #174	; 0xae
 8006f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	7afa      	ldrb	r2, [r7, #11]
 8006f18:	4611      	mov	r1, r2
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	4798      	blx	r3
 8006f1e:	4603      	mov	r3, r0
 8006f20:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006f22:	7dbb      	ldrb	r3, [r7, #22]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006f28:	7dbb      	ldrb	r3, [r7, #22]
 8006f2a:	e000      	b.n	8006f2e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d014      	beq.n	8006f9c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00e      	beq.n	8006f9c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	6852      	ldr	r2, [r2, #4]
 8006f8a:	b2d2      	uxtb	r2, r2
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f9c:	2340      	movs	r3, #64	; 0x40
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 fc15 	bl	80087d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2240      	movs	r2, #64	; 0x40
 8006fb4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fb8:	2340      	movs	r3, #64	; 0x40
 8006fba:	2200      	movs	r2, #0
 8006fbc:	2180      	movs	r1, #128	; 0x80
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f001 fc07 	bl	80087d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2240      	movs	r2, #64	; 0x40
 8006fce:	621a      	str	r2, [r3, #32]

  return ret;
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	78fa      	ldrb	r2, [r7, #3]
 8006fea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b083      	sub	sp, #12
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007008:	b2da      	uxtb	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2204      	movs	r2, #4
 8007014:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b04      	cmp	r3, #4
 8007038:	d106      	bne.n	8007048 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007040:	b2da      	uxtb	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b03      	cmp	r3, #3
 8007068:	d110      	bne.n	800708c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b082      	sub	sp, #8
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	460b      	mov	r3, r1
 80070a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	32ae      	adds	r2, #174	; 0xae
 80070ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e01c      	b.n	80070f2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b03      	cmp	r3, #3
 80070c2:	d115      	bne.n	80070f0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	32ae      	adds	r2, #174	; 0xae
 80070ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00b      	beq.n	80070f0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	32ae      	adds	r2, #174	; 0xae
 80070e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	78fa      	ldrb	r2, [r7, #3]
 80070ea:	4611      	mov	r1, r2
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	460b      	mov	r3, r1
 8007104:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	32ae      	adds	r2, #174	; 0xae
 8007110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007118:	2303      	movs	r3, #3
 800711a:	e01c      	b.n	8007156 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b03      	cmp	r3, #3
 8007126:	d115      	bne.n	8007154 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	32ae      	adds	r2, #174	; 0xae
 8007132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00b      	beq.n	8007154 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	32ae      	adds	r2, #174	; 0xae
 8007146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714c:	78fa      	ldrb	r2, [r7, #3]
 800714e:	4611      	mov	r1, r2
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00e      	beq.n	80071b0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	6852      	ldr	r2, [r2, #4]
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	4611      	mov	r1, r2
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	4798      	blx	r3
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80071ac:	2303      	movs	r3, #3
 80071ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b083      	sub	sp, #12
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	460b      	mov	r3, r1
 80071c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80071c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80071e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b086      	sub	sp, #24
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	460b      	mov	r3, r1
 80071f8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007202:	2300      	movs	r3, #0
 8007204:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	885b      	ldrh	r3, [r3, #2]
 800720a:	b29a      	uxth	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	b29b      	uxth	r3, r3
 8007212:	429a      	cmp	r2, r3
 8007214:	d920      	bls.n	8007258 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800721e:	e013      	b.n	8007248 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007220:	f107 030a 	add.w	r3, r7, #10
 8007224:	4619      	mov	r1, r3
 8007226:	6978      	ldr	r0, [r7, #20]
 8007228:	f000 f81b 	bl	8007262 <USBD_GetNextDesc>
 800722c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	2b05      	cmp	r3, #5
 8007234:	d108      	bne.n	8007248 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	789b      	ldrb	r3, [r3, #2]
 800723e:	78fa      	ldrb	r2, [r7, #3]
 8007240:	429a      	cmp	r2, r3
 8007242:	d008      	beq.n	8007256 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007244:	2300      	movs	r3, #0
 8007246:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	885b      	ldrh	r3, [r3, #2]
 800724c:	b29a      	uxth	r2, r3
 800724e:	897b      	ldrh	r3, [r7, #10]
 8007250:	429a      	cmp	r2, r3
 8007252:	d8e5      	bhi.n	8007220 <USBD_GetEpDesc+0x32>
 8007254:	e000      	b.n	8007258 <USBD_GetEpDesc+0x6a>
          break;
 8007256:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007258:	693b      	ldr	r3, [r7, #16]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007262:	b480      	push	{r7}
 8007264:	b085      	sub	sp, #20
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	881a      	ldrh	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	b29b      	uxth	r3, r3
 800727a:	4413      	add	r3, r2
 800727c:	b29a      	uxth	r2, r3
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4413      	add	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800728e:	68fb      	ldr	r3, [r7, #12]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	3301      	adds	r3, #1
 80072b2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80072ba:	8a3b      	ldrh	r3, [r7, #16]
 80072bc:	021b      	lsls	r3, r3, #8
 80072be:	b21a      	sxth	r2, r3
 80072c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	b21b      	sxth	r3, r3
 80072c8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80072ca:	89fb      	ldrh	r3, [r7, #14]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	371c      	adds	r7, #28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ee:	2b40      	cmp	r3, #64	; 0x40
 80072f0:	d005      	beq.n	80072fe <USBD_StdDevReq+0x26>
 80072f2:	2b40      	cmp	r3, #64	; 0x40
 80072f4:	d857      	bhi.n	80073a6 <USBD_StdDevReq+0xce>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00f      	beq.n	800731a <USBD_StdDevReq+0x42>
 80072fa:	2b20      	cmp	r3, #32
 80072fc:	d153      	bne.n	80073a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	32ae      	adds	r2, #174	; 0xae
 8007308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	4798      	blx	r3
 8007314:	4603      	mov	r3, r0
 8007316:	73fb      	strb	r3, [r7, #15]
      break;
 8007318:	e04a      	b.n	80073b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	785b      	ldrb	r3, [r3, #1]
 800731e:	2b09      	cmp	r3, #9
 8007320:	d83b      	bhi.n	800739a <USBD_StdDevReq+0xc2>
 8007322:	a201      	add	r2, pc, #4	; (adr r2, 8007328 <USBD_StdDevReq+0x50>)
 8007324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007328:	0800737d 	.word	0x0800737d
 800732c:	08007391 	.word	0x08007391
 8007330:	0800739b 	.word	0x0800739b
 8007334:	08007387 	.word	0x08007387
 8007338:	0800739b 	.word	0x0800739b
 800733c:	0800735b 	.word	0x0800735b
 8007340:	08007351 	.word	0x08007351
 8007344:	0800739b 	.word	0x0800739b
 8007348:	08007373 	.word	0x08007373
 800734c:	08007365 	.word	0x08007365
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fa3c 	bl	80077d0 <USBD_GetDescriptor>
          break;
 8007358:	e024      	b.n	80073a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fba1 	bl	8007aa4 <USBD_SetAddress>
          break;
 8007362:	e01f      	b.n	80073a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fbe0 	bl	8007b2c <USBD_SetConfig>
 800736c:	4603      	mov	r3, r0
 800736e:	73fb      	strb	r3, [r7, #15]
          break;
 8007370:	e018      	b.n	80073a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fc83 	bl	8007c80 <USBD_GetConfig>
          break;
 800737a:	e013      	b.n	80073a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fcb4 	bl	8007cec <USBD_GetStatus>
          break;
 8007384:	e00e      	b.n	80073a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fce3 	bl	8007d54 <USBD_SetFeature>
          break;
 800738e:	e009      	b.n	80073a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fd07 	bl	8007da6 <USBD_ClrFeature>
          break;
 8007398:	e004      	b.n	80073a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fd5e 	bl	8007e5e <USBD_CtlError>
          break;
 80073a2:	bf00      	nop
      }
      break;
 80073a4:	e004      	b.n	80073b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fd58 	bl	8007e5e <USBD_CtlError>
      break;
 80073ae:	bf00      	nop
  }

  return ret;
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop

080073bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073d2:	2b40      	cmp	r3, #64	; 0x40
 80073d4:	d005      	beq.n	80073e2 <USBD_StdItfReq+0x26>
 80073d6:	2b40      	cmp	r3, #64	; 0x40
 80073d8:	d852      	bhi.n	8007480 <USBD_StdItfReq+0xc4>
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <USBD_StdItfReq+0x26>
 80073de:	2b20      	cmp	r3, #32
 80073e0:	d14e      	bne.n	8007480 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	3b01      	subs	r3, #1
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d840      	bhi.n	8007472 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	889b      	ldrh	r3, [r3, #4]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d836      	bhi.n	8007468 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	889b      	ldrh	r3, [r3, #4]
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff fed9 	bl	80071ba <USBD_CoreFindIF>
 8007408:	4603      	mov	r3, r0
 800740a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800740c:	7bbb      	ldrb	r3, [r7, #14]
 800740e:	2bff      	cmp	r3, #255	; 0xff
 8007410:	d01d      	beq.n	800744e <USBD_StdItfReq+0x92>
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d11a      	bne.n	800744e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007418:	7bba      	ldrb	r2, [r7, #14]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	32ae      	adds	r2, #174	; 0xae
 800741e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00f      	beq.n	8007448 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007428:	7bba      	ldrb	r2, [r7, #14]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007430:	7bba      	ldrb	r2, [r7, #14]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	32ae      	adds	r2, #174	; 0xae
 8007436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	4798      	blx	r3
 8007442:	4603      	mov	r3, r0
 8007444:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007446:	e004      	b.n	8007452 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007448:	2303      	movs	r3, #3
 800744a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800744c:	e001      	b.n	8007452 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800744e:	2303      	movs	r3, #3
 8007450:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	88db      	ldrh	r3, [r3, #6]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d110      	bne.n	800747c <USBD_StdItfReq+0xc0>
 800745a:	7bfb      	ldrb	r3, [r7, #15]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10d      	bne.n	800747c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fdc7 	bl	8007ff4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007466:	e009      	b.n	800747c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007468:	6839      	ldr	r1, [r7, #0]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fcf7 	bl	8007e5e <USBD_CtlError>
          break;
 8007470:	e004      	b.n	800747c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fcf2 	bl	8007e5e <USBD_CtlError>
          break;
 800747a:	e000      	b.n	800747e <USBD_StdItfReq+0xc2>
          break;
 800747c:	bf00      	nop
      }
      break;
 800747e:	e004      	b.n	800748a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fceb 	bl	8007e5e <USBD_CtlError>
      break;
 8007488:	bf00      	nop
  }

  return ret;
 800748a:	7bfb      	ldrb	r3, [r7, #15]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	889b      	ldrh	r3, [r3, #4]
 80074a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074b0:	2b40      	cmp	r3, #64	; 0x40
 80074b2:	d007      	beq.n	80074c4 <USBD_StdEPReq+0x30>
 80074b4:	2b40      	cmp	r3, #64	; 0x40
 80074b6:	f200 817f 	bhi.w	80077b8 <USBD_StdEPReq+0x324>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d02a      	beq.n	8007514 <USBD_StdEPReq+0x80>
 80074be:	2b20      	cmp	r3, #32
 80074c0:	f040 817a 	bne.w	80077b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff fe83 	bl	80071d4 <USBD_CoreFindEP>
 80074ce:	4603      	mov	r3, r0
 80074d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074d2:	7b7b      	ldrb	r3, [r7, #13]
 80074d4:	2bff      	cmp	r3, #255	; 0xff
 80074d6:	f000 8174 	beq.w	80077c2 <USBD_StdEPReq+0x32e>
 80074da:	7b7b      	ldrb	r3, [r7, #13]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f040 8170 	bne.w	80077c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80074e2:	7b7a      	ldrb	r2, [r7, #13]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80074ea:	7b7a      	ldrb	r2, [r7, #13]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	32ae      	adds	r2, #174	; 0xae
 80074f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 8163 	beq.w	80077c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80074fc:	7b7a      	ldrb	r2, [r7, #13]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	32ae      	adds	r2, #174	; 0xae
 8007502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	4798      	blx	r3
 800750e:	4603      	mov	r3, r0
 8007510:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007512:	e156      	b.n	80077c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	785b      	ldrb	r3, [r3, #1]
 8007518:	2b03      	cmp	r3, #3
 800751a:	d008      	beq.n	800752e <USBD_StdEPReq+0x9a>
 800751c:	2b03      	cmp	r3, #3
 800751e:	f300 8145 	bgt.w	80077ac <USBD_StdEPReq+0x318>
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 809b 	beq.w	800765e <USBD_StdEPReq+0x1ca>
 8007528:	2b01      	cmp	r3, #1
 800752a:	d03c      	beq.n	80075a6 <USBD_StdEPReq+0x112>
 800752c:	e13e      	b.n	80077ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b02      	cmp	r3, #2
 8007538:	d002      	beq.n	8007540 <USBD_StdEPReq+0xac>
 800753a:	2b03      	cmp	r3, #3
 800753c:	d016      	beq.n	800756c <USBD_StdEPReq+0xd8>
 800753e:	e02c      	b.n	800759a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007540:	7bbb      	ldrb	r3, [r7, #14]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00d      	beq.n	8007562 <USBD_StdEPReq+0xce>
 8007546:	7bbb      	ldrb	r3, [r7, #14]
 8007548:	2b80      	cmp	r3, #128	; 0x80
 800754a:	d00a      	beq.n	8007562 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 f983 	bl	800885c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007556:	2180      	movs	r1, #128	; 0x80
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 f97f 	bl	800885c <USBD_LL_StallEP>
 800755e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007560:	e020      	b.n	80075a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fc7a 	bl	8007e5e <USBD_CtlError>
              break;
 800756a:	e01b      	b.n	80075a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	885b      	ldrh	r3, [r3, #2]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10e      	bne.n	8007592 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00b      	beq.n	8007592 <USBD_StdEPReq+0xfe>
 800757a:	7bbb      	ldrb	r3, [r7, #14]
 800757c:	2b80      	cmp	r3, #128	; 0x80
 800757e:	d008      	beq.n	8007592 <USBD_StdEPReq+0xfe>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	88db      	ldrh	r3, [r3, #6]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d104      	bne.n	8007592 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007588:	7bbb      	ldrb	r3, [r7, #14]
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f001 f965 	bl	800885c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fd2e 	bl	8007ff4 <USBD_CtlSendStatus>

              break;
 8007598:	e004      	b.n	80075a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fc5e 	bl	8007e5e <USBD_CtlError>
              break;
 80075a2:	bf00      	nop
          }
          break;
 80075a4:	e107      	b.n	80077b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d002      	beq.n	80075b8 <USBD_StdEPReq+0x124>
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d016      	beq.n	80075e4 <USBD_StdEPReq+0x150>
 80075b6:	e04b      	b.n	8007650 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00d      	beq.n	80075da <USBD_StdEPReq+0x146>
 80075be:	7bbb      	ldrb	r3, [r7, #14]
 80075c0:	2b80      	cmp	r3, #128	; 0x80
 80075c2:	d00a      	beq.n	80075da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f001 f947 	bl	800885c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075ce:	2180      	movs	r1, #128	; 0x80
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f001 f943 	bl	800885c <USBD_LL_StallEP>
 80075d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075d8:	e040      	b.n	800765c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fc3e 	bl	8007e5e <USBD_CtlError>
              break;
 80075e2:	e03b      	b.n	800765c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	885b      	ldrh	r3, [r3, #2]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d136      	bne.n	800765a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80075ec:	7bbb      	ldrb	r3, [r7, #14]
 80075ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d004      	beq.n	8007600 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80075f6:	7bbb      	ldrb	r3, [r7, #14]
 80075f8:	4619      	mov	r1, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f001 f94d 	bl	800889a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fcf7 	bl	8007ff4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007606:	7bbb      	ldrb	r3, [r7, #14]
 8007608:	4619      	mov	r1, r3
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff fde2 	bl	80071d4 <USBD_CoreFindEP>
 8007610:	4603      	mov	r3, r0
 8007612:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007614:	7b7b      	ldrb	r3, [r7, #13]
 8007616:	2bff      	cmp	r3, #255	; 0xff
 8007618:	d01f      	beq.n	800765a <USBD_StdEPReq+0x1c6>
 800761a:	7b7b      	ldrb	r3, [r7, #13]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d11c      	bne.n	800765a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007620:	7b7a      	ldrb	r2, [r7, #13]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007628:	7b7a      	ldrb	r2, [r7, #13]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	32ae      	adds	r2, #174	; 0xae
 800762e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d010      	beq.n	800765a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007638:	7b7a      	ldrb	r2, [r7, #13]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	32ae      	adds	r2, #174	; 0xae
 800763e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	4798      	blx	r3
 800764a:	4603      	mov	r3, r0
 800764c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800764e:	e004      	b.n	800765a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fc03 	bl	8007e5e <USBD_CtlError>
              break;
 8007658:	e000      	b.n	800765c <USBD_StdEPReq+0x1c8>
              break;
 800765a:	bf00      	nop
          }
          break;
 800765c:	e0ab      	b.n	80077b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d002      	beq.n	8007670 <USBD_StdEPReq+0x1dc>
 800766a:	2b03      	cmp	r3, #3
 800766c:	d032      	beq.n	80076d4 <USBD_StdEPReq+0x240>
 800766e:	e097      	b.n	80077a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d007      	beq.n	8007686 <USBD_StdEPReq+0x1f2>
 8007676:	7bbb      	ldrb	r3, [r7, #14]
 8007678:	2b80      	cmp	r3, #128	; 0x80
 800767a:	d004      	beq.n	8007686 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fbed 	bl	8007e5e <USBD_CtlError>
                break;
 8007684:	e091      	b.n	80077aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007686:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800768a:	2b00      	cmp	r3, #0
 800768c:	da0b      	bge.n	80076a6 <USBD_StdEPReq+0x212>
 800768e:	7bbb      	ldrb	r3, [r7, #14]
 8007690:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007694:	4613      	mov	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	3310      	adds	r3, #16
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	4413      	add	r3, r2
 80076a2:	3304      	adds	r3, #4
 80076a4:	e00b      	b.n	80076be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
 80076a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076ac:	4613      	mov	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	4413      	add	r3, r2
 80076bc:	3304      	adds	r3, #4
 80076be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2202      	movs	r2, #2
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fc37 	bl	8007f40 <USBD_CtlSendData>
              break;
 80076d2:	e06a      	b.n	80077aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80076d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	da11      	bge.n	8007700 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	f003 020f 	and.w	r2, r3, #15
 80076e2:	6879      	ldr	r1, [r7, #4]
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	440b      	add	r3, r1
 80076ee:	3324      	adds	r3, #36	; 0x24
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d117      	bne.n	8007726 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fbb0 	bl	8007e5e <USBD_CtlError>
                  break;
 80076fe:	e054      	b.n	80077aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007700:	7bbb      	ldrb	r3, [r7, #14]
 8007702:	f003 020f 	and.w	r2, r3, #15
 8007706:	6879      	ldr	r1, [r7, #4]
 8007708:	4613      	mov	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	440b      	add	r3, r1
 8007712:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d104      	bne.n	8007726 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fb9d 	bl	8007e5e <USBD_CtlError>
                  break;
 8007724:	e041      	b.n	80077aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007726:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800772a:	2b00      	cmp	r3, #0
 800772c:	da0b      	bge.n	8007746 <USBD_StdEPReq+0x2b2>
 800772e:	7bbb      	ldrb	r3, [r7, #14]
 8007730:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007734:	4613      	mov	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	3310      	adds	r3, #16
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	4413      	add	r3, r2
 8007742:	3304      	adds	r3, #4
 8007744:	e00b      	b.n	800775e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007746:	7bbb      	ldrb	r3, [r7, #14]
 8007748:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800774c:	4613      	mov	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	4413      	add	r3, r2
 800775c:	3304      	adds	r3, #4
 800775e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <USBD_StdEPReq+0x2d8>
 8007766:	7bbb      	ldrb	r3, [r7, #14]
 8007768:	2b80      	cmp	r3, #128	; 0x80
 800776a:	d103      	bne.n	8007774 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2200      	movs	r2, #0
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	e00e      	b.n	8007792 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	4619      	mov	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f001 f8ad 	bl	80088d8 <USBD_LL_IsStallEP>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2201      	movs	r2, #1
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	e002      	b.n	8007792 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2200      	movs	r2, #0
 8007790:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2202      	movs	r2, #2
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fbd1 	bl	8007f40 <USBD_CtlSendData>
              break;
 800779e:	e004      	b.n	80077aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fb5b 	bl	8007e5e <USBD_CtlError>
              break;
 80077a8:	bf00      	nop
          }
          break;
 80077aa:	e004      	b.n	80077b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fb55 	bl	8007e5e <USBD_CtlError>
          break;
 80077b4:	bf00      	nop
      }
      break;
 80077b6:	e005      	b.n	80077c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fb4f 	bl	8007e5e <USBD_CtlError>
      break;
 80077c0:	e000      	b.n	80077c4 <USBD_StdEPReq+0x330>
      break;
 80077c2:	bf00      	nop
  }

  return ret;
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80077de:	2300      	movs	r3, #0
 80077e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	885b      	ldrh	r3, [r3, #2]
 80077ea:	0a1b      	lsrs	r3, r3, #8
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	3b01      	subs	r3, #1
 80077f0:	2b06      	cmp	r3, #6
 80077f2:	f200 8128 	bhi.w	8007a46 <USBD_GetDescriptor+0x276>
 80077f6:	a201      	add	r2, pc, #4	; (adr r2, 80077fc <USBD_GetDescriptor+0x2c>)
 80077f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fc:	08007819 	.word	0x08007819
 8007800:	08007831 	.word	0x08007831
 8007804:	08007871 	.word	0x08007871
 8007808:	08007a47 	.word	0x08007a47
 800780c:	08007a47 	.word	0x08007a47
 8007810:	080079e7 	.word	0x080079e7
 8007814:	08007a13 	.word	0x08007a13
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	7c12      	ldrb	r2, [r2, #16]
 8007824:	f107 0108 	add.w	r1, r7, #8
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
 800782c:	60f8      	str	r0, [r7, #12]
      break;
 800782e:	e112      	b.n	8007a56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	7c1b      	ldrb	r3, [r3, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10d      	bne.n	8007854 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800783e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007840:	f107 0208 	add.w	r2, r7, #8
 8007844:	4610      	mov	r0, r2
 8007846:	4798      	blx	r3
 8007848:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3301      	adds	r3, #1
 800784e:	2202      	movs	r2, #2
 8007850:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007852:	e100      	b.n	8007a56 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785c:	f107 0208 	add.w	r2, r7, #8
 8007860:	4610      	mov	r0, r2
 8007862:	4798      	blx	r3
 8007864:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3301      	adds	r3, #1
 800786a:	2202      	movs	r2, #2
 800786c:	701a      	strb	r2, [r3, #0]
      break;
 800786e:	e0f2      	b.n	8007a56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	885b      	ldrh	r3, [r3, #2]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b05      	cmp	r3, #5
 8007878:	f200 80ac 	bhi.w	80079d4 <USBD_GetDescriptor+0x204>
 800787c:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <USBD_GetDescriptor+0xb4>)
 800787e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007882:	bf00      	nop
 8007884:	0800789d 	.word	0x0800789d
 8007888:	080078d1 	.word	0x080078d1
 800788c:	08007905 	.word	0x08007905
 8007890:	08007939 	.word	0x08007939
 8007894:	0800796d 	.word	0x0800796d
 8007898:	080079a1 	.word	0x080079a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00b      	beq.n	80078c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	7c12      	ldrb	r2, [r2, #16]
 80078b4:	f107 0108 	add.w	r1, r7, #8
 80078b8:	4610      	mov	r0, r2
 80078ba:	4798      	blx	r3
 80078bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078be:	e091      	b.n	80079e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 facb 	bl	8007e5e <USBD_CtlError>
            err++;
 80078c8:	7afb      	ldrb	r3, [r7, #11]
 80078ca:	3301      	adds	r3, #1
 80078cc:	72fb      	strb	r3, [r7, #11]
          break;
 80078ce:	e089      	b.n	80079e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00b      	beq.n	80078f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	7c12      	ldrb	r2, [r2, #16]
 80078e8:	f107 0108 	add.w	r1, r7, #8
 80078ec:	4610      	mov	r0, r2
 80078ee:	4798      	blx	r3
 80078f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078f2:	e077      	b.n	80079e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fab1 	bl	8007e5e <USBD_CtlError>
            err++;
 80078fc:	7afb      	ldrb	r3, [r7, #11]
 80078fe:	3301      	adds	r3, #1
 8007900:	72fb      	strb	r3, [r7, #11]
          break;
 8007902:	e06f      	b.n	80079e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00b      	beq.n	8007928 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	7c12      	ldrb	r2, [r2, #16]
 800791c:	f107 0108 	add.w	r1, r7, #8
 8007920:	4610      	mov	r0, r2
 8007922:	4798      	blx	r3
 8007924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007926:	e05d      	b.n	80079e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fa97 	bl	8007e5e <USBD_CtlError>
            err++;
 8007930:	7afb      	ldrb	r3, [r7, #11]
 8007932:	3301      	adds	r3, #1
 8007934:	72fb      	strb	r3, [r7, #11]
          break;
 8007936:	e055      	b.n	80079e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	7c12      	ldrb	r2, [r2, #16]
 8007950:	f107 0108 	add.w	r1, r7, #8
 8007954:	4610      	mov	r0, r2
 8007956:	4798      	blx	r3
 8007958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800795a:	e043      	b.n	80079e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fa7d 	bl	8007e5e <USBD_CtlError>
            err++;
 8007964:	7afb      	ldrb	r3, [r7, #11]
 8007966:	3301      	adds	r3, #1
 8007968:	72fb      	strb	r3, [r7, #11]
          break;
 800796a:	e03b      	b.n	80079e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007972:	695b      	ldr	r3, [r3, #20]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00b      	beq.n	8007990 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800797e:	695b      	ldr	r3, [r3, #20]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	7c12      	ldrb	r2, [r2, #16]
 8007984:	f107 0108 	add.w	r1, r7, #8
 8007988:	4610      	mov	r0, r2
 800798a:	4798      	blx	r3
 800798c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800798e:	e029      	b.n	80079e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fa63 	bl	8007e5e <USBD_CtlError>
            err++;
 8007998:	7afb      	ldrb	r3, [r7, #11]
 800799a:	3301      	adds	r3, #1
 800799c:	72fb      	strb	r3, [r7, #11]
          break;
 800799e:	e021      	b.n	80079e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00b      	beq.n	80079c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	7c12      	ldrb	r2, [r2, #16]
 80079b8:	f107 0108 	add.w	r1, r7, #8
 80079bc:	4610      	mov	r0, r2
 80079be:	4798      	blx	r3
 80079c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079c2:	e00f      	b.n	80079e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fa49 	bl	8007e5e <USBD_CtlError>
            err++;
 80079cc:	7afb      	ldrb	r3, [r7, #11]
 80079ce:	3301      	adds	r3, #1
 80079d0:	72fb      	strb	r3, [r7, #11]
          break;
 80079d2:	e007      	b.n	80079e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fa41 	bl	8007e5e <USBD_CtlError>
          err++;
 80079dc:	7afb      	ldrb	r3, [r7, #11]
 80079de:	3301      	adds	r3, #1
 80079e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80079e2:	bf00      	nop
      }
      break;
 80079e4:	e037      	b.n	8007a56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	7c1b      	ldrb	r3, [r3, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d109      	bne.n	8007a02 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f6:	f107 0208 	add.w	r2, r7, #8
 80079fa:	4610      	mov	r0, r2
 80079fc:	4798      	blx	r3
 80079fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a00:	e029      	b.n	8007a56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fa2a 	bl	8007e5e <USBD_CtlError>
        err++;
 8007a0a:	7afb      	ldrb	r3, [r7, #11]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a10:	e021      	b.n	8007a56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	7c1b      	ldrb	r3, [r3, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10d      	bne.n	8007a36 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a22:	f107 0208 	add.w	r2, r7, #8
 8007a26:	4610      	mov	r0, r2
 8007a28:	4798      	blx	r3
 8007a2a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	2207      	movs	r2, #7
 8007a32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a34:	e00f      	b.n	8007a56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fa10 	bl	8007e5e <USBD_CtlError>
        err++;
 8007a3e:	7afb      	ldrb	r3, [r7, #11]
 8007a40:	3301      	adds	r3, #1
 8007a42:	72fb      	strb	r3, [r7, #11]
      break;
 8007a44:	e007      	b.n	8007a56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fa08 	bl	8007e5e <USBD_CtlError>
      err++;
 8007a4e:	7afb      	ldrb	r3, [r7, #11]
 8007a50:	3301      	adds	r3, #1
 8007a52:	72fb      	strb	r3, [r7, #11]
      break;
 8007a54:	bf00      	nop
  }

  if (err != 0U)
 8007a56:	7afb      	ldrb	r3, [r7, #11]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d11e      	bne.n	8007a9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	88db      	ldrh	r3, [r3, #6]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d016      	beq.n	8007a92 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007a64:	893b      	ldrh	r3, [r7, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00e      	beq.n	8007a88 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	88da      	ldrh	r2, [r3, #6]
 8007a6e:	893b      	ldrh	r3, [r7, #8]
 8007a70:	4293      	cmp	r3, r2
 8007a72:	bf28      	it	cs
 8007a74:	4613      	movcs	r3, r2
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a7a:	893b      	ldrh	r3, [r7, #8]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	68f9      	ldr	r1, [r7, #12]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fa5d 	bl	8007f40 <USBD_CtlSendData>
 8007a86:	e009      	b.n	8007a9c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f9e7 	bl	8007e5e <USBD_CtlError>
 8007a90:	e004      	b.n	8007a9c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 faae 	bl	8007ff4 <USBD_CtlSendStatus>
 8007a98:	e000      	b.n	8007a9c <USBD_GetDescriptor+0x2cc>
    return;
 8007a9a:	bf00      	nop
  }
}
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop

08007aa4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	889b      	ldrh	r3, [r3, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d131      	bne.n	8007b1a <USBD_SetAddress+0x76>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	88db      	ldrh	r3, [r3, #6]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d12d      	bne.n	8007b1a <USBD_SetAddress+0x76>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	885b      	ldrh	r3, [r3, #2]
 8007ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ac4:	d829      	bhi.n	8007b1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	885b      	ldrh	r3, [r3, #2]
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ad0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d104      	bne.n	8007ae8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f9bc 	bl	8007e5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae6:	e01d      	b.n	8007b24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	7bfa      	ldrb	r2, [r7, #15]
 8007aec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 ff1b 	bl	8008930 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fa7a 	bl	8007ff4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d004      	beq.n	8007b10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2202      	movs	r2, #2
 8007b0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0e:	e009      	b.n	8007b24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b18:	e004      	b.n	8007b24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f99e 	bl	8007e5e <USBD_CtlError>
  }
}
 8007b22:	bf00      	nop
 8007b24:	bf00      	nop
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	885b      	ldrh	r3, [r3, #2]
 8007b3e:	b2da      	uxtb	r2, r3
 8007b40:	4b4e      	ldr	r3, [pc, #312]	; (8007c7c <USBD_SetConfig+0x150>)
 8007b42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b44:	4b4d      	ldr	r3, [pc, #308]	; (8007c7c <USBD_SetConfig+0x150>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d905      	bls.n	8007b58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f985 	bl	8007e5e <USBD_CtlError>
    return USBD_FAIL;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e08c      	b.n	8007c72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d002      	beq.n	8007b6a <USBD_SetConfig+0x3e>
 8007b64:	2b03      	cmp	r3, #3
 8007b66:	d029      	beq.n	8007bbc <USBD_SetConfig+0x90>
 8007b68:	e075      	b.n	8007c56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007b6a:	4b44      	ldr	r3, [pc, #272]	; (8007c7c <USBD_SetConfig+0x150>)
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d020      	beq.n	8007bb4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007b72:	4b42      	ldr	r3, [pc, #264]	; (8007c7c <USBD_SetConfig+0x150>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b7c:	4b3f      	ldr	r3, [pc, #252]	; (8007c7c <USBD_SetConfig+0x150>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7fe ffe7 	bl	8006b56 <USBD_SetClassConfig>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d008      	beq.n	8007ba4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f962 	bl	8007e5e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ba2:	e065      	b.n	8007c70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fa25 	bl	8007ff4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2203      	movs	r2, #3
 8007bae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007bb2:	e05d      	b.n	8007c70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fa1d 	bl	8007ff4 <USBD_CtlSendStatus>
      break;
 8007bba:	e059      	b.n	8007c70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007bbc:	4b2f      	ldr	r3, [pc, #188]	; (8007c7c <USBD_SetConfig+0x150>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d112      	bne.n	8007bea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007bcc:	4b2b      	ldr	r3, [pc, #172]	; (8007c7c <USBD_SetConfig+0x150>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007bd6:	4b29      	ldr	r3, [pc, #164]	; (8007c7c <USBD_SetConfig+0x150>)
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7fe ffd6 	bl	8006b8e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fa06 	bl	8007ff4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007be8:	e042      	b.n	8007c70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007bea:	4b24      	ldr	r3, [pc, #144]	; (8007c7c <USBD_SetConfig+0x150>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d02a      	beq.n	8007c4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7fe ffc4 	bl	8006b8e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c06:	4b1d      	ldr	r3, [pc, #116]	; (8007c7c <USBD_SetConfig+0x150>)
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c10:	4b1a      	ldr	r3, [pc, #104]	; (8007c7c <USBD_SetConfig+0x150>)
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7fe ff9d 	bl	8006b56 <USBD_SetClassConfig>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00f      	beq.n	8007c46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f918 	bl	8007e5e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7fe ffa9 	bl	8006b8e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c44:	e014      	b.n	8007c70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f9d4 	bl	8007ff4 <USBD_CtlSendStatus>
      break;
 8007c4c:	e010      	b.n	8007c70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f9d0 	bl	8007ff4 <USBD_CtlSendStatus>
      break;
 8007c54:	e00c      	b.n	8007c70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f900 	bl	8007e5e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c5e:	4b07      	ldr	r3, [pc, #28]	; (8007c7c <USBD_SetConfig+0x150>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7fe ff92 	bl	8006b8e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c6e:	bf00      	nop
  }

  return ret;
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	20000354 	.word	0x20000354

08007c80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	88db      	ldrh	r3, [r3, #6]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d004      	beq.n	8007c9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f8e2 	bl	8007e5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c9a:	e023      	b.n	8007ce4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	dc02      	bgt.n	8007cae <USBD_GetConfig+0x2e>
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	dc03      	bgt.n	8007cb4 <USBD_GetConfig+0x34>
 8007cac:	e015      	b.n	8007cda <USBD_GetConfig+0x5a>
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	d00b      	beq.n	8007cca <USBD_GetConfig+0x4a>
 8007cb2:	e012      	b.n	8007cda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f93c 	bl	8007f40 <USBD_CtlSendData>
        break;
 8007cc8:	e00c      	b.n	8007ce4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	2201      	movs	r2, #1
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f934 	bl	8007f40 <USBD_CtlSendData>
        break;
 8007cd8:	e004      	b.n	8007ce4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f8be 	bl	8007e5e <USBD_CtlError>
        break;
 8007ce2:	bf00      	nop
}
 8007ce4:	bf00      	nop
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d81e      	bhi.n	8007d42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	88db      	ldrh	r3, [r3, #6]
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d004      	beq.n	8007d16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f8a5 	bl	8007e5e <USBD_CtlError>
        break;
 8007d14:	e01a      	b.n	8007d4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d005      	beq.n	8007d32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	f043 0202 	orr.w	r2, r3, #2
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	330c      	adds	r3, #12
 8007d36:	2202      	movs	r2, #2
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f900 	bl	8007f40 <USBD_CtlSendData>
      break;
 8007d40:	e004      	b.n	8007d4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f88a 	bl	8007e5e <USBD_CtlError>
      break;
 8007d4a:	bf00      	nop
  }
}
 8007d4c:	bf00      	nop
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	885b      	ldrh	r3, [r3, #2]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d107      	bne.n	8007d76 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f940 	bl	8007ff4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007d74:	e013      	b.n	8007d9e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	885b      	ldrh	r3, [r3, #2]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d10b      	bne.n	8007d96 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	889b      	ldrh	r3, [r3, #4]
 8007d82:	0a1b      	lsrs	r3, r3, #8
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f930 	bl	8007ff4 <USBD_CtlSendStatus>
}
 8007d94:	e003      	b.n	8007d9e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f860 	bl	8007e5e <USBD_CtlError>
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	3b01      	subs	r3, #1
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d80b      	bhi.n	8007dd6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	885b      	ldrh	r3, [r3, #2]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d10c      	bne.n	8007de0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f910 	bl	8007ff4 <USBD_CtlSendStatus>
      }
      break;
 8007dd4:	e004      	b.n	8007de0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f840 	bl	8007e5e <USBD_CtlError>
      break;
 8007dde:	e000      	b.n	8007de2 <USBD_ClrFeature+0x3c>
      break;
 8007de0:	bf00      	nop
  }
}
 8007de2:	bf00      	nop
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	781a      	ldrb	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	3301      	adds	r3, #1
 8007e04:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	781a      	ldrb	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3301      	adds	r3, #1
 8007e12:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f7ff fa41 	bl	800729c <SWAPBYTE>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	3301      	adds	r3, #1
 8007e26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f7ff fa34 	bl	800729c <SWAPBYTE>
 8007e34:	4603      	mov	r3, r0
 8007e36:	461a      	mov	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3301      	adds	r3, #1
 8007e46:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f7ff fa27 	bl	800729c <SWAPBYTE>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	461a      	mov	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	80da      	strh	r2, [r3, #6]
}
 8007e56:	bf00      	nop
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b082      	sub	sp, #8
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e68:	2180      	movs	r1, #128	; 0x80
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fcf6 	bl	800885c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e70:	2100      	movs	r1, #0
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fcf2 	bl	800885c <USBD_LL_StallEP>
}
 8007e78:	bf00      	nop
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d036      	beq.n	8007f04 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007e9a:	6938      	ldr	r0, [r7, #16]
 8007e9c:	f000 f836 	bl	8007f0c <USBD_GetLen>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007eae:	7dfb      	ldrb	r3, [r7, #23]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	7812      	ldrb	r2, [r2, #0]
 8007eb8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	2203      	movs	r2, #3
 8007ec8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ed0:	e013      	b.n	8007efa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	7812      	ldrb	r2, [r2, #0]
 8007edc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	613b      	str	r3, [r7, #16]
    idx++;
 8007ee4:	7dfb      	ldrb	r3, [r7, #23]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007eea:	7dfb      	ldrb	r3, [r7, #23]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	4413      	add	r3, r2
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ef4:	7dfb      	ldrb	r3, [r7, #23]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e7      	bne.n	8007ed2 <USBD_GetString+0x52>
 8007f02:	e000      	b.n	8007f06 <USBD_GetString+0x86>
    return;
 8007f04:	bf00      	nop
  }
}
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f1c:	e005      	b.n	8007f2a <USBD_GetLen+0x1e>
  {
    len++;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	3301      	adds	r3, #1
 8007f22:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	3301      	adds	r3, #1
 8007f28:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1f5      	bne.n	8007f1e <USBD_GetLen+0x12>
  }

  return len;
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	2100      	movs	r1, #0
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f000 fd01 	bl	800896e <USBD_LL_Transmit>

  return USBD_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	60f8      	str	r0, [r7, #12]
 8007f7e:	60b9      	str	r1, [r7, #8]
 8007f80:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	2100      	movs	r1, #0
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f000 fcf0 	bl	800896e <USBD_LL_Transmit>

  return USBD_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2203      	movs	r2, #3
 8007fa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f000 fcf4 	bl	80089b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	60f8      	str	r0, [r7, #12]
 8007fda:	60b9      	str	r1, [r7, #8]
 8007fdc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 fce3 	bl	80089b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2204      	movs	r2, #4
 8008000:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008004:	2300      	movs	r3, #0
 8008006:	2200      	movs	r2, #0
 8008008:	2100      	movs	r1, #0
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fcaf 	bl	800896e <USBD_LL_Transmit>

  return USBD_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2205      	movs	r2, #5
 8008026:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800802a:	2300      	movs	r3, #0
 800802c:	2200      	movs	r2, #0
 800802e:	2100      	movs	r1, #0
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fcbd 	bl	80089b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008044:	2200      	movs	r2, #0
 8008046:	4912      	ldr	r1, [pc, #72]	; (8008090 <MX_USB_DEVICE_Init+0x50>)
 8008048:	4812      	ldr	r0, [pc, #72]	; (8008094 <MX_USB_DEVICE_Init+0x54>)
 800804a:	f7fe fd07 	bl	8006a5c <USBD_Init>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008054:	f7f8 fe5c 	bl	8000d10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008058:	490f      	ldr	r1, [pc, #60]	; (8008098 <MX_USB_DEVICE_Init+0x58>)
 800805a:	480e      	ldr	r0, [pc, #56]	; (8008094 <MX_USB_DEVICE_Init+0x54>)
 800805c:	f7fe fd2e 	bl	8006abc <USBD_RegisterClass>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008066:	f7f8 fe53 	bl	8000d10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800806a:	490c      	ldr	r1, [pc, #48]	; (800809c <MX_USB_DEVICE_Init+0x5c>)
 800806c:	4809      	ldr	r0, [pc, #36]	; (8008094 <MX_USB_DEVICE_Init+0x54>)
 800806e:	f7fe fc1f 	bl	80068b0 <USBD_CDC_RegisterInterface>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008078:	f7f8 fe4a 	bl	8000d10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800807c:	4805      	ldr	r0, [pc, #20]	; (8008094 <MX_USB_DEVICE_Init+0x54>)
 800807e:	f7fe fd53 	bl	8006b28 <USBD_Start>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008088:	f7f8 fe42 	bl	8000d10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800808c:	bf00      	nop
 800808e:	bd80      	pop	{r7, pc}
 8008090:	20000138 	.word	0x20000138
 8008094:	20000358 	.word	0x20000358
 8008098:	200000a4 	.word	0x200000a4
 800809c:	20000124 	.word	0x20000124

080080a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80080a4:	2200      	movs	r2, #0
 80080a6:	4905      	ldr	r1, [pc, #20]	; (80080bc <CDC_Init_FS+0x1c>)
 80080a8:	4805      	ldr	r0, [pc, #20]	; (80080c0 <CDC_Init_FS+0x20>)
 80080aa:	f7fe fc1b 	bl	80068e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80080ae:	4905      	ldr	r1, [pc, #20]	; (80080c4 <CDC_Init_FS+0x24>)
 80080b0:	4803      	ldr	r0, [pc, #12]	; (80080c0 <CDC_Init_FS+0x20>)
 80080b2:	f7fe fc39 	bl	8006928 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80080b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	20000e34 	.word	0x20000e34
 80080c0:	20000358 	.word	0x20000358
 80080c4:	20000634 	.word	0x20000634

080080c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80080c8:	b480      	push	{r7}
 80080ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80080cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	4603      	mov	r3, r0
 80080e0:	6039      	str	r1, [r7, #0]
 80080e2:	71fb      	strb	r3, [r7, #7]
 80080e4:	4613      	mov	r3, r2
 80080e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	2b23      	cmp	r3, #35	; 0x23
 80080ec:	d84a      	bhi.n	8008184 <CDC_Control_FS+0xac>
 80080ee:	a201      	add	r2, pc, #4	; (adr r2, 80080f4 <CDC_Control_FS+0x1c>)
 80080f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f4:	08008185 	.word	0x08008185
 80080f8:	08008185 	.word	0x08008185
 80080fc:	08008185 	.word	0x08008185
 8008100:	08008185 	.word	0x08008185
 8008104:	08008185 	.word	0x08008185
 8008108:	08008185 	.word	0x08008185
 800810c:	08008185 	.word	0x08008185
 8008110:	08008185 	.word	0x08008185
 8008114:	08008185 	.word	0x08008185
 8008118:	08008185 	.word	0x08008185
 800811c:	08008185 	.word	0x08008185
 8008120:	08008185 	.word	0x08008185
 8008124:	08008185 	.word	0x08008185
 8008128:	08008185 	.word	0x08008185
 800812c:	08008185 	.word	0x08008185
 8008130:	08008185 	.word	0x08008185
 8008134:	08008185 	.word	0x08008185
 8008138:	08008185 	.word	0x08008185
 800813c:	08008185 	.word	0x08008185
 8008140:	08008185 	.word	0x08008185
 8008144:	08008185 	.word	0x08008185
 8008148:	08008185 	.word	0x08008185
 800814c:	08008185 	.word	0x08008185
 8008150:	08008185 	.word	0x08008185
 8008154:	08008185 	.word	0x08008185
 8008158:	08008185 	.word	0x08008185
 800815c:	08008185 	.word	0x08008185
 8008160:	08008185 	.word	0x08008185
 8008164:	08008185 	.word	0x08008185
 8008168:	08008185 	.word	0x08008185
 800816c:	08008185 	.word	0x08008185
 8008170:	08008185 	.word	0x08008185
 8008174:	08008185 	.word	0x08008185
 8008178:	08008185 	.word	0x08008185
 800817c:	08008185 	.word	0x08008185
 8008180:	08008185 	.word	0x08008185
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008184:	bf00      	nop
  }

  return (USBD_OK);
 8008186:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008188:	4618      	mov	r0, r3
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
strcpy(Buf,Buffer);
 800819e:	4b09      	ldr	r3, [pc, #36]	; (80081c4 <CDC_Receive_FS+0x30>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fca7 	bl	8008af8 <strcpy>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80081aa:	6879      	ldr	r1, [r7, #4]
 80081ac:	4806      	ldr	r0, [pc, #24]	; (80081c8 <CDC_Receive_FS+0x34>)
 80081ae:	f7fe fbbb 	bl	8006928 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80081b2:	4805      	ldr	r0, [pc, #20]	; (80081c8 <CDC_Receive_FS+0x34>)
 80081b4:	f7fe fc1c 	bl	80069f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80081b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20001634 	.word	0x20001634
 80081c8:	20000358 	.word	0x20000358

080081cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80081dc:	4b0d      	ldr	r3, [pc, #52]	; (8008214 <CDC_Transmit_FS+0x48>)
 80081de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e00b      	b.n	800820a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80081f2:	887b      	ldrh	r3, [r7, #2]
 80081f4:	461a      	mov	r2, r3
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	4806      	ldr	r0, [pc, #24]	; (8008214 <CDC_Transmit_FS+0x48>)
 80081fa:	f7fe fb73 	bl	80068e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80081fe:	4805      	ldr	r0, [pc, #20]	; (8008214 <CDC_Transmit_FS+0x48>)
 8008200:	f7fe fbb0 	bl	8006964 <USBD_CDC_TransmitPacket>
 8008204:	4603      	mov	r3, r0
 8008206:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	20000358 	.word	0x20000358

08008218 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	4613      	mov	r3, r2
 8008224:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800822a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800822e:	4618      	mov	r0, r3
 8008230:	371c      	adds	r7, #28
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
	...

0800823c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	4603      	mov	r3, r0
 8008244:	6039      	str	r1, [r7, #0]
 8008246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2212      	movs	r2, #18
 800824c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800824e:	4b03      	ldr	r3, [pc, #12]	; (800825c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008250:	4618      	mov	r0, r3
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	20000154 	.word	0x20000154

08008260 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	4603      	mov	r3, r0
 8008268:	6039      	str	r1, [r7, #0]
 800826a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2204      	movs	r2, #4
 8008270:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008272:	4b03      	ldr	r3, [pc, #12]	; (8008280 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	20000168 	.word	0x20000168

08008284 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	6039      	str	r1, [r7, #0]
 800828e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008290:	79fb      	ldrb	r3, [r7, #7]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d105      	bne.n	80082a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	4907      	ldr	r1, [pc, #28]	; (80082b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800829a:	4808      	ldr	r0, [pc, #32]	; (80082bc <USBD_FS_ProductStrDescriptor+0x38>)
 800829c:	f7ff fdf0 	bl	8007e80 <USBD_GetString>
 80082a0:	e004      	b.n	80082ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	4904      	ldr	r1, [pc, #16]	; (80082b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80082a6:	4805      	ldr	r0, [pc, #20]	; (80082bc <USBD_FS_ProductStrDescriptor+0x38>)
 80082a8:	f7ff fdea 	bl	8007e80 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082ac:	4b02      	ldr	r3, [pc, #8]	; (80082b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	20001638 	.word	0x20001638
 80082bc:	08008be0 	.word	0x08008be0

080082c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	4603      	mov	r3, r0
 80082c8:	6039      	str	r1, [r7, #0]
 80082ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	4904      	ldr	r1, [pc, #16]	; (80082e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80082d0:	4804      	ldr	r0, [pc, #16]	; (80082e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80082d2:	f7ff fdd5 	bl	8007e80 <USBD_GetString>
  return USBD_StrDesc;
 80082d6:	4b02      	ldr	r3, [pc, #8]	; (80082e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	20001638 	.word	0x20001638
 80082e4:	08008bf8 	.word	0x08008bf8

080082e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	6039      	str	r1, [r7, #0]
 80082f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	221a      	movs	r2, #26
 80082f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082fa:	f000 f843 	bl	8008384 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80082fe:	4b02      	ldr	r3, [pc, #8]	; (8008308 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008300:	4618      	mov	r0, r3
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	2000016c 	.word	0x2000016c

0800830c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	4603      	mov	r3, r0
 8008314:	6039      	str	r1, [r7, #0]
 8008316:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008318:	79fb      	ldrb	r3, [r7, #7]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d105      	bne.n	800832a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800831e:	683a      	ldr	r2, [r7, #0]
 8008320:	4907      	ldr	r1, [pc, #28]	; (8008340 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008322:	4808      	ldr	r0, [pc, #32]	; (8008344 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008324:	f7ff fdac 	bl	8007e80 <USBD_GetString>
 8008328:	e004      	b.n	8008334 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	4904      	ldr	r1, [pc, #16]	; (8008340 <USBD_FS_ConfigStrDescriptor+0x34>)
 800832e:	4805      	ldr	r0, [pc, #20]	; (8008344 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008330:	f7ff fda6 	bl	8007e80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008334:	4b02      	ldr	r3, [pc, #8]	; (8008340 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008336:	4618      	mov	r0, r3
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	20001638 	.word	0x20001638
 8008344:	08008c0c 	.word	0x08008c0c

08008348 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	4603      	mov	r3, r0
 8008350:	6039      	str	r1, [r7, #0]
 8008352:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d105      	bne.n	8008366 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	4907      	ldr	r1, [pc, #28]	; (800837c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800835e:	4808      	ldr	r0, [pc, #32]	; (8008380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008360:	f7ff fd8e 	bl	8007e80 <USBD_GetString>
 8008364:	e004      	b.n	8008370 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	4904      	ldr	r1, [pc, #16]	; (800837c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800836a:	4805      	ldr	r0, [pc, #20]	; (8008380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800836c:	f7ff fd88 	bl	8007e80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008370:	4b02      	ldr	r3, [pc, #8]	; (800837c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20001638 	.word	0x20001638
 8008380:	08008c18 	.word	0x08008c18

08008384 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800838a:	4b0f      	ldr	r3, [pc, #60]	; (80083c8 <Get_SerialNum+0x44>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008390:	4b0e      	ldr	r3, [pc, #56]	; (80083cc <Get_SerialNum+0x48>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008396:	4b0e      	ldr	r3, [pc, #56]	; (80083d0 <Get_SerialNum+0x4c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4413      	add	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d009      	beq.n	80083be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80083aa:	2208      	movs	r2, #8
 80083ac:	4909      	ldr	r1, [pc, #36]	; (80083d4 <Get_SerialNum+0x50>)
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f000 f814 	bl	80083dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80083b4:	2204      	movs	r2, #4
 80083b6:	4908      	ldr	r1, [pc, #32]	; (80083d8 <Get_SerialNum+0x54>)
 80083b8:	68b8      	ldr	r0, [r7, #8]
 80083ba:	f000 f80f 	bl	80083dc <IntToUnicode>
  }
}
 80083be:	bf00      	nop
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	1fff7a10 	.word	0x1fff7a10
 80083cc:	1fff7a14 	.word	0x1fff7a14
 80083d0:	1fff7a18 	.word	0x1fff7a18
 80083d4:	2000016e 	.word	0x2000016e
 80083d8:	2000017e 	.word	0x2000017e

080083dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	4613      	mov	r3, r2
 80083e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80083ee:	2300      	movs	r3, #0
 80083f0:	75fb      	strb	r3, [r7, #23]
 80083f2:	e027      	b.n	8008444 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	0f1b      	lsrs	r3, r3, #28
 80083f8:	2b09      	cmp	r3, #9
 80083fa:	d80b      	bhi.n	8008414 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	0f1b      	lsrs	r3, r3, #28
 8008400:	b2da      	uxtb	r2, r3
 8008402:	7dfb      	ldrb	r3, [r7, #23]
 8008404:	005b      	lsls	r3, r3, #1
 8008406:	4619      	mov	r1, r3
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	440b      	add	r3, r1
 800840c:	3230      	adds	r2, #48	; 0x30
 800840e:	b2d2      	uxtb	r2, r2
 8008410:	701a      	strb	r2, [r3, #0]
 8008412:	e00a      	b.n	800842a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	0f1b      	lsrs	r3, r3, #28
 8008418:	b2da      	uxtb	r2, r3
 800841a:	7dfb      	ldrb	r3, [r7, #23]
 800841c:	005b      	lsls	r3, r3, #1
 800841e:	4619      	mov	r1, r3
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	440b      	add	r3, r1
 8008424:	3237      	adds	r2, #55	; 0x37
 8008426:	b2d2      	uxtb	r2, r2
 8008428:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	011b      	lsls	r3, r3, #4
 800842e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008430:	7dfb      	ldrb	r3, [r7, #23]
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	3301      	adds	r3, #1
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	4413      	add	r3, r2
 800843a:	2200      	movs	r2, #0
 800843c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800843e:	7dfb      	ldrb	r3, [r7, #23]
 8008440:	3301      	adds	r3, #1
 8008442:	75fb      	strb	r3, [r7, #23]
 8008444:	7dfa      	ldrb	r2, [r7, #23]
 8008446:	79fb      	ldrb	r3, [r7, #7]
 8008448:	429a      	cmp	r2, r3
 800844a:	d3d3      	bcc.n	80083f4 <IntToUnicode+0x18>
  }
}
 800844c:	bf00      	nop
 800844e:	bf00      	nop
 8008450:	371c      	adds	r7, #28
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
	...

0800845c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b08a      	sub	sp, #40	; 0x28
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008464:	f107 0314 	add.w	r3, r7, #20
 8008468:	2200      	movs	r2, #0
 800846a:	601a      	str	r2, [r3, #0]
 800846c:	605a      	str	r2, [r3, #4]
 800846e:	609a      	str	r2, [r3, #8]
 8008470:	60da      	str	r2, [r3, #12]
 8008472:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800847c:	d147      	bne.n	800850e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800847e:	2300      	movs	r3, #0
 8008480:	613b      	str	r3, [r7, #16]
 8008482:	4b25      	ldr	r3, [pc, #148]	; (8008518 <HAL_PCD_MspInit+0xbc>)
 8008484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008486:	4a24      	ldr	r2, [pc, #144]	; (8008518 <HAL_PCD_MspInit+0xbc>)
 8008488:	f043 0301 	orr.w	r3, r3, #1
 800848c:	6313      	str	r3, [r2, #48]	; 0x30
 800848e:	4b22      	ldr	r3, [pc, #136]	; (8008518 <HAL_PCD_MspInit+0xbc>)
 8008490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	613b      	str	r3, [r7, #16]
 8008498:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800849a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800849e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084a0:	2300      	movs	r3, #0
 80084a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084a4:	2300      	movs	r3, #0
 80084a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80084a8:	f107 0314 	add.w	r3, r7, #20
 80084ac:	4619      	mov	r1, r3
 80084ae:	481b      	ldr	r0, [pc, #108]	; (800851c <HAL_PCD_MspInit+0xc0>)
 80084b0:	f7f9 f80c 	bl	80014cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80084b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80084b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ba:	2302      	movs	r3, #2
 80084bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084be:	2300      	movs	r3, #0
 80084c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084c2:	2300      	movs	r3, #0
 80084c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80084c6:	230a      	movs	r3, #10
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084ca:	f107 0314 	add.w	r3, r7, #20
 80084ce:	4619      	mov	r1, r3
 80084d0:	4812      	ldr	r0, [pc, #72]	; (800851c <HAL_PCD_MspInit+0xc0>)
 80084d2:	f7f8 fffb 	bl	80014cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80084d6:	4b10      	ldr	r3, [pc, #64]	; (8008518 <HAL_PCD_MspInit+0xbc>)
 80084d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084da:	4a0f      	ldr	r2, [pc, #60]	; (8008518 <HAL_PCD_MspInit+0xbc>)
 80084dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084e0:	6353      	str	r3, [r2, #52]	; 0x34
 80084e2:	2300      	movs	r3, #0
 80084e4:	60fb      	str	r3, [r7, #12]
 80084e6:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <HAL_PCD_MspInit+0xbc>)
 80084e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ea:	4a0b      	ldr	r2, [pc, #44]	; (8008518 <HAL_PCD_MspInit+0xbc>)
 80084ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084f0:	6453      	str	r3, [r2, #68]	; 0x44
 80084f2:	4b09      	ldr	r3, [pc, #36]	; (8008518 <HAL_PCD_MspInit+0xbc>)
 80084f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80084fe:	2200      	movs	r2, #0
 8008500:	2100      	movs	r1, #0
 8008502:	2043      	movs	r0, #67	; 0x43
 8008504:	f7f8 ff9d 	bl	8001442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008508:	2043      	movs	r0, #67	; 0x43
 800850a:	f7f8 ffb6 	bl	800147a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800850e:	bf00      	nop
 8008510:	3728      	adds	r7, #40	; 0x28
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	40023800 	.word	0x40023800
 800851c:	40020000 	.word	0x40020000

08008520 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008534:	4619      	mov	r1, r3
 8008536:	4610      	mov	r0, r2
 8008538:	f7fe fb43 	bl	8006bc2 <USBD_LL_SetupStage>
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	460b      	mov	r3, r1
 800854e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008556:	78fa      	ldrb	r2, [r7, #3]
 8008558:	6879      	ldr	r1, [r7, #4]
 800855a:	4613      	mov	r3, r2
 800855c:	00db      	lsls	r3, r3, #3
 800855e:	4413      	add	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	440b      	add	r3, r1
 8008564:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	78fb      	ldrb	r3, [r7, #3]
 800856c:	4619      	mov	r1, r3
 800856e:	f7fe fb7d 	bl	8006c6c <USBD_LL_DataOutStage>
}
 8008572:	bf00      	nop
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b082      	sub	sp, #8
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	460b      	mov	r3, r1
 8008584:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	4613      	mov	r3, r2
 8008592:	00db      	lsls	r3, r3, #3
 8008594:	4413      	add	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	440b      	add	r3, r1
 800859a:	334c      	adds	r3, #76	; 0x4c
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	78fb      	ldrb	r3, [r7, #3]
 80085a0:	4619      	mov	r1, r3
 80085a2:	f7fe fc16 	bl	8006dd2 <USBD_LL_DataInStage>
}
 80085a6:	bf00      	nop
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b082      	sub	sp, #8
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085bc:	4618      	mov	r0, r3
 80085be:	f7fe fd4a 	bl	8007056 <USBD_LL_SOF>
}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b084      	sub	sp, #16
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80085d2:	2301      	movs	r3, #1
 80085d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d102      	bne.n	80085e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]
 80085e2:	e008      	b.n	80085f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d102      	bne.n	80085f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80085ec:	2301      	movs	r3, #1
 80085ee:	73fb      	strb	r3, [r7, #15]
 80085f0:	e001      	b.n	80085f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80085f2:	f7f8 fb8d 	bl	8000d10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085fc:	7bfa      	ldrb	r2, [r7, #15]
 80085fe:	4611      	mov	r1, r2
 8008600:	4618      	mov	r0, r3
 8008602:	f7fe fcea 	bl	8006fda <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800860c:	4618      	mov	r0, r3
 800860e:	f7fe fc92 	bl	8006f36 <USBD_LL_Reset>
}
 8008612:	bf00      	nop
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800862a:	4618      	mov	r0, r3
 800862c:	f7fe fce5 	bl	8006ffa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	6812      	ldr	r2, [r2, #0]
 800863e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008642:	f043 0301 	orr.w	r3, r3, #1
 8008646:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d005      	beq.n	800865c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008650:	4b04      	ldr	r3, [pc, #16]	; (8008664 <HAL_PCD_SuspendCallback+0x48>)
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	4a03      	ldr	r2, [pc, #12]	; (8008664 <HAL_PCD_SuspendCallback+0x48>)
 8008656:	f043 0306 	orr.w	r3, r3, #6
 800865a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800865c:	bf00      	nop
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	e000ed00 	.word	0xe000ed00

08008668 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008676:	4618      	mov	r0, r3
 8008678:	f7fe fcd5 	bl	8007026 <USBD_LL_Resume>
}
 800867c:	bf00      	nop
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008696:	78fa      	ldrb	r2, [r7, #3]
 8008698:	4611      	mov	r1, r2
 800869a:	4618      	mov	r0, r3
 800869c:	f7fe fd2d 	bl	80070fa <USBD_LL_IsoOUTIncomplete>
}
 80086a0:	bf00      	nop
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086ba:	78fa      	ldrb	r2, [r7, #3]
 80086bc:	4611      	mov	r1, r2
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fe fce9 	bl	8007096 <USBD_LL_IsoINIncomplete>
}
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fe fd3f 	bl	800715e <USBD_LL_DevConnected>
}
 80086e0:	bf00      	nop
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe fd3c 	bl	8007174 <USBD_LL_DevDisconnected>
}
 80086fc:	bf00      	nop
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d13c      	bne.n	800878e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008714:	4a20      	ldr	r2, [pc, #128]	; (8008798 <USBD_LL_Init+0x94>)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a1e      	ldr	r2, [pc, #120]	; (8008798 <USBD_LL_Init+0x94>)
 8008720:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008724:	4b1c      	ldr	r3, [pc, #112]	; (8008798 <USBD_LL_Init+0x94>)
 8008726:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800872a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800872c:	4b1a      	ldr	r3, [pc, #104]	; (8008798 <USBD_LL_Init+0x94>)
 800872e:	2204      	movs	r2, #4
 8008730:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008732:	4b19      	ldr	r3, [pc, #100]	; (8008798 <USBD_LL_Init+0x94>)
 8008734:	2202      	movs	r2, #2
 8008736:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008738:	4b17      	ldr	r3, [pc, #92]	; (8008798 <USBD_LL_Init+0x94>)
 800873a:	2200      	movs	r2, #0
 800873c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800873e:	4b16      	ldr	r3, [pc, #88]	; (8008798 <USBD_LL_Init+0x94>)
 8008740:	2202      	movs	r2, #2
 8008742:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008744:	4b14      	ldr	r3, [pc, #80]	; (8008798 <USBD_LL_Init+0x94>)
 8008746:	2200      	movs	r2, #0
 8008748:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800874a:	4b13      	ldr	r3, [pc, #76]	; (8008798 <USBD_LL_Init+0x94>)
 800874c:	2200      	movs	r2, #0
 800874e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008750:	4b11      	ldr	r3, [pc, #68]	; (8008798 <USBD_LL_Init+0x94>)
 8008752:	2200      	movs	r2, #0
 8008754:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008756:	4b10      	ldr	r3, [pc, #64]	; (8008798 <USBD_LL_Init+0x94>)
 8008758:	2200      	movs	r2, #0
 800875a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800875c:	4b0e      	ldr	r3, [pc, #56]	; (8008798 <USBD_LL_Init+0x94>)
 800875e:	2200      	movs	r2, #0
 8008760:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008762:	480d      	ldr	r0, [pc, #52]	; (8008798 <USBD_LL_Init+0x94>)
 8008764:	f7f9 fe7c 	bl	8002460 <HAL_PCD_Init>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800876e:	f7f8 facf 	bl	8000d10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008772:	2180      	movs	r1, #128	; 0x80
 8008774:	4808      	ldr	r0, [pc, #32]	; (8008798 <USBD_LL_Init+0x94>)
 8008776:	f7fb f8d4 	bl	8003922 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800877a:	2240      	movs	r2, #64	; 0x40
 800877c:	2100      	movs	r1, #0
 800877e:	4806      	ldr	r0, [pc, #24]	; (8008798 <USBD_LL_Init+0x94>)
 8008780:	f7fb f888 	bl	8003894 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008784:	2280      	movs	r2, #128	; 0x80
 8008786:	2101      	movs	r1, #1
 8008788:	4803      	ldr	r0, [pc, #12]	; (8008798 <USBD_LL_Init+0x94>)
 800878a:	f7fb f883 	bl	8003894 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	20001838 	.word	0x20001838

0800879c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7f9 ff71 	bl	800269a <HAL_PCD_Start>
 80087b8:	4603      	mov	r3, r0
 80087ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 f942 	bl	8008a48 <USBD_Get_USB_Status>
 80087c4:	4603      	mov	r3, r0
 80087c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	4608      	mov	r0, r1
 80087dc:	4611      	mov	r1, r2
 80087de:	461a      	mov	r2, r3
 80087e0:	4603      	mov	r3, r0
 80087e2:	70fb      	strb	r3, [r7, #3]
 80087e4:	460b      	mov	r3, r1
 80087e6:	70bb      	strb	r3, [r7, #2]
 80087e8:	4613      	mov	r3, r2
 80087ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80087fa:	78bb      	ldrb	r3, [r7, #2]
 80087fc:	883a      	ldrh	r2, [r7, #0]
 80087fe:	78f9      	ldrb	r1, [r7, #3]
 8008800:	f7fa fc42 	bl	8003088 <HAL_PCD_EP_Open>
 8008804:	4603      	mov	r3, r0
 8008806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	4618      	mov	r0, r3
 800880c:	f000 f91c 	bl	8008a48 <USBD_Get_USB_Status>
 8008810:	4603      	mov	r3, r0
 8008812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008814:	7bbb      	ldrb	r3, [r7, #14]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	460b      	mov	r3, r1
 8008828:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008838:	78fa      	ldrb	r2, [r7, #3]
 800883a:	4611      	mov	r1, r2
 800883c:	4618      	mov	r0, r3
 800883e:	f7fa fc8b 	bl	8003158 <HAL_PCD_EP_Close>
 8008842:	4603      	mov	r3, r0
 8008844:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008846:	7bfb      	ldrb	r3, [r7, #15]
 8008848:	4618      	mov	r0, r3
 800884a:	f000 f8fd 	bl	8008a48 <USBD_Get_USB_Status>
 800884e:	4603      	mov	r3, r0
 8008850:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008852:	7bbb      	ldrb	r3, [r7, #14]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008876:	78fa      	ldrb	r2, [r7, #3]
 8008878:	4611      	mov	r1, r2
 800887a:	4618      	mov	r0, r3
 800887c:	f7fa fd63 	bl	8003346 <HAL_PCD_EP_SetStall>
 8008880:	4603      	mov	r3, r0
 8008882:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	4618      	mov	r0, r3
 8008888:	f000 f8de 	bl	8008a48 <USBD_Get_USB_Status>
 800888c:	4603      	mov	r3, r0
 800888e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008890:	7bbb      	ldrb	r3, [r7, #14]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	460b      	mov	r3, r1
 80088a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088b4:	78fa      	ldrb	r2, [r7, #3]
 80088b6:	4611      	mov	r1, r2
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fa fda8 	bl	800340e <HAL_PCD_EP_ClrStall>
 80088be:	4603      	mov	r3, r0
 80088c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 f8bf 	bl	8008a48 <USBD_Get_USB_Status>
 80088ca:	4603      	mov	r3, r0
 80088cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	460b      	mov	r3, r1
 80088e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80088ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	da0b      	bge.n	800890c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80088f4:	78fb      	ldrb	r3, [r7, #3]
 80088f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088fa:	68f9      	ldr	r1, [r7, #12]
 80088fc:	4613      	mov	r3, r2
 80088fe:	00db      	lsls	r3, r3, #3
 8008900:	4413      	add	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	440b      	add	r3, r1
 8008906:	333e      	adds	r3, #62	; 0x3e
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	e00b      	b.n	8008924 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800890c:	78fb      	ldrb	r3, [r7, #3]
 800890e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008912:	68f9      	ldr	r1, [r7, #12]
 8008914:	4613      	mov	r3, r2
 8008916:	00db      	lsls	r3, r3, #3
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	440b      	add	r3, r1
 800891e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008922:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008924:	4618      	mov	r0, r3
 8008926:	3714      	adds	r7, #20
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	460b      	mov	r3, r1
 800893a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800894a:	78fa      	ldrb	r2, [r7, #3]
 800894c:	4611      	mov	r1, r2
 800894e:	4618      	mov	r0, r3
 8008950:	f7fa fb75 	bl	800303e <HAL_PCD_SetAddress>
 8008954:	4603      	mov	r3, r0
 8008956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	4618      	mov	r0, r3
 800895c:	f000 f874 	bl	8008a48 <USBD_Get_USB_Status>
 8008960:	4603      	mov	r3, r0
 8008962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008964:	7bbb      	ldrb	r3, [r7, #14]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b086      	sub	sp, #24
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	603b      	str	r3, [r7, #0]
 800897a:	460b      	mov	r3, r1
 800897c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800897e:	2300      	movs	r3, #0
 8008980:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800898c:	7af9      	ldrb	r1, [r7, #11]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	f7fa fc8e 	bl	80032b2 <HAL_PCD_EP_Transmit>
 8008996:	4603      	mov	r3, r0
 8008998:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800899a:	7dfb      	ldrb	r3, [r7, #23]
 800899c:	4618      	mov	r0, r3
 800899e:	f000 f853 	bl	8008a48 <USBD_Get_USB_Status>
 80089a2:	4603      	mov	r3, r0
 80089a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3718      	adds	r7, #24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	607a      	str	r2, [r7, #4]
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	460b      	mov	r3, r1
 80089be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80089ce:	7af9      	ldrb	r1, [r7, #11]
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	f7fa fc0a 	bl	80031ec <HAL_PCD_EP_Receive>
 80089d8:	4603      	mov	r3, r0
 80089da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 f832 	bl	8008a48 <USBD_Get_USB_Status>
 80089e4:	4603      	mov	r3, r0
 80089e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3718      	adds	r7, #24
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b082      	sub	sp, #8
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	460b      	mov	r3, r1
 80089fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a04:	78fa      	ldrb	r2, [r7, #3]
 8008a06:	4611      	mov	r1, r2
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7fa fc3a 	bl	8003282 <HAL_PCD_EP_GetRxCount>
 8008a0e:	4603      	mov	r3, r0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a20:	4b03      	ldr	r3, [pc, #12]	; (8008a30 <USBD_static_malloc+0x18>)
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	20001d44 	.word	0x20001d44

08008a34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]

}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a56:	79fb      	ldrb	r3, [r7, #7]
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d817      	bhi.n	8008a8c <USBD_Get_USB_Status+0x44>
 8008a5c:	a201      	add	r2, pc, #4	; (adr r2, 8008a64 <USBD_Get_USB_Status+0x1c>)
 8008a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a62:	bf00      	nop
 8008a64:	08008a75 	.word	0x08008a75
 8008a68:	08008a7b 	.word	0x08008a7b
 8008a6c:	08008a81 	.word	0x08008a81
 8008a70:	08008a87 	.word	0x08008a87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	73fb      	strb	r3, [r7, #15]
    break;
 8008a78:	e00b      	b.n	8008a92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008a7e:	e008      	b.n	8008a92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a80:	2301      	movs	r3, #1
 8008a82:	73fb      	strb	r3, [r7, #15]
    break;
 8008a84:	e005      	b.n	8008a92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a86:	2303      	movs	r3, #3
 8008a88:	73fb      	strb	r3, [r7, #15]
    break;
 8008a8a:	e002      	b.n	8008a92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a90:	bf00      	nop
  }
  return usb_status;
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <__libc_init_array>:
 8008aa0:	b570      	push	{r4, r5, r6, lr}
 8008aa2:	4d0d      	ldr	r5, [pc, #52]	; (8008ad8 <__libc_init_array+0x38>)
 8008aa4:	4c0d      	ldr	r4, [pc, #52]	; (8008adc <__libc_init_array+0x3c>)
 8008aa6:	1b64      	subs	r4, r4, r5
 8008aa8:	10a4      	asrs	r4, r4, #2
 8008aaa:	2600      	movs	r6, #0
 8008aac:	42a6      	cmp	r6, r4
 8008aae:	d109      	bne.n	8008ac4 <__libc_init_array+0x24>
 8008ab0:	4d0b      	ldr	r5, [pc, #44]	; (8008ae0 <__libc_init_array+0x40>)
 8008ab2:	4c0c      	ldr	r4, [pc, #48]	; (8008ae4 <__libc_init_array+0x44>)
 8008ab4:	f000 f828 	bl	8008b08 <_init>
 8008ab8:	1b64      	subs	r4, r4, r5
 8008aba:	10a4      	asrs	r4, r4, #2
 8008abc:	2600      	movs	r6, #0
 8008abe:	42a6      	cmp	r6, r4
 8008ac0:	d105      	bne.n	8008ace <__libc_init_array+0x2e>
 8008ac2:	bd70      	pop	{r4, r5, r6, pc}
 8008ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac8:	4798      	blx	r3
 8008aca:	3601      	adds	r6, #1
 8008acc:	e7ee      	b.n	8008aac <__libc_init_array+0xc>
 8008ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ad2:	4798      	blx	r3
 8008ad4:	3601      	adds	r6, #1
 8008ad6:	e7f2      	b.n	8008abe <__libc_init_array+0x1e>
 8008ad8:	08008c48 	.word	0x08008c48
 8008adc:	08008c48 	.word	0x08008c48
 8008ae0:	08008c48 	.word	0x08008c48
 8008ae4:	08008c4c 	.word	0x08008c4c

08008ae8 <memset>:
 8008ae8:	4402      	add	r2, r0
 8008aea:	4603      	mov	r3, r0
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d100      	bne.n	8008af2 <memset+0xa>
 8008af0:	4770      	bx	lr
 8008af2:	f803 1b01 	strb.w	r1, [r3], #1
 8008af6:	e7f9      	b.n	8008aec <memset+0x4>

08008af8 <strcpy>:
 8008af8:	4603      	mov	r3, r0
 8008afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008afe:	f803 2b01 	strb.w	r2, [r3], #1
 8008b02:	2a00      	cmp	r2, #0
 8008b04:	d1f9      	bne.n	8008afa <strcpy+0x2>
 8008b06:	4770      	bx	lr

08008b08 <_init>:
 8008b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0a:	bf00      	nop
 8008b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0e:	bc08      	pop	{r3}
 8008b10:	469e      	mov	lr, r3
 8008b12:	4770      	bx	lr

08008b14 <_fini>:
 8008b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b16:	bf00      	nop
 8008b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b1a:	bc08      	pop	{r3}
 8008b1c:	469e      	mov	lr, r3
 8008b1e:	4770      	bx	lr
